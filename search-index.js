var searchIndex = JSON.parse('{\
"jf_plonk":{"doc":"A Rust Implementation of the Plonk ZKP System and …","t":"ENNLLLLLALLALLLLLALLLLLLLLALALLLLAADIDLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLRNNNNNNNNNNNENNNENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQDQQIQQLLALLLLLLLLLLLLLLKLKLALLLKLKLLLDDLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGDDDDDDDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLIDDDLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLL","n":["PlonkType","TurboPlonk","UltraPlonk","__clone_box","as_any","as_any_mut","borrow","borrow_mut","circuit","clone","clone_into","constants","deref","deref_mut","drop","eq","equivalent","errors","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","proof_system","to_owned","transcript","try_from","try_into","type_id","vzip","plonk_verifier","transcript","BatchProofVar","BatchableCircuit","VerifyingKeyVar","__clone_box","__clone_box","aggregate_verify_keys","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","partial_verify_circuit","to_owned","to_owned","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RescueTranscriptVar","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","vzip","KECCAK256_STATE_SIZE","CircuitError","DivisionError","DomainCreationError","IndexError","IndexTooLarge","InvalidParameters","IoError","IteratorOutOfRange","NonNativeFieldOverflow","PCSError","ParameterError","PlonkError","PrimitiveError","PublicInputsDoNotMatch","SerializationError","SnarkError","SnarkError","SnarkLookupUnsupported","WrongProof","WrongQuotientPolyDegree","as_any","as_any","as_any_mut","as_any_mut","as_error_source","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","provide","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Error","PlonkKzgSnark","Proof","ProvingKey","UniversalSNARK","UniversalSRS","VerifyingKey","as_any","as_any_mut","batch_arg","batch_prove","batch_verify","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","new","preprocess","preprocess","prove","prove","structs","try_from","try_into","type_id","universal_setup","universal_setup","verify","verify","verify_batch_proof","vzip","BatchArgument","Instance","__clone_box","aggregate_verify_keys","as_any","as_any","as_any_mut","as_any_mut","batch_prove","borrow","borrow","borrow_mut","borrow_mut","build_batch_proof_and_vks_for_test","circuit_mut_ref","clone","clone_into","decide","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","partial_verify","setup_instance","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_key_ref","vzip","vzip","BatchProof","CommitKey","OpenKey","PlookupEvaluations","PlookupProof","PlookupProvingKey","PlookupVerifyingKey","Proof","ProofEvaluations","ProvingKey","UniversalSrs","VerifyingKey","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","convert_te_coordinates_to_scalars","create_variables","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy","dummy","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","len","open_key","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","PlonkTranscript","RescueTranscript","SolidityTranscript","StandardTranscript","append_challenge","append_challenge","append_commitment","append_commitment","append_commitments","append_message","append_message","append_message","append_message","append_plookup_evaluations","append_plookup_evaluations","append_proof_evaluations","append_proof_evaluations","append_vk_and_pub_input","append_vk_and_pub_input","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_and_append_challenge","get_and_append_challenge","get_and_append_challenge","get_and_append_challenge","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["jf_plonk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit","","jf_plonk::circuit::plonk_verifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit::transcript","","","","","","","","","","","","","","","","","","jf_plonk::constants","jf_plonk::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::proof_system","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::proof_system::batch_arg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::proof_system::structsjf_plonk::transcript","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Enum for each type of Plonk scheme.","TurboPlonk","TurboPlonk that supports Plookup","","","","","","Customized circuit","","","Crate wide constants.","","","","","","Error module.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Interfaces for Plonk-based proof systems","","This module implements three different types of …","","","","","Circuits implementation Circuits for Plonk verifiers.","Implementing <em>native</em> circuit for rescue transcript","Represent variables of an aggregated SNARK proof that …","Plonk Circuit that support batch verification","Represent variable of a Plonk verifying key.","","","Aggregate verification keys","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a variable for a Plonk verifying key.","Circuit for partially verifying a batched proof without …","","","Convert to a list of variables.","","","","","","","","","Struct of variables representing a Rescue transcript type, …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Keccak-256 have a 64 byte state size to accommodate two …","An error in the Plonk circuit: {0}","Divided by zero field element","Failed to create domain","Failed to get array value by index","The index is too large for the universal public parameters","Invalid parameters","An error during IO: {0}","Iterator out of range","Non-native field overflow","An error in the underlying polynomial commitment: {0}","Invalid parameters: {0}","A <code>enum</code> specifying the possible failure modes of the Plonk.","Rescue Error","Public inputs for partial verification circuit do not match","An error during (de)serialization","A <code>enum</code> specifying the possible failure modes of the …","An error in the Plonk SNARK logic: {0}","The SNARK does not support lookup","Plonk proof verification failed due to wrong proof","Suspect: circuit is not satisfied. The quotient polynomial …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","SNARK related error","A Plonk instantiated with KZG PCS","The SNARK proof computed by the prover.","The parameters required by the prover to compute a proof …","An interface for SNARKs with universal setup.","Universal Structured Reference String from <code>universal_setup</code>…","The parameters required by the verifier to validate a …","","","An argument system that proves/verifies multiple instances …","Generate an aggregated Plonk proof for multiple instances.","Batch verify multiple SNARK proofs (w.r.t. different …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","A new Plonk KZG SNARK","Circuit-specific preprocessing to compute the …","Input a circuit and the SRS, precompute the proving key …","Compute a SNARK proof of a circuit <code>circuit</code>, using the …","Compute a Plonk proof. Refer to Sec 8.4 of …","Data structures used in Plonk proof systems","","","","Generate the universal SRS for the argument system. This …","","Verify a SNARK proof <code>proof</code> of the circuit <code>circuit</code>, with …","","Verify a single aggregated Plonk proof.","","A batching argument.","A circuit instance that consists of the corresponding …","","Aggregate verification keys","","","","","Prove satisfiability of multiple instances in a batch.","","","","","Create <code>num_instances</code> type A/B instance verifying keys and …","Get mutable circuit by reference.","","","Perform the final pairing to verify the proof.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Partially verify a batched proof without performing the …","Setup the circuit and the proving key for a (mergeable) …","","","","","","","","Get verification key by reference.","","","An aggregated SNARK proof that batchly proving multiple …","Commitment key","Key for verifying PCS opening proof.","A struct that stores the polynomial evaluations in a …","A Plookup argument proof.","Preprocessed prover parameters used to compute Plookup …","Preprocessed verifier parameters used to verify Plookup …","A Plonk SNARK proof.","A struct that stores the polynomial evaluations in a Plonk …","Preprocessed prover parameters used to compute Plonk …","Universal StructuredReferenceString","Preprocessed verifier parameters used to verify Plonk …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the group elements to a list of scalars that …","Create a <code>BatchProofVar</code> variable from a <code>BatchProof</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a dummy batch proof over <code>n</code> TurboPlonk instances.","Create a dummy TurboPlonk verification key for a circuit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check whether a BatchProof proves nothing.","The number of instances being proved in a batch proof.","KZG PCS opening key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The verifying key. It is used by prover to initialize …","","","","","","","","","","Defines transcript APIs.","Transcript with rescue hash function.","Transcript with <code>keccak256</code> hash function.","A wrapper of <code>merlin::Transcript</code>.","Append a challenge to the transcript. <code>_label</code> is omitted for","Append a challenge to the transcript.","Append a single commitment to the transcript. <code>_label</code> is …","Append a single commitment to the transcript.","Append a slice of commitments to the transcript.","Append the message to the transcript.","Append the message to the transcript. <code>_label</code> is omitted for","Append the message to the transcript. <code>_label</code> is omitted for","","","Append the plookup evaluation to the transcript.","","Append a proof evaluation to the transcript.","","Append the verification key and the public input to the …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate the challenge for the current transcript, and …","Generate the challenge for the current transcript, and …","Generate the challenge for the current transcript, and …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create a new plonk transcript.","Create a new plonk transcript. <code>_label</code> is omitted for …","Create a new plonk transcript. <code>label</code> is omitted for …","create a new plonk transcript","","","","","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,0,3,3,0,3,3,3,3,3,0,3,3,3,3,3,3,3,3,0,3,0,3,3,3,3,0,0,0,0,0,19,14,66,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,19,14,14,14,19,14,14,19,14,19,14,19,14,19,14,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,29,29,29,29,29,29,29,29,29,29,30,0,29,29,29,0,29,30,29,30,29,30,29,30,29,29,30,29,30,29,30,29,30,29,30,29,29,30,30,29,29,29,29,29,29,29,30,29,30,29,30,29,30,29,30,29,30,29,29,30,29,30,29,30,29,30,29,30,68,0,68,68,0,68,68,38,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,68,38,68,38,0,38,38,38,68,38,68,38,38,38,0,0,42,69,69,42,69,42,69,69,42,69,42,0,42,42,42,69,69,42,69,42,69,42,69,42,69,42,69,42,69,42,69,42,69,42,69,69,42,69,42,69,42,69,42,42,69,42,0,0,0,0,0,0,0,0,0,0,0,0,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,25,37,50,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,37,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,37,25,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,47,48,37,37,50,51,52,53,25,54,47,48,37,37,50,51,52,53,25,54,47,37,47,48,37,50,51,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,37,37,25,47,37,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,37,47,48,37,50,51,52,53,25,54,47,37,47,47,47,47,48,37,37,37,50,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,47,48,37,50,51,52,53,25,54,52,47,48,37,50,51,52,53,25,54,0,0,0,0,62,70,62,70,70,70,62,64,65,62,70,62,70,62,70,62,64,65,62,64,65,62,64,65,62,64,65,62,64,65,62,64,65,62,64,65,62,64,65,70,62,64,65,62,64,65,62,64,65,62,64,65,62,64,65,62,64,65,70,62,64,65,62,64,65,62,64,65,62,64,65,62,64,65],"f":[0,0,0,[1],[[],2],[[],2],[[]],[[]],0,[3,3],[[]],0,[4],[4],[4],[[3,3],5],[[],5],0,[[3,6],[[8,[7]]]],[[]],[3],[[],4],[[]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],0,[[]],0,[[],8],[[],8],[[],13],[[]],0,0,0,0,0,[1],[1],[[],[[8,[[15,[14]],16]]]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[[19,[[0,[17,18]]]]],[[19,[[0,[17,18]]]]]],[[[14,[[0,[17,20]]]]],[[14,[[0,[17,20]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[[19,[[0,[21,18]]]],19],5],[[[14,[[0,[21,20]]]],14],5],[[],5],[[],5],[[[19,[[0,[22,18]]]],6],23],[[[14,[[0,[22,20]]]],6],23],[[]],[[]],[[],4],[[],4],[[]],[[]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[[24,25],[[8,[[14,[20]],16]]]],[[24,26,26,19,27],[[8,[16]]]],[[]],[[]],[[[14,[20]]],[[15,[27]]]],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[]],[[]],0,[[],2],[[],2],[[]],[[]],[4],[4],[4],[[]],[[],4],[[]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],[[],8],[[],8],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[],28],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[29,6],23],[[29,6],23],[[30,6],23],[[30,6],23],[30,29],[31,29],[32,29],[16,29],[33,29],[34,29],[[]],[[]],[[],4],[[],4],[[]],[[]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[35],[[],36],[[],36],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[]],[[]],0,0,0,0,0,0,0,[[],2],[[],2],0,[[],[[8,[37,29]]]],[[],[[8,[29]]]],[[]],[[]],[4],[4],[4],[[]],[[],4],[[]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],[[],38],[[],8],[[],8],[[[40,[[15,[39]]]]],8],[[[40,[[15,[39]]]]],8],0,[[],8],[[],8],[[],13],[4,8],[4,8],[[[40,[[15,[39]]]]],8],[[[40,[[15,[39]]]]],8],[37,[[8,[29]]]],[[]],0,0,[1],[[],[[8,[[15,[25]],29]]]],[[],2],[[],2],[[],2],[[],2],[[],[[8,[37,29]]]],[[]],[[]],[[]],[[]],[[41,4],[[8,[29]]]],[[[42,[20]]],24],[[[42,[[0,[17,20]]]]],[[42,[[0,[17,20]]]]]],[[]],[43,[[8,[5,29]]]],[4],[4],[4],[4],[4],[4],[[]],[[]],[[],4],[[],4],[[]],[[]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[37,[[8,[29]]]],[[41,24,44],[[8,[42,29]]]],[[]],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[[42,[20]]],25],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[[0,[45,46]]],[[8,[32]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[20]]],[[8,[32]]]],[[[48,[20]]],[[8,[32]]]],[[[37,[20]]],[[8,[32]]]],[[[50,[49]]],[[8,[32]]]],[[[51,[49]]],[[8,[32]]]],[[[52,[20]]],[[8,[32]]]],[[[53,[20]]],[[8,[32]]]],[[[25,[20]]],[[8,[32]]]],[[[54,[20]]],[[8,[32]]]],[[[47,[[0,[17,20]]]]],[[47,[[0,[17,20]]]]]],[[[48,[[0,[17,20]]]]],[[48,[[0,[17,20]]]]]],[[[37,[[0,[17,20]]]]],[[37,[[0,[17,20]]]]]],[[[50,[[0,[17,49]]]]],[[50,[[0,[17,49]]]]]],[[[51,[[0,[17,49]]]]],[[51,[[0,[17,49]]]]]],[[[52,[[0,[17,20]]]]],[[52,[[0,[17,20]]]]]],[[[53,[[0,[17,20]]]]],[[53,[[0,[17,20]]]]]],[[[25,[[0,[17,20]]]]],[[25,[[0,[17,20]]]]]],[[[54,[[0,[17,20]]]]],[[54,[[0,[17,20]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,15],[[[37,[20]],24,4,40],[[8,[19,29]]]],[[],50],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[8,[[47,[20]]]]]],[[],[[8,[[37,[20]]]]]],[[55,56,57],[[8,[[47,[20]],32]]]],[[55,56,57],[[8,[[48,[20]],32]]]],[[55,56,57],[[8,[[37,[20]],32]]]],[[55,56,57],[[8,[[50,[49]],32]]]],[[55,56,57],[[8,[[51,[49]],32]]]],[[55,56,57],[[8,[[52,[20]],32]]]],[[55,56,57],[[8,[[53,[20]],32]]]],[[55,56,57],[[8,[[25,[20]],32]]]],[[55,56,57],[[8,[[54,[20]],32]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4,[[37,[20]]]],[[4,4],[[25,[20]]]],[[47,47],5],[[48,48],5],[[37,37],5],[[[50,[[0,[21,49]]]],50],5],[[[51,[[0,[21,49]]]],51],5],[[[52,[[0,[21,20]]]],52],5],[[[53,[[0,[21,20]]]],53],5],[[[25,[[0,[21,20]]]],25],5],[[[54,[[0,[21,20]]]],54],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[47,[[0,[22,20]]]],6],23],[[[47,[20]],6],23],[[[48,[[0,[22,20]]]],6],23],[[[37,[20]],6],23],[[[37,[[0,[22,20]]]],6],23],[[[50,[[0,[22,49]]]],6],23],[[[51,[[0,[22,49]]]],6],23],[[[52,[[0,[22,20]]]],6],23],[[[53,[[0,[22,20]]]],6],23],[[[25,[[0,[22,20]]]],6],23],[[[54,[[0,[22,20]]]],6],23],[[]],[[]],[[[47,[20]]],[[37,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[58,[[8,[[47,[20]]]]]],[58,[[8,[[37,[20]]]]]],[47],[48],[37],[[[50,[[0,[59,49]]]]]],[[[51,[[0,[59,49]]]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[[[37,[20]]],5],[[[37,[20]]],4],0,[[[47,[20]]],8],[[[37,[20]]],8],[[[47,[20]],60,56],[[8,[32]]]],[[[48,[20]],60,56],[[8,[32]]]],[[[37,[20]],60,56],[[8,[32]]]],[[[50,[49]],60,56],[[8,[32]]]],[[[51,[49]],60,56],[[8,[32]]]],[[[52,[20]],60,56],[[8,[32]]]],[[[53,[20]],60,56],[[8,[32]]]],[[[25,[20]],60,56],[[8,[32]]]],[[[54,[20]],60,56],[[8,[32]]]],[[[47,[20]],56],4],[[[48,[20]],56],4],[[[37,[20]],56],4],[[[50,[49]],56],4],[[[51,[49]],56],4],[[[52,[20]],56],4],[[[53,[20]],56],4],[[[25,[20]],56],4],[[[54,[20]],56],4],[[],36],[[],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],36],[[],8],[61,[[8,[[47,[20]]]]]],[61,[[8,[[47,[20]]]]]],[15,[[8,[47]]]],[[],8],[61,[[8,[[37,[20]]]]]],[61,[[8,[[37,[20]]]]]],[[],8],[[[15,[49]]],[[8,[[50,[49]]]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[62,[[8,[29]]]],[[],[[8,[29]]]],[[62,63],[[8,[29]]]],[63,[[8,[29]]]],[[],[[8,[29]]]],[[],[[8,[29]]]],[62,[[8,[29]]]],[64,[[8,[29]]]],[65,[[8,[29]]]],[[62,51],[[8,[29]]]],[51,[[8,[29]]]],[[62,50],[[8,[29]]]],[50,[[8,[29]]]],[[62,25],[[8,[29]]]],[25,[[8,[29]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[[],[[8,[29]]]],[62,[[8,[29]]]],[64,[[8,[29]]]],[65,[[8,[29]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[[[10,[9]]],[[10,[2,9]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[11,[[11,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[12,[[12,[2]]]],[[]],[[],62],[[],64],[[],65],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],[[]],[[]],[[]]],"p":[[3,"Private"],[8,"Any"],[4,"PlonkType"],[15,"usize"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"TypeId"],[3,"VerifyingKeyVar"],[3,"Vec"],[4,"CircuitError"],[8,"Clone"],[8,"PrimeField"],[3,"BatchProofVar"],[8,"Pairing"],[8,"PartialEq"],[8,"Debug"],[6,"Result"],[3,"PlonkCircuit"],[3,"VerifyingKey"],[3,"Point"],[6,"Variable"],[8,"Error"],[4,"PlonkError"],[4,"SnarkError"],[4,"PCSError"],[4,"SerializationError"],[4,"PrimitivesError"],[3,"Error"],[3,"Demand"],[3,"String"],[3,"BatchProof"],[3,"PlonkKzgSnark"],[15,"u8"],[4,"Option"],[6,"UniversalSrs"],[3,"Instance"],[6,"OpenKey"],[4,"MergeableCircuitType"],[8,"Iterator"],[8,"Send"],[3,"Proof"],[3,"PlookupProof"],[8,"Field"],[3,"ProofEvaluations"],[3,"PlookupEvaluations"],[3,"ProvingKey"],[3,"PlookupProvingKey"],[3,"PlookupVerifyingKey"],[8,"Read"],[4,"Compress"],[4,"Validate"],[15,"str"],[8,"Hash"],[8,"Write"],[3,"TaggedBase64"],[3,"RescueTranscript"],[3,"Commitment"],[3,"SolidityTranscript"],[3,"StandardTranscript"],[8,"BatchableCircuit"],[3,"RescueTranscriptVar"],[8,"UniversalSNARK"],[3,"BatchArgument"],[8,"PlonkTranscript"]]},\
"jf_primitives":{"doc":"Crate implements various cryptography primitives, as well …","t":"AAAAAAAAAOOOOAAAAAADDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAIKIDDLLLLLLLLKKLLLLLLKMLLLLLLLLLLLLLLMLLLLLLLLIQQDDDIQDILLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLKLKLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLIKQQIGGDDIQLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKKKKKKKKLLLLLLLLLLAMIDDLLLLLLLLLLKLLLLKKLLLLLLLLLLLLLLLLLLLLMLLLLLLLLKKLLIDQQQLLLLLLLKLLLLLLLLLLLLLLLLLLKLLRRRRRRRRIDQQDLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQKKADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLNNNNNENNLLLLLLLLLLLLLLLLLLLLLLLLLILLSIQQQIIQIIIQEQIIIQQNNNIILALLLLKLLKLLKKKLLLALLLLLKLKKKLKKLLLLLAKAKKKAKKKLKLLLKKAKKLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCCCCCCCDGGGCCCLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQQQIQQQQIQQKKKKAKKKKKAKKKNNNNENNLLLLLLLLLLLLLLLLLLLLLDDDDDDDCCCGDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLFMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQIDQLLLLLLLLLLKLLLLLLLLLLLLLLSSRSSSSDDRDIDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLICSQQCQIQQKKAAKKKAKKDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQQQIAALKKKKKEDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["aead","circuit","commitment","constants","crhf","elgamal","erasure_code","errors","hash_to_group","impl_forgetable_merkle_tree_scheme","impl_merkle_tree_scheme","impl_to_traversal_path_biguint","impl_to_traversal_path_primitives","merkle_tree","pcs","prf","rescue","signatures","vrf","Ciphertext","EncKey","KeyPair","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","check","clone","clone","clone","clone_into","clone_into","clone_into","decrypt","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","enc_key","enc_key_ref","encrypt","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","generate","hash","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","commitment","elgamal","merkle_tree","prf","rescue","signature","CommitmentGadget","commit","ElGamalEncryptionGadget","ElGamalHybridCtxtVars","EncKeyVars","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","create_ciphertext_variable","create_enc_key_variable","deref","deref","deref_mut","deref_mut","drop","drop","elgamal_encrypt","ephemeral","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","symm_ctxts","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DigestAlgorithmGadget","DigestGadget","MembershipProofVar","Merkle3AryMembershipProofVar","Merkle3AryNodeVar","Merkle3AryNonMembershipProofVar","MerkleTreeGadget","NonMembershipProofVar","RescueDigestGadget","UniversalMerkleTreeGadget","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","create_membership_proof_variable","create_non_membership_proof_variable","create_root_variable","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","digest","digest","digest_leaf","digest_leaf","drop","drop","drop","drop","enforce_membership_proof","enforce_non_membership_proof","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_member","is_non_member","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","PRFGadget","eval_prf","Native","NonNative","RescueGadget","RescueNativeGadget","RescueNonNativeGadget","RescueNonNativeStateVar","RescueStateVar","SpongeStateVar","Var","__clone_box","__clone_box","array","array_mut","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_rescue_state_variable","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","key_schedule","prp","prp_with_round_keys","rescue_full_state_keyed_sponge_no_padding","rescue_full_state_keyed_sponge_with_zero_padding","rescue_permutation","rescue_sponge_no_padding","rescue_sponge_with_padding","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","schnorr","R","SignatureGadget","SignatureVar","VerKeyVar","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","check_signature_validity","clone","clone","clone_into","clone_into","create_signature_variable","create_signature_vk_variable","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","s","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_sig_core","verify_signature","vzip","vzip","CommitmentScheme","FixedLengthRescueCommitment","Input","Output","Randomness","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","commit","commit","default","deref","deref_mut","drop","eq","equivalent","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","verify","verify","vzip","BLS_SIG_COMPRESSED_PK_SIZE","BLS_SIG_COMPRESSED_SIGNATURE_SIZE","BLS_SIG_PK_SIZE","BLS_SIG_SIGNATURE_SIZE","BLS_SIG_SK_SIZE","CS_ID_BLS_BN254","CS_ID_BLS_MIN_SIG","CS_ID_SCHNORR","CRHF","FixedLengthRescueCRHF","Input","Output","VariableLengthRescueCRHF","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","evaluate","evaluate","evaluate","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Ciphertext","EncKey","KeyPair","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","check","clone","clone","clone","clone_into","clone_into","clone_into","decrypt","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deterministic_encrypt","drop","drop","drop","enc_key","enc_key_ref","encrypt","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_scalars","generate","hash","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","rand","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_scalars","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","zeroize","ErasureCode","Share","decode","encode","reed_solomon_erasure","ReedSolomonErasureCode","ReedSolomonErasureCodeShare","__clone_box","as_any","as_any","as_any_mut","as_any_mut","batch_check","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","decode","deref","deref","deref_mut","deref_mut","deserialize_with_mode","drop","drop","encode","eq","equivalent","fmt","from","from","hash","index","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","serialize_with_mode","serialized_size","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","DeserializationError","FailedDecryption","InconsistentStructureError","InternalError","ParameterError","PrimitivesError","RescueError","VerificationError","as_any","as_any_mut","as_error_source","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","init","into","into_any","into_any_arc","into_any_rc","provide","to_string","try_from","try_into","type_id","vzip","TEHashToGroup","hash_to_group","hash_to_group","ARITY","AppendableMerkleTreeScheme","BatchMembershipProof","BatchNonMembershipProof","Commitment","DigestAlgorithm","Element","Element","ForgetableMerkleTreeScheme","ForgetableUniversalMerkleTreeScheme","Index","Index","LookupResult","MembershipProof","MerkleCommitment","MerkleTreeScheme","NodeValue","NodeValue","NonMembershipProof","NotFound","NotInMemory","Ok","ToTraversalPath","UniversalMerkleTreeScheme","__clone_box","append_only","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","digest","digest","digest_leaf","drop","eq","equivalent","examples","expect_not_found","expect_not_in_memory","expect_ok","extend","fmt","forget","from","from_commitment","from_elems","from_kv_set","hash","height","height","init","into","into_any","into_any_arc","into_any_rc","light_weight","lookup","macros","non_membership_remember","non_membership_verify","num_leaves","prelude","push","remember","size","to_owned","to_traversal_path","try_from","try_into","type_id","universal_forget","universal_lookup","universal_merkle_tree","update","verify","vzip","MerkleTree","__clone_box","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","deserialize","drop","eq","equivalent","extend","fmt","forget","from","from_commitment","from_elems","hash","height","init","into","into_any","into_any_arc","into_any_rc","lookup","num_leaves","push","remember","serialize","to_owned","try_from","try_into","type_id","verify","vzip","Interval","IntervalMerkleTree","SHA3MerkleTree","Sha3Digest","Sha3Node","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","cmp","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","digest","digest_leaf","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","from","from","from","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","partial_cmp","serialize_with_mode","serialized_size","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LightWeightMerkleTree","__clone_box","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","deserialize","drop","eq","equivalent","extend","fmt","forget","from","from_commitment","from_elems","hash","height","init","into","into_any","into_any_arc","into_any_rc","lookup","num_leaves","push","remember","serialize","to_owned","try_from","try_into","type_id","verify","vzip","AppendableMerkleTreeScheme","DigestAlgorithm","Element","ForgetableMerkleTreeScheme","ForgetableUniversalMerkleTreeScheme","Index","LookupResult","MerkleCommitment","MerkleTree","MerkleTreeScheme","NodeValue","RescueHash","RescueLightWeightMerkleTree","RescueMerkleTree","RescueSparseMerkleTree","ToTraversalPath","UniversalMerkleTree","UniversalMerkleTreeScheme","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","digest","digest","digest","digest","digest_leaf","digest_leaf","digest_leaf","digest_leaf","drop","eq","equivalent","fmt","from","impl_to_traversal_path_biguint","impl_to_traversal_path_primitives","init","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","vzip","UniversalMerkleTree","__clone_box","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","forget","from","from_commitment","from_elems","from_kv_set","hash","height","init","into","into_any","into_any_arc","into_any_rc","lookup","non_membership_remember","non_membership_verify","num_leaves","remember","serialize","to_owned","try_from","try_into","type_id","universal_forget","universal_lookup","update","verify","vzip","BatchCommitment","BatchProof","Commitment","Evaluation","Point","Polynomial","PolynomialCommitmentScheme","Proof","ProverParam","ProverParam","SRS","StructuredReferenceString","VerifierParam","VerifierParam","batch_commit","batch_open","batch_verify","commit","errors","extract_prover_param","extract_verifier_param","gen_srs_for_testing","gen_srs_for_testing","open","prelude","trim","trim","verify","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","PCSError","SerializationError","TranscriptError","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","Commitment","MultilinearKzgBatchProof","MultilinearKzgPCS","MultilinearKzgProof","MultilinearProverParam","MultilinearUniversalParams","MultilinearVerifierParam","PCSError","PolynomialCommitmentScheme","StructuredReferenceString","UnivariateKzgBatchProof","UnivariateKzgPCS","UnivariateKzgProof","UnivariateProverParam","UnivariateUniversalParams","UnivariateVerifierParam","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_commit","batch_commit","batch_open","batch_open","batch_verify","batch_verify","beta_h","beta_h","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","compute_qx_degree","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extract_prover_param","extract_prover_param","extract_verifier_param","extract_verifier_param","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","gen_srs_for_testing","gen_srs_for_testing","gen_srs_for_testing","gen_srs_for_testing","get_batched_nv","h","h","h","h","h_mask","h_mask","hash","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","max_degree","merge_polynomials","num_vars","num_vars","open","open","powers_of_g","powers_of_g","powers_of_g","proof","proof","proofs","prover_param","q_x_commit","q_x_opens","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trim","trim","trim","trim","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Input","Output","PRF","RescuePRF","Seed","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","evaluate","evaluate","evaluate_with_rand_seed","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","vzip","A","A_INV","CRHF_RATE","INIT_VEC_LE","KEY_INJECTION_LE","MDS_LE","PERMUTATION_ROUND_KEYS","PRP","Permutation","ROUNDS","RescueMatrix","RescueParameter","RescueVector","STATE_SIZE","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","elems","eq","equivalent","errors","eval","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init_vec_ref","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","key_injection_vec_ref","key_schedule","len","linear","mds_matrix_ref","mds_matrix_ref","non_linear","prp","prp_with_round_keys","round_keys_ref","sponge","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vec","vzip","vzip","vzip","vzip","zero","ParameterError","RescueError","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","AggregateableSignatureSchemes","BLSSignatureScheme","CS_ID","MessageUnit","PublicParameter","SchnorrSignatureScheme","Signature","SignatureScheme","SigningKey","VerificationKey","aggregate","aggregate_verify","bls_over_bls12381","bls_over_bn254","key_gen","multi_sig_verify","param_gen","schnorr","sign","verify","BLSSignKey","BLSSignature","BLSSignatureScheme","BLSVerKey","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","from_str","from_str","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","key_gen","key_gen_v5","param_gen","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","sign","tag","tag","tag","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uncompressed_size","verify","vzip","vzip","vzip","vzip","zeroize","BLSOverBN254CurveSignatureScheme","KeyPair","SignKey","Signature","VerKey","__clone_box","__clone_box","__clone_box","__clone_box","aggregate","aggregate_verify","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","from_str","from_str","generate","generate_with_sign_key","hash","hash","hash","hash_to_curve","init","init","init","init","init","internal","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","key_gen","multi_sig_verify","param_gen","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","sigma","sign","sign","sign_key_internal","tag","tag","tag","to_affine","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ver_key","ver_key_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","zeroize","KeyPair","SchnorrSignatureScheme","SignKey","Signature","VerKey","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","generate","generate_with_sign_key","hash","hash","hash","init","init","init","init","init","internal","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","key_gen","param_gen","randomize_with","randomize_with","serialize","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","sign","sign","sign_key_internal","tag","tag","tag","tag","to_affine","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ver_key","ver_key_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","zeroize","Input","Output","Proof","PublicKey","PublicParameter","SecretKey","Vrf","blsvrf","ecvrf","evaluate","key_gen","param_gen","proof_to_hash","prove","verify","BLSVRFCipherSuite","BLSVRFScheme","VRF_BLS_12_381_SHA256","VRF_BLS_12_381_SHA512","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","key_gen","new","param_gen","proof_to_hash","prove","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip"],"q":["jf_primitives","","","","","","","","","","","","","","","","","","","jf_primitives::aead","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::circuit","","","","","","jf_primitives::circuit::commitment","","jf_primitives::circuit::elgamal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::circuit::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::circuit::prf","","jf_primitives::circuit::rescue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::circuit::signature","jf_primitives::circuit::signature::schnorr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::constants","","","","","","","","jf_primitives::crhf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::elgamal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::erasure_code","","","","","jf_primitives::erasure_code::reed_solomon_erasure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::hash_to_group","","","jf_primitives::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::merkle_tree::append_only","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::merkle_tree::examples","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::merkle_tree::light_weight","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::merkle_tree::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::merkle_tree::universal_merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::pcs","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::pcs::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::pcs::preludejf_primitives::prf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::rescue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::rescue::errors","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::signatures","","","","","","","","","","","","","","","","","","","","jf_primitives::signatures::bls_over_bls12381","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::signatures::bls_over_bnjf_primitives::signatures::schnorrjf_primitives::vrf","","","","","","","","","","","","","","","jf_primitives::vrf::blsvrf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wraps crypto_box’s AEAD encryption scheme.","Circuit implementation of various crypto primitives.","Implements a rescue hash based commitment scheme.","Constants for curve specific parameters.","Collision-resistant Hash Functions (CRHF) definitions and …","Implements the ElGamal encryption scheme.","Module for erasure code","Error types.","Module for hash to various elliptic curve groups","Macro for generating a forgetable merkle tree …","Macro for generating a standard merkle tree implementation","Macros for implementing ToTreversalPath for BigUint types","Macros for implementing ToTreversalPath for primitive types","Merkle Tree traits and implementations","Polynomial Commitment Scheme","This module implements a pseudo random function that is …","This module implements Rescue hash function over the …","Module for signature primitives.","Module for verifiable random functions.","The ciphertext produced by AEAD encryption","Public/encryption key for AEAD","Keypair for Authenticated Encryption with Associated Data","","","","","","","","","","","","","","","","","","","","","","","","","","Decrypt a ciphertext with authenticated associated data …","","","","","","","","","Currently no checking is done on the public key. This is …","","","","","","Getter for the public/encryption key","Getter for reference to the public/encryption key","Encrypt a message with authenticated associated data which …","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Randomly sample a key pair.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Serializes the public key. Only compressed form is …","","Serialize the ciphertext. <code>Compress</code> mode is ignored.","","","","","","","","","","","","","","","","","","","Circuit implementation of the commitment scheme.","Circuit implementation of the ElGamal scheme.","Trait definitions for a Merkle tree gadget.","Circuit implementation of a PRF.","Rescue hash related gates and gadgets. Including both …","Circuit implementation of a signature schemes. Currently …","Circuit implementation of the commitment scheme.","Commitment function.","Circuit implementation of the ElGamal scheme.","Variables holding a ciphertext.","Variables holding an encryption key.","","","","","","","","","Helper function to create a ciphertext variable","Helper function to create encryption key variables struct","","","","","","","Compute the gadget that check a correct Elgamal encryption","r*G component","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Ciphertext under hybrid encryption.","","","","","","","","","Circuit counterpart to DigestAlgorithm","Gadget for the digest algorithm.","Type to represent the merkle proof of the concrete MT …","Circuit variable for a Merkle proof of a 3-ary Merkle tree.","Circuit variable for a node in the Merkle path.","Circuit variable for a Merkle non-membership proof of a …","Gadget for a Merkle tree","Type to represent the merkle non-membership proof of the …","Digest gadget using for the Rescue hash function.","Gadget for the universal Merkle tree","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate a variable for the membership proof.","Allocate a variable for the membership proof.","Allocate a variable for the merkle root.","","","","","","","","","Digest a list of variables","","Digest an indexed element","","","","","","Enforce correct <code>proof_var</code> for the <code>elem_idx_var</code> against …","Enforce correct <code>proof_var</code> for the empty elem …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Given variables representing:","checking non-membership proof","","","","","","","","","","","","","","","","","","","","Circuit implementation of a PRF.","PRF many to one","The native field.","Non-native field.","Trait for rescue circuit over native field.","Type wrapper for the RescueGadget over the native field.","Type wrapper for the RescueGadget over the non-native …","Array of variables representing a Rescue state (4 field …","Array of variables representing a Rescue state (4 field …","Variable to represent the state of the sponge.","How variable is represented in this …","","","Expose the state array.","Expose the mutable state array.","","","","","","","","","","","","","Create a variable representing a rescue state","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Return the round keys variables for the Rescue block cipher","Rescue based Pseudo Random Permutation (PRP)","Return the variable corresponding to the output of the of …","Full-State-Keyed-Sponge with a single output","Similar to <code>Self::rescue_full_state_keyed_sponge_no_padding</code> …","Given an input state st_0 and an output state st_1, ensure …","Sponge-based hashes from Rescue permutations","Sponge-based hashes from Rescue permutations","","","","","","","","","","","Circuit implementation of a Schnorr signature scheme.","R component.","Plonk circuit gadget for EdDSA signatures.","Signature variable","Signature verification key variable","","","","","","","","","","","Obtain the result bit of a signature verification.","","","","","Create a signature variable from a signature <code>sig</code>.","Create a signature verification key variable from a key <code>vk</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","s component.","","","","","","","","","Compute the two point variables to be compared in the …","Signature verification circuit","","","A trait for cryptographic commitment scheme","Rescue-based Commitment instance for fixed-length input","Input to the commitment","The type of output commitment value","The type of the hiding/blinding factor","","","","","","","","Commit algorithm that takes <code>input</code> and blinding randomness <code>r</code>","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Verify algorithm that output <code>Ok</code> if accepted, or <code>Err</code> if …","","","Size in bytes of a compressed verification key in our BLS …","Size in bytes of a compressed signature in our BLS …","Size in bytes of a verification key in our BLS signature …","Size in bytes of a signature in our BLS signature scheme.","Size in bytes of a secret key in our BLS signature scheme.","ciphersuite identifier for BLS signature over BN254 Note …","ciphersuite identifier for BLS signature over BLS12_381, …","ciphersuite identifier for schnorr signature","A trait for CRHF (based on ark-primitives’ definition, …","A rescue-sponge-based CRHF with fixed-input size (if not …","Input to the CRHF","Output of the CRHF","A rescue-sponge-based CRHF with variable-input and …","","","","","","","","","","","","","","","","","","","","","evaluate inputs and return hash output","Padding","Padding","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Public encryption cipher text","Encryption key for encryption scheme","KeyPair structure for encryption scheme","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decryption function","","","","","","","","","","","Public key encryption function with pre-sampled randomness","","","","Get encryption key","Get encryption key reference","Public key encryption function","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reconstruct the ciphertext from a list of scalars.","Key generation algorithm for public key encryption scheme","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Flatten out the ciphertext into a vector of scalars","","","","","","","","","","","","","","Erasure code trait <code>T</code> is the input data type","Type for each data shares (usually depends on <code>T</code>) Why so …","Decode <code>shares</code> into <code>data_size</code> data elements. Return …","Encode <code>data</code> into <code>data.len() + parity_size</code> shares.","Module for Reed Solomon Erasure Code","Very naive implementation of Reed Solomon erasure code. …","Shares for Reed Solomon erasure code","","","","","","","","","","","","","","Decode into <code>data_size</code> data elements via polynomial …","","","","","","","","Encode into <code>data.len() + parity_size</code> shares via polynomial …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Index of this share","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Value of this share","","","Deserialization failed: {0}","Decryption failed: {0}","Inconsistent Structure error, {0}","‼ ️Internal error! Please report to Crypto Team …","Bad parameter in function call, {0}","A <code>enum</code> specifying the possible failure modes of the …","Rescue Error: {0}","Unsuccessful verification for proof or signature, {0}","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Trait definition and default implementation for hash to …","Hash to Group point, using sha2-512 function hashing to G1 …","Hash to Group point, using sha2-512 function hashing to G1 …","Tree arity","Merkle tree that allows insertion at back. Abstracted as a …","Batch proof","Batch non membership proof","Merkle tree commitment","Merkle tree hash function","An element of a Merkle tree.","Merkle tree element type","Merkle tree that allows forget/remember elements from the …","Universal Merkle tree that allows forget/remember elements …","An index type of a leaf in a Merkle tree.","Index type for this merkle tree","The result of querying at an index in the tree Typically, …","Merkle proof","Trait for a succint merkle tree commitment","Basic functionalities for a merkle tree implementation. …","An internal node value type in a Merkle tree.","Internal and root node value","Non membership proof for a given index","The index is outside the occupied range in the tree, and a …","The index is valid but we do not have the leaf in memory","The value at the given index, and a proof of validity","An trait for Merkle tree index type.","A universal merkle tree is abstracted as a random-access …","","Implementation of a typical append only merkle tree","","","","","Return the maximum allowed number leaves","","","Return a merkle commitment","","","Digest a list of values","Return a digest of the tree","Digest an indexed element","","","","Provides sample instantiations of merkle tree. E.g. Sparse …","Assert the lookup result is NotFound. Return a …","Assert the lookup result is NotInMemory.","Assert the lookup result is Ok. Return a tuple of element …","Insert a list of new values at the leftmost available slots","","Trim the leaf at position <code>i</code> from memory, if present. …","Returns the argument unchanged.","Rebuild a merkle tree from a commitment. Return a tree …","Construct a new merkle tree with given height from a data …","Build a universal merkle tree from a key-value set.","","Return the height of the tree","Return the height of this merkle tree","","Calls <code>U::from(self)</code>.","","","","A light weight merkle tree is an append only merkle tree …","Returns the leaf value given a position","Useful macros","“Re-insert” an empty leaf into the tree using its …","Verify an index is not in this merkle tree","Return the current number of leaves","Prelude","Insert a new value at the leftmost available slot","“Re-insert” a leaf into the tree using its proof. …","Return the number of elements included in the …","","Convert the given index to a vector of branch indices …","","","","Trim the leaf at position <code>pos</code> from memory.","Returns the leaf value given a position","Implementation of a typical Sparse Merkle Tree.","Update the leaf value at a given position","Verify an element is a leaf of a Merkle tree given the …","","A standard append only Merkle tree implementation","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Element type for interval merkle tree","Interval merkle tree instantiation for interval merkle …","Merkle tree using SHA3 hash","Wrapper for SHA3_512 hash function","Update the array length here","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","A standard append only Merkle tree implementation","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for rescue hash function","A standard light merkle tree using RATE-3 rescue hash …","A standard merkle tree using RATE-3 rescue hash function","Example instantiation of a SparseMerkleTree indexed by I","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Macros for implementing ToTreversalPath for BigUint types","Macros for implementing ToTreversalPath for primitive types","","Calls <code>U::from(self)</code>.","","","","","","","","","A standard append only Merkle tree implementation","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Batch commitments","Batch proofs","Commitments","Polynomial Evaluation","Polynomial input domain","Polynomial and its associated types","This trait defines APIs for polynomial commitment schemes. …","Proofs","Prover parameters","Prover parameters","Structured reference string","API definitions for structured reference string","Verifier parameters","Verifier parameters","Batch commit a list of polynomials","Input a list of polynomials, and a same number of points, …","Verifies that <code>value_i</code> is the evaluation at <code>x_i</code> of the …","Generate a commitment for a polynomial","Error module.","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Build SRS for testing.","Build SRS for testing.","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","Prelude","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","A <code>enum</code> specifying the possible failure modes of the PCS.","An error during (de)serialization: {0}","Transcript error {0}","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","A commitment is an Affine point.","proof of batch opening","KZG Polynomial Commitment Scheme on multilinear …","proof of opening","Prover Config","Universal Parameter","Verifier Config","","","","batch proof","KZG Polynomial Commitment Scheme on univariate polynomial.","proof of opening","<code>UnivariateProverParam</code> is used to generate a proof","<code>UniversalParams</code> are the universal parameters for the KZG10 …","<code>UnivariateVerifierParam</code> is used to check evaluation proofs …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Batch commit a list of polynomials.","Generate a commitment for a list of polynomials","Input","Input a list of polynomials, and a same number of points, …","Verifies that <code>value</code> is the evaluation at <code>x_i</code> of the …","Verifies that <code>value_i</code> is the evaluation at <code>x_i</code> of the …","\\\\beta times the above generator of G2.","\\\\beta times the above generator of G2.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a commitment for a polynomial.","Generate a commitment for a polynomial Note that the …","For an MLE w with <code>mle_num_vars</code> variables, and <code>point_len</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the prover parameters from the public parameters.","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Extract the verifier parameters from the public parameters.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generator for G1","generator of G1","The generator of G1.","Build SRS for testing.","Build SRS for testing.","Build SRS for testing. WARNING: THIS FUNCTION IS FOR …","Build SRS for testing. WARNING: THIS FUNCTION IS FOR …","Return the number of variables that one need for an MLE to …","generator for G2","generator of G2","The generator of G2.","The generator of G2.","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the maximum supported degree","merge a set of polynomials. Returns an error if the …","number of variables","number of variables","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","<code>pp_{0}</code>, <code>pp_{1}</code>, …,pp_{nu_vars} defined by XZZPD19 where …","Group elements of the form <code>{ \\\\beta^i G }</code>, where <code>i</code> ranges …","Config","The actual proof","Evaluation of quotients","Evaluation of quotients","prover parameters","Commitment to q(x):= w(l(x)) where","openings of q(x) at 1, omega, …, and r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","","","","","","","","","","","","","Input to the PRF","Output of the PRF","Trait for Pseudo-random Functions","A rescue-based PRF that leverages on Full State Keyed …","The random seed/key that index a specific function from …","","","","","","","","","","","Compute PRF output with a user-provided randomly generated …","","same as <code>Self::evaluate</code> except that we generate a fresh …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","parameter A, a.k.a., alpha","parameter A^-1","The rate of the sponge used in RescueCRHF.","Initial vector.","Injected keys for each round.","MDS matrix","Permutation keys.","Rescue pseudo-random permutation (PRP) instance","Instance of a unkeyed cryptographic permutation to be used …","The # of rounds of rescue hash.","A matrix that consists of <code>STATE_SIZE</code> number of rescue …","This trait defines constants that are used for rescue hash …","Data type for rescue prp inputs, keys and internal data","The state size of rescue hash.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return vector of the field elements WARNING: may expose …","","","Error types.","Compute the permutation on RescueVector <code>input</code>","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Return a pointer to the initial vectors. Does not expose …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Check if the matrix is empty.","Return a pointer to the key injection vectors. Function …","Key scheduling for rescue based PRP for Bls12_381 scalars …","Return the number of columns of the matrix.","Perform a linear transform of the vector. Function needs …","Return a pointer to the mds matrix. Does not expose secret …","Return a pointer to the mds matrix. Does not expose secret …","Helper function to compute f(M,x,c) = Mx^a + c. Function …","Rescue pseudorandom permutation for Bls12381 scalars …","Rescue pseudorandom permutation for Bls12381 scalars …","Return a pointer to the round key. Does not expose secret …","This file contains the APIs wrappers for ark-sponge","","","","","","","","","","","","","","","","","Accessing the i-th vector of the matrix. Function needs to …","","","","","zero vector","Bad parameter in function call, {0}","Various error modes.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Trait for aggregatable signatures. TODO: generic over hash …","","Ciphersuite Identifier","A message is &amp;[MessageUnit]","Public Parameter","","Signature","Trait definition for a signature scheme.","Signing key.","Verification key","Aggregate multiple signatures into a single signature The …","Verify an aggregate signature w.r.t. a list of messages …","BLS Signature Scheme","This module implements the BLS signature over the BN254 …","Sample a pair of keys.","Verify a multisignature w.r.t. a single message and a list …","generate public parameters from RNG. If the RNG is not …","This module implements the Schnorr signature over the …","Sign a message with the signing key","Verify a signature.","A BLS Secret Key (Signing Key).","A BLS Signature.","BLS signature scheme. Wrapping around structs from the <code>blst</code>…","A BLS Public Key (Verification Key).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Generate a BLS key pair. Make sure the <code>prng</code> passed in are …","Alternative deterministic key_gen compatible with IRTF …","generate public parameters from RNG. If the RNG is not …","","","","Secret key can only be serialized in compressed mode.","","","","","","Sign a message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature.","","","","","","BLS signature scheme.","Signature secret key pair used to sign messages","Signing key for BLS signature.","The signature of BLS signature scheme","Signature public verification key","","","","","Aggregate multiple signatures into a single signature …","Verify an aggregate signature w.r.t. a list of messages …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Key-pair generation algorithm","Key pair generation using a particular sign key secret <code>sk</code>","","","","Non constant time hash to curve algorithm (a.k.a “…","","","","","","Get the internal of verifying key, namely a curve Point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Sample a pair of keys.","Verify a multisignature w.r.t. a single message and a list …","Generate public parameters from RNG.","","","","","","","","","","","","The signature is a G1 group element.","Sign a message with the signing key","Signature function","Get the internal of the signing key, namely a …","","","","Convert the verification key into the affine form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the verification key","Get reference to verification key","Verify a signature.","Signature verification function","","","","","","","","","Signature secret key pair used to sign messages","Schnorr signature scheme.","Signing key for Schnorr signature.","The signature of Schnorr signature scheme","Signature public verification key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Key-pair generation algorithm","Key pair generation using a particular sign key secret <code>sk</code>","","","","","","","","","Get the internal of verifying key, namely a curve Point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Sample a pair of keys.","generate public parameters from RNG.","Return a randomized verification key.","Randomize the key pair with the <code>randomizer</code>, return the …","","","","","","","","","","","","","Sign a message with the signing key","Signature function","Get the internal of the signing key, namely a …","","","","","Convert the verification key into the affine form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the verification key","Get reference to verification key","Verify a signature.","Signature verification function","","","","","","","The input of VRF proof.","The output of VRF evaluation.","VRF signature.","VRF public key.","Public parameters","VRF secret key.","A trait for VRF proof, evaluation and verification.","BLS signature based VRF","Place holder for ECVRF","Computes the VRF output given a public input and a VRF …","Creates a pair of VRF public and private keys.","generate public parameters from RNG. If the RNG is not …","Computes the VRF output associated with a VRF proof.","Creates the VRF proof associated with a VRF secret key.","Verifies a VRF proof.","Supported Cipher Suites for BLS VRF.","BLS VRF scheme. Optimized for signature size, i.e.: PK in …","using blst library and VRF output from SHA256 hashing","using blst library and VRF output from SHA512 hashing","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a pair of VRF public and private keys.","Creates a new BLS VRF instance with the given ciphersuite.","generate public parameters from RNG.","Computes the VRF output associated with a VRF proof.","Creates the VRF proof associated with a VRF secret key.","","","","","","","Verifies a VRF proof.","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,9,7,8,9,7,8,9,8,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,8,7,8,7,8,9,7,8,9,7,8,9,7,8,9,8,8,7,7,8,9,7,9,7,8,9,7,7,8,9,8,7,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,0,0,0,0,0,0,0,117,0,0,0,33,31,33,31,33,31,33,31,118,118,33,31,33,31,33,31,118,31,33,31,33,31,33,31,33,31,33,31,33,31,33,31,31,33,31,33,31,33,31,33,31,0,119,119,0,0,0,0,120,0,0,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,34,35,36,34,35,36,119,120,119,121,34,35,36,121,34,35,36,122,121,122,121,121,34,35,36,119,120,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,119,120,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,121,34,35,36,0,123,124,124,0,0,0,0,0,0,124,39,42,39,39,39,42,39,42,39,42,39,42,39,42,39,42,125,39,42,39,42,39,42,39,42,39,39,42,39,42,39,42,39,42,39,42,39,42,125,125,125,125,125,125,125,125,39,42,39,42,39,42,39,42,39,42,0,48,0,0,0,47,48,47,48,47,48,47,48,47,48,126,47,48,47,48,126,126,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47,48,48,47,48,47,48,47,48,47,48,126,126,47,48,0,0,127,127,127,52,52,52,52,52,52,52,127,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,127,52,52,0,0,0,0,0,0,0,0,0,0,128,128,0,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,128,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,57,58,0,0,0,32,59,30,32,59,30,32,59,30,32,59,30,32,59,30,32,59,30,32,59,30,32,59,30,32,59,30,59,32,32,59,30,32,59,30,32,59,30,32,32,59,30,59,59,32,32,59,30,32,30,32,59,30,32,59,30,30,59,32,30,32,59,30,32,59,30,32,59,30,32,59,30,32,59,30,32,32,59,30,32,59,30,32,59,30,30,32,59,30,32,59,30,32,59,30,32,59,30,32,0,129,129,129,0,0,0,62,130,62,130,62,62,130,62,130,62,62,62,62,130,130,62,130,62,62,130,62,130,62,62,62,130,62,62,62,130,62,130,62,130,62,130,62,130,62,62,62,62,130,62,130,62,130,62,62,130,62,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,131,131,132,0,132,133,132,0,0,132,0,0,0,132,0,132,0,0,0,132,133,71,71,71,0,0,71,0,71,71,71,71,132,71,71,132,71,71,134,135,134,71,71,71,0,71,71,71,136,71,137,71,137,132,133,71,135,132,71,71,71,71,71,0,132,0,138,133,132,0,136,137,135,71,139,71,71,71,138,133,0,133,132,71,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,0,77,76,140,77,76,140,77,76,76,140,77,76,140,77,76,76,77,76,77,76,76,76,140,77,76,140,77,76,76,140,140,140,77,76,77,76,77,76,76,140,77,76,76,140,77,76,140,77,76,140,77,76,140,77,76,140,77,76,76,76,76,77,76,140,77,76,140,77,76,140,77,76,140,77,76,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,141,141,141,141,141,141,0,141,141,142,141,0,141,142,141,141,141,141,0,142,142,141,142,141,0,141,142,141,82,82,82,82,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,84,85,86,87,88,89,90,92,93,94,143,144,143,144,143,144,90,93,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,84,85,86,87,88,89,90,92,93,94,84,85,86,87,88,89,90,92,93,94,84,85,86,87,88,89,90,92,93,94,143,144,0,89,90,92,93,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,87,88,89,90,92,93,94,87,88,89,90,92,93,94,84,90,84,90,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,85,86,93,143,144,84,90,0,85,86,90,93,84,86,89,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,90,0,85,86,143,144,85,90,92,88,94,87,84,88,88,84,85,86,87,88,89,90,92,93,94,84,85,86,87,88,89,90,92,93,94,84,85,86,87,88,89,90,92,93,94,143,144,84,90,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,143,144,84,85,86,87,88,89,90,92,93,94,143,144,143,144,84,85,86,87,88,89,90,92,93,94,145,145,0,0,145,96,96,96,96,96,96,96,96,96,96,145,96,145,96,96,96,96,96,96,96,96,96,96,96,96,51,51,0,51,51,51,51,0,0,0,0,0,0,0,43,45,46,97,43,45,46,97,43,45,46,97,43,45,46,97,43,45,46,97,43,45,46,97,43,45,46,97,43,46,97,43,45,46,97,43,45,46,97,43,45,46,97,43,43,43,0,97,43,45,46,97,43,43,43,45,45,46,97,97,43,45,46,97,46,43,45,46,97,43,45,46,97,43,45,46,97,43,45,46,97,45,46,46,45,43,46,97,43,46,46,97,0,43,45,46,97,43,45,46,97,43,45,46,97,43,45,46,97,45,43,45,46,97,43,65,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,146,146,146,0,146,0,146,146,147,147,0,0,146,147,146,0,146,146,0,0,0,0,99,100,101,148,99,100,101,148,99,100,101,148,99,100,101,148,99,100,101,99,100,101,99,100,101,99,100,101,100,148,99,99,100,100,101,101,148,99,100,101,99,100,101,99,100,101,148,99,100,101,99,100,101,99,100,101,99,99,100,100,101,101,148,99,100,101,99,100,101,148,99,100,101,148,99,100,101,148,99,100,101,148,99,100,101,148,99,100,101,148,148,148,99,100,101,99,100,101,99,100,101,148,99,100,101,99,100,101,99,100,101,148,99,99,99,100,100,100,101,101,101,148,99,100,101,148,99,100,101,100,148,148,99,100,101,99,0,0,0,0,0,104,105,106,107,149,149,149,104,105,106,107,149,104,105,106,107,104,105,106,107,149,104,105,106,107,149,104,105,106,107,104,105,106,107,104,105,106,107,104,105,106,107,104,149,104,105,106,107,149,104,105,106,107,104,105,107,104,105,106,107,149,104,105,106,107,104,105,107,104,105,107,104,104,105,105,107,107,149,104,105,105,106,107,104,105,107,106,106,104,105,107,0,149,104,105,106,107,105,149,104,105,106,107,149,104,105,106,107,149,104,105,106,107,149,104,105,106,107,149,149,149,104,105,107,104,105,106,107,104,105,106,107,107,149,106,106,104,105,107,105,104,105,106,107,104,105,107,149,104,104,104,105,105,105,106,107,107,107,149,104,105,106,107,149,104,105,106,107,106,106,149,105,149,104,105,106,107,104,105,106,0,0,0,0,0,112,50,113,49,150,112,50,113,49,150,112,50,113,49,112,50,113,49,150,112,50,113,49,150,112,50,113,49,112,50,113,49,112,50,113,49,112,50,113,49,112,50,113,49,150,112,50,113,49,150,112,50,113,49,112,50,113,49,112,50,113,49,150,112,112,50,113,49,112,50,113,49,112,50,49,112,112,50,50,113,113,49,49,150,112,50,50,50,113,49,112,50,113,49,113,113,112,50,49,150,112,50,113,49,50,150,112,50,113,49,150,112,50,113,49,150,112,50,113,49,150,112,50,113,49,150,150,50,113,112,50,113,49,112,50,113,49,112,50,113,49,150,113,113,112,50,113,49,50,112,50,113,49,112,50,113,49,150,112,112,112,50,50,50,113,113,113,49,49,49,150,112,50,113,49,150,112,50,113,49,113,113,150,50,150,112,50,113,49,112,151,151,151,151,151,151,0,0,0,151,151,151,151,151,151,0,0,115,115,116,115,116,115,116,115,116,115,116,115,116,115,116,115,115,116,115,116,115,116,115,116,115,115,116,115,116,116,116,116,116,116,115,116,115,116,115,116,116,115],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[0,[3,4]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[6,[5]]]],[8,[[6,[5]]]],[9,[[6,[5]]]],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[8,9],[[6,[[11,[10]],12]]]],[[],7],[[],8],[13],[13],[13],[13],[13],[13],[[14,15],[[6,[7,5]]]],[[16,14,15],[[6,[8,5]]]],[[14,15],[[6,[9,5]]]],[13],[13],[13],[8,7],[8,7],[[7,[0,[17,18]]],[[6,[9,12]]]],[[7,7],19],[[8,8],19],[[9,9],19],[[],19],[[],19],[[7,20],21],[[8,20],21],[[9,20],21],[[]],[[],7],[[]],[[]],[[],8],[7],[9],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[7,14],[[6,[5]]]],[[8,26,14],[[6,[5]]]],[[9,14],[[6,[5]]]],[[7,14],13],[[8,14],13],[[9,14],13],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,0,0,0,0,0,[28,[[6,[28,29]]]],0,0,0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[30,[[6,[31,29]]]],[32,[[6,[33,29]]]],[13],[13],[13],[13],[13],[13],[[33,28],[[6,[31,29]]]],0,[[33,20],21],[[31,20],21],[[]],[[]],[[],13],[[],13],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],0,[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,34],[35,35],[36,36],[[]],[[]],[[]],[[],[[6,[29]]]],[[],[[6,[29]]]],[[],[[6,[28,29]]]],[13],[13],[13],[13],[13],[13],[13],[13],[37,[[6,[28,29]]]],[37,[[6,[28,29]]]],[[37,13,28],[[6,[28,29]]]],[[37,28,28],[[6,[28,29]]]],[13],[13],[13],[13],[[28,28],[[6,[29]]]],[[28,28],[[6,[29]]]],[[34,20],21],[[35,20],21],[[36,20],21],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[28,28],[[6,[38,29]]]],[[28,28],[[6,[38,29]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,[28,[[6,[28,29]]]],0,0,0,0,0,0,0,0,0,[1],[1],[39],[39],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[39,39],[[[42,[[0,[40,41]]]]],[[42,[[0,[40,41]]]]]],[[]],[[]],[43,[[6,[29]]]],[13],[13],[13],[13],[13],[13],[[39,20],21],[[[42,[[0,[44,41]]]],20],21],[[],39],[[]],[[]],[[],13],[[],13],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[45,46],[[6,[11,29]]]],[[],[[6,[29]]]],[45,[[6,[29]]]],[[],[[6,[29]]]],[[],[[6,[29]]]],[[],[[6,[29]]]],[13,[[6,[11,29]]]],[13,[[6,[11,29]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[47,48],[[6,[38,29]]]],[47,47],[48,48],[[]],[[]],[49,[[6,[48,29]]]],[50,[[6,[47,29]]]],[13],[13],[13],[13],[13],[13],[[47,20],21],[[48,20],21],[[]],[[]],[[],13],[[],13],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[47,48],[[6,[29]]]],[[47,48],[[6,[29]]]],[[]],[[]],0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[[[52,[[0,[40,51]]]]],[[52,[[0,[40,51]]]]]],[[]],[[53,54],[[6,[12]]]],[[53,54],[[6,[12]]]],[[],[[52,[[0,[55,51]]]]]],[13],[13],[13],[[[52,[[0,[56,51]]]],52],19],[[],19],[[[52,[[0,[44,51]]]],20],21],[[]],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[]],[[],6],[[],6],[[],27],[[53,54],[[6,[12]]]],[[53,54],[[6,[12]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[[57,[[0,[40,51]]]]],[[57,[[0,[40,51]]]]]],[[[58,[[0,[40,51]]]]],[[58,[[0,[40,51]]]]]],[[]],[[]],[13],[13],[13],[13],[13],[13],[53,[[6,[12]]]],[53,[[6,[12]]]],[53,[[6,[12]]]],[[[57,[[0,[44,51]]]],20],21],[[[58,[[0,[44,51]]]],20],21],[[]],[[]],[[],13],[[],13],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[32,[[6,[5]]]],[59,[[6,[5]]]],[30,[[6,[5]]]],[32,32],[59,59],[30,30],[[]],[[]],[[]],[[59,30],11],[[],32],[13],[13],[13],[13],[13],[13],[[16,14,15],[[6,[32,5]]]],[[16,14,15],[[6,[59,5]]]],[[16,14,15],[[6,[30,5]]]],[32,30],[13],[13],[13],[59,32],[59,32],[32,30],[[[32,[60]],[32,[60]]],19],[[59,59],19],[[30,30],19],[[],19],[[],19],[[32,20],21],[[59,20],21],[[30,20],21],[[]],[[]],[[]],[[],[[6,[30,12]]]],[[],59],[[[32,[60]]]],[30],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[],[[32,[60]]]],[[32,26,14],[[6,[5]]]],[[59,26,14],[[6,[5]]]],[[30,26,14],[[6,[5]]]],[[32,14],13],[[59,14],13],[[30,14],13],[[]],[[]],[[]],[30,11],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],[32],0,0,[13,[[6,[11,12]]]],[13,[[6,[11,12]]]],0,0,0,[1],[[],2],[[],2],[[],2],[[],2],[[[0,[3,4]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[[62,[61]]],[[6,[5]]]],[[[62,[[0,[40,61]]]]],[[62,[[0,[40,61]]]]]],[[]],[13,[[6,[11,12]]]],[13],[13],[13],[13],[[16,14,15],[[6,[[62,[61]],5]]]],[13],[13],[13,[[6,[11,12]]]],[[62,62],19],[[],19],[[[62,[[0,[44,61]]]],20],21],[[]],[[]],[62],0,[[],13],[[],13],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[[62,[61]],26,14],[[6,[5]]]],[[[62,[61]],14],13],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],0,[[]],[[]],0,0,0,0,0,0,0,0,[[],2],[[],2],[[],63],[[]],[[]],[13],[13],[13],[[12,20],21],[[12,20],21],[64,12],[[]],[65,12],[5,12],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[66],[[],67],[[],6],[[],6],[[],27],[[]],0,[[68,68],[[6,[69,12]]]],[[68,68],[[6,[69,12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],0,[[],2],[[],2],[[]],[[]],[[],70],[[[71,[40,40,40]]],[[71,[40,40,40]]]],[[]],[[]],[13],[13],[[]],[[]],[[]],[13],[[[71,[56,56,56]],71],19],[[],19],0,[71,[[6,[12]]]],[71,[[6,[12]]]],[71,[[6,[12]]]],[72,[[6,[12]]]],[[[71,[44,44,44]],20],21],[[],71],[[]],[53],[[13,72],[[6,[12]]]],[[13,72],[[6,[12]]]],[[[71,[73,73,73]]]],[[],13],[[],13],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],0,[53,71],0,[53,[[6,[12]]]],[[53,53],[[6,[19,12]]]],[[],74],0,[53,[[6,[12]]]],[[53,53],[[6,[12]]]],[[],74],[[]],[13,[[11,[13]]]],[[],6],[[],6],[[],27],[[],71],[53,71],0,[[53,53],71],[[53,53],[[6,[19,12]]]],[[]],0,[1],[[],2],[[],2],[[]],[[]],[75,70],[75,75],[[]],[75],[13],[13],[[],[[6,[75]]]],[13],[[75,75],19],[[],19],[[75,72],[[6,[12]]]],[[75,20],21],[75,71],[[]],[53,75],[[13,72],[[6,[75,12]]]],[75],[75,13],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[75,53],71],[75,74],[[75,53],[[6,[12]]]],[[75,53,53],[[6,[12]]]],[75,6],[[]],[[],6],[[],6],[[],27],[[75,53,53],[[6,[19,12]]]],[[]],0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[76],[[]],[[]],[[]],[[]],[[]],[[]],[76,[[6,[5]]]],[[[77,[[0,[40,61]]]]],[[77,[[0,[40,61]]]]]],[76,76],[[]],[[]],[[76,76],78],[[],76],[13],[13],[13],[13],[13],[13],[[16,14,15],[[6,[76,5]]]],[[],76],[[],76],[13],[13],[13],[[[77,[[0,[56,61]]]],77],19],[[76,76],19],[[],19],[[],19],[[76,20],21],[[]],[[]],[[]],[76],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[76,76],[[54,[78]]]],[[76,26,14],[[6,[5]]]],[[76,14],13],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,[1],[[],2],[[],2],[[]],[[]],[79,70],[79,79],[[]],[79],[13],[13],[[],[[6,[79]]]],[13],[[79,79],19],[[],19],[[79,72],[[6,[12]]]],[[79,20],21],[79,71],[[]],[53,79],[[13,72],[[6,[79,12]]]],[79],[79,13],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[79,53],71],[79,74],[[79,53],[[6,[12]]]],[[79,53,53],[[6,[12]]]],[79,6],[[]],[[],6],[[],6],[[],27],[[79,53,53],[[6,[19,12]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[[[80,[[0,[40,51]]]]],[[80,[[0,[40,51]]]]]],[[]],[13],[13],[[],51],[[],51],[[],51],[[],51],[[],51],[70,51],[74,51],[[74,77],51],[13],[[[80,[[0,[56,51]]]],80],19],[[],19],[[[80,[[0,[44,51]]]],20],21],[[]],0,0,[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[]],[[],6],[[],6],[[],27],[[]],0,[1],[[],2],[[],2],[[]],[[]],[81,70],[81,81],[[]],[81],[13],[13],[[],[[6,[81]]]],[13],[[81,81],19],[[],19],[[81,20],21],[81,71],[[]],[53,81],[[13,72],[[6,[81,12]]]],[[13,72],[[6,[81,12]]]],[81],[81,13],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[81,53],71],[[81,53],[[6,[12]]]],[[81,53,53],[[6,[19,12]]]],[81,74],[[81,53,53],[[6,[12]]]],[81,6],[[]],[[],6],[[],6],[[],27],[81,71],[[81,53],71],[[81,53,53],71],[[81,53,53],[[6,[19,12]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[53,[[6,[82]]]],[53,[[6,[82]]]],[[],[[6,[19,82]]]],[53,[[6,[82]]]],0,[13],[13],[13,[[6,[82]]]],[13,[[6,[82]]]],[53,[[6,[82]]]],0,[[53,13,[54,[13]]],[[6,[82]]]],[13,[[6,[82]]]],[[],[[6,[19,82]]]],0,0,0,0,0,0,0,[[],2],[[],2],[[]],[[]],[13],[13],[13],[[82,20],21],[[82,20],21],[5,82],[[]],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[],67],[[],6],[[],6],[[],27],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[53,[[6,[82]]]],[53,[[6,[82]]]],[53,[[6,[82]]]],[53,[[6,[82]]]],[[],[[6,[19,82]]]],[[],[[6,[19,82]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[84,[83]]],[[6,[5]]]],[[[85,[83]]],[[6,[5]]]],[[[86,[83]]],[[6,[5]]]],[[[87,[83]]],[[6,[5]]]],[[[88,[83]]],[[6,[5]]]],[[[89,[83]]],[[6,[5]]]],[[[90,[83]]],[[6,[5]]]],[[[92,[91]]],[[6,[5]]]],[[[93,[83]]],[[6,[5]]]],[[[94,[83]]],[[6,[5]]]],[[[84,[[0,[40,83]]]]],[[84,[[0,[40,83]]]]]],[[[85,[[0,[40,83]]]]],[[85,[[0,[40,83]]]]]],[[[86,[[0,[40,83]]]]],[[86,[[0,[40,83]]]]]],[[[87,[[0,[40,83]]]]],[[87,[[0,[40,83]]]]]],[[[88,[[0,[40,83]]]]],[[88,[[0,[40,83]]]]]],[[[89,[83]]],[[89,[83]]]],[[[90,[[0,[40,83]]]]],[[90,[[0,[40,83]]]]]],[[[92,[[0,[40,91]]]]],[[92,[[0,[40,91]]]]]],[[[93,[83]]],[[93,[83]]]],[[[94,[[0,[40,83]]]]],[[94,[[0,[40,83]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,[[6,[82]]]],[53,[[6,[82]]]],[[13,13],13],[[],[[89,[83]]]],[[],[[90,[[0,[55,83]]]]]],[[],[[92,[[0,[55,91]]]]]],[[],[[93,[83]]]],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[[16,14,15],[[6,[[84,[83]],5]]]],[[16,14,15],[[6,[[85,[83]],5]]]],[[16,14,15],[[6,[[86,[83]],5]]]],[[16,14,15],[[6,[[87,[83]],5]]]],[[16,14,15],[[6,[[88,[83]],5]]]],[[16,14,15],[[6,[[89,[83]],5]]]],[[16,14,15],[[6,[[90,[83]],5]]]],[[16,14,15],[[6,[[92,[91]],5]]]],[[16,14,15],[[6,[[93,[83]],5]]]],[[16,14,15],[[6,[[94,[83]],5]]]],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[[[87,[[0,[56,83]]]],87],19],[[[88,[[0,[56,83]]]],88],19],[[[89,[83]],[89,[83]]],19],[[[90,[[0,[56,83]]]],90],19],[[[92,[[0,[56,91]]]],92],19],[[[93,[83]],[93,[83]]],19],[[[94,[[0,[56,83]]]],94],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[[84,[83]],13]],[[[90,[83]],13]],[[[84,[83]],13]],[[[90,[83]],13]],[[[84,[[0,[44,83]]]],20],21],[[[85,[[0,[44,83]]]],20],21],[[[86,[[0,[44,83]]]],20],21],[[[87,[[0,[44,83]]]],20],21],[[[88,[[0,[44,83]]]],20],21],[[[89,[83]],20],21],[[[90,[[0,[44,83]]]],20],21],[[[92,[[0,[44,91]]]],20],21],[[[93,[83]],20],21],[[[94,[[0,[44,83]]]],20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[13,[[6,[82]]]],[13,[[6,[82]]]],[13,[[6,[[84,[83]],82]]]],[13,[[6,[[90,[83]],82]]]],[[13,13],13],0,0,0,0,0,0,[[[89,[83]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[[90,[83]]],13],[[],[[6,[[95,[41]],82]]]],0,0,[53,[[6,[82]]]],[53,[[6,[82]]]],0,0,0,0,0,0,0,0,0,[[[84,[83]],26,14],[[6,[5]]]],[[[85,[83]],26,14],[[6,[5]]]],[[[86,[83]],26,14],[[6,[5]]]],[[[87,[83]],26,14],[[6,[5]]]],[[[88,[83]],26,14],[[6,[5]]]],[[[89,[83]],26,14],[[6,[5]]]],[[[90,[83]],26,14],[[6,[5]]]],[[[92,[91]],26,14],[[6,[5]]]],[[[93,[83]],26,14],[[6,[5]]]],[[[94,[83]],26,14],[[6,[5]]]],[[[84,[83]],14],13],[[[85,[83]],14],13],[[[86,[83]],14],13],[[[87,[83]],14],13],[[[88,[83]],14],13],[[[89,[83]],14],13],[[[90,[83]],14],13],[[[92,[91]],14],13],[[[93,[83]],14],13],[[[94,[83]],14],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[53,13,[54,[13]]],[[6,[82]]]],[[53,13,[54,[13]]],[[6,[82]]]],[[[84,[83]],13],[[6,[82]]]],[[[90,[83]],13],[[6,[82]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],[[6,[19,82]]]],[[],[[6,[19,82]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[[[96,[[0,[40,51]]]]],[[96,[[0,[40,51]]]]]],[[]],[13],[13],[13],[[53,53],[[6,[12]]]],[[53,53],[[6,[12]]]],[53,[[6,[12]]]],[[[96,[[0,[44,51]]]],20],21],[[]],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[]],[[],6],[[],6],[[],27],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[40]]],[[43,[40]]]],[[[45,[40]]],[[45,[40]]]],[[[46,[40]]],[[46,[40]]]],[[[97,[40]]],[[97,[40]]]],[[]],[[]],[[]],[[]],[[],[[43,[55]]]],[[],[[46,[51]]]],[[],[[97,[51]]]],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[[[43,[41]]],[[11,[41]]]],[[[43,[56]],43],19],[[],19],0,[[[97,[51]],43],[[43,[51]]]],[[[43,[44]],20],21],[[[45,[44]],20],21],[[[46,[44]],20],21],[[[97,[44]],20],21],[[],[[43,[98]]]],[[]],[[],[[43,[98]]]],[[],[[45,[41]]]],[[]],[[]],[[[46,[51]]],[[97,[51]]]],[[]],[[],13],[[],13],[[],13],[[],13],[[[46,[51]]],43],[[]],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[[45,[41]]],19],[[[46,[51]]]],[[[46,[51]],43],[[11,[[43,[51]]]]]],[[[45,[41]]],13],[[[43,[41]],45,43]],[[[46,[51]]],45],[[[97,[51]]],45],[[[43,[51]],45,43]],[[[46,[51]],43,43],[[43,[51]]]],[[[46,[51]],43],[[43,[51]]]],[[[97,[51]]]],0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[[45,[41]],13],[[43,[41]]]],[[]],[[]],[[]],[[]],[[],[[43,[41]]]],0,0,[[],2],[[],2],[[]],[[]],[13],[13],[13],[[65,65],19],[[],19],[[65,20],21],[[65,20],21],[[]],[[],13],[[]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[[],67],[[],6],[[],6],[[],27],[[]],0,0,0,0,0,0,0,0,0,0,[[],[[6,[12]]]],[[],[[6,[12]]]],0,0,[[],[[6,[12]]]],[[],[[6,[12]]]],[54,[[6,[12]]]],0,[68,[[6,[12]]]],[68,[[6,[12]]]],0,0,0,0,[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[99,[[6,[5]]]],[100,[[6,[5]]]],[101,[[6,[5]]]],[99,99],[100,100],[101,101],[[]],[[]],[[]],[[],100],[13],[13],[99],[100],[13],[13],[101],[13],[13],[13],[13],[[],[[6,[99]]]],[[],[[6,[100]]]],[[],[[6,[101]]]],[[16,14,15],[[6,[99,5]]]],[[16,14,15],[[6,[100,5]]]],[[16,14,15],[[6,[101,5]]]],[13],[13],[13],[13],[[99,99],19],[[100,100],19],[[101,101],19],[[],19],[[],19],[[],19],[[99,20],21],[[99,20],21],[[100,20],21],[[100,20],21],[[101,20],21],[[101,20],21],[[]],[[]],[[]],[[]],[102,[[6,[99]]]],[102,[[6,[100]]]],[102,[[6,[101]]]],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[],[[6,[12]]]],[[],[[6,[12]]]],[54,[[6,[12]]]],[99,6],[100,6],[101,6],[[99,26,14],[[6,[5]]]],[[100,26,14],[[6,[5]]]],[[101,26,14],[[6,[5]]]],[[99,14],13],[[100,14],13],[[101,14],13],[68,[[6,[12]]]],[[],67],[[],67],[[],67],[[]],[[]],[[]],[[],67],[[],67],[[],67],[[],6],[[],6],[103,[[6,[99]]]],[103,[[6,[99]]]],[103,[[6,[100]]]],[103,[[6,[100]]]],[[],6],[[],6],[103,[[6,[101]]]],[103,[[6,[101]]]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[100,13],[68,[[6,[12]]]],[[]],[[]],[[]],[[]],[99],0,0,0,0,0,[1],[1],[1],[1],[[],[[6,[12]]]],[[],[[6,[12]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[104,[[6,[5]]]],[105,[[6,[5]]]],[106,[[6,[5]]]],[107,[[6,[5]]]],[104,104],[105,105],[106,106],[107,107],[[]],[[]],[[]],[[]],[[],104],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[[],[[6,[104]]]],[[],[[6,[105]]]],[[],[[6,[107]]]],[[16,14,15],[[6,[104,5]]]],[[16,14,15],[[6,[105,5]]]],[[16,14,15],[[6,[106,5]]]],[[16,14,15],[[6,[107,5]]]],[13],[13],[13],[13],[13],[[104,104],19],[[105,105],19],[[107,107],19],[[],19],[[],19],[[],19],[[104,20],21],[[104,20],21],[[105,20],21],[[105,20],21],[[107,20],21],[[107,20],21],[[]],[[]],[104,105],[[]],[[]],[[]],[102,[[6,[104]]]],[102,[[6,[105]]]],[102,[[6,[107]]]],[[],106],[108,106],[104],[105],[107],[[],109],[[],13],[[],13],[[],13],[[],13],[[],13],[105,110],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[],[[6,[12]]]],[[],[[6,[12]]]],[54,[[6,[12]]]],[104,6],[105,6],[107,6],[[104,26,14],[[6,[5]]]],[[105,26,14],[[6,[5]]]],[[106,26,14],[[6,[5]]]],[[107,26,14],[[6,[5]]]],[[104,14],13],[[105,14],13],[[106,14],13],[[107,14],13],0,[68,[[6,[12]]]],[[106,68],107],[106,108],[[],67],[[],67],[[],67],[105,111],[[]],[[]],[[]],[[]],[[],67],[[],67],[[],67],[[],6],[[],6],[103,[[6,[104]]]],[103,[[6,[104]]]],[[],6],[103,[[6,[105]]]],[103,[[6,[105]]]],[[],6],[103,[[6,[107]]]],[103,[[6,[107]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[106,105],[106,105],[68,[[6,[12]]]],[[105,107,68],[[6,[12]]]],[[]],[[]],[[]],[[]],[[]],[104],[105],[106],0,0,0,0,0,[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[[0,[3,4]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[112,[41]]],[[6,[5]]]],[50,[[6,[5]]]],[113,[[6,[5]]]],[49,[[6,[5]]]],[[[112,[[0,[40,41]]]]],[[112,[[0,[40,41]]]]]],[50,50],[113,113],[49,49],[[]],[[]],[[]],[[]],[[],[[112,[[0,[55,41]]]]]],[[],50],[[],113],[[],49],[13],[13],[13],[13],[13],[13],[13],[13],[13],[13],[[],[[6,[[112,[41]]]]]],[[],[[6,[50]]]],[[],[[6,[113]]]],[[],[[6,[49]]]],[[16,14,15],[[6,[[112,[41]],5]]]],[[16,14,15],[[6,[50,5]]]],[[16,14,15],[[6,[113,5]]]],[[16,14,15],[[6,[49,5]]]],[13],[[[112,[41]]]],[13],[13],[13],[13],[[[112,[[0,[56,41]]]],112],19],[[50,50],19],[[113,113],19],[[49,49],19],[[],19],[[],19],[[],19],[[[112,[[0,[44,41]]]],20],21],[[[112,[41]],20],21],[[50,20],21],[[50,20],21],[[113,20],21],[[113,20],21],[[49,20],21],[[49,20],21],[[]],[[]],[[]],[112,50],[114,50],[[]],[[]],[102,[[6,[[112,[41]]]]]],[102,[[6,[50]]]],[102,[[6,[113]]]],[102,[[6,[49]]]],[[],113],[[],113],[[[112,[[0,[73,41]]]]]],[50],[49],[[],13],[[],13],[[],13],[[],13],[[],13],[50,69],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[[],[[6,[12]]]],[54,[[6,[12]]]],[[[50,[60]]],[[50,[60]]]],[113,113],[[[112,[41]]],6],[50,6],[113,6],[49,6],[[[112,[41]],26,14],[[6,[5]]]],[[50,26,14],[[6,[5]]]],[[113,26,14],[[6,[5]]]],[[49,26,14],[[6,[5]]]],[[[112,[41]],14],13],[[50,14],13],[[113,14],13],[[49,14],13],[68,[[6,[12]]]],[[113,68],49],[113],[[],67],[[],67],[[],67],[[],67],[[[50,[60]]],[[114,[60]]]],[[]],[[]],[[]],[[]],[[],67],[[],67],[[],67],[[],67],[[],6],[103,[[6,[[112,[41]]]]]],[103,[[6,[[112,[41]]]]]],[[],6],[103,[[6,[50]]]],[103,[[6,[50]]]],[[],6],[103,[[6,[113]]]],[103,[[6,[113]]]],[[],6],[[],6],[103,[[6,[49]]]],[103,[[6,[49]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[113,50],[113,50],[68,[[6,[12]]]],[[50,49,68],[[6,[12]]]],[[]],[[]],[[]],[[]],[[]],[112],0,0,0,0,0,0,0,0,0,[[],[[6,[12]]]],[[],[[6,[12]]]],[54,[[6,[12]]]],[[],[[6,[12]]]],[[],[[6,[12]]]],[[],[[6,[12]]]],0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[13],[13],[13],[13],[13],[13],[[115,20],21],[[]],[[]],[[],13],[[],13],[[]],[[]],[[[23,[22]]],[[23,[2,22]]]],[[[23,[22]]],[[23,[2,22]]]],[24,[[24,[2]]]],[25,[[25,[2]]]],[25,[[25,[2]]]],[116,[[6,[12]]]],[115,116],[[116,54],[[6,[12]]]],[116,[[6,[12]]]],[116,[[6,[12]]]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[116,[[6,[12]]]],[[]],[[]]],"p":[[3,"Private"],[8,"Any"],[8,"Iterator"],[8,"Send"],[4,"SerializationError"],[4,"Result"],[3,"EncKey"],[3,"KeyPair"],[3,"Ciphertext"],[15,"u8"],[3,"Vec"],[4,"PrimitivesError"],[15,"usize"],[4,"Compress"],[4,"Validate"],[8,"Read"],[8,"RngCore"],[8,"CryptoRng"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"Write"],[3,"TypeId"],[6,"Variable"],[4,"CircuitError"],[3,"Ciphertext"],[3,"ElGamalHybridCtxtVars"],[3,"EncKey"],[3,"EncKeyVars"],[3,"Merkle3AryNodeVar"],[3,"Merkle3AryNonMembershipProofVar"],[3,"Merkle3AryMembershipProofVar"],[3,"PlonkCircuit"],[3,"BoolVar"],[3,"RescueStateVar"],[8,"Clone"],[8,"PrimeField"],[3,"RescueNonNativeStateVar"],[3,"RescueVector"],[8,"Debug"],[3,"RescueMatrix"],[3,"PRP"],[3,"VerKeyVar"],[3,"SignatureVar"],[3,"Signature"],[3,"VerKey"],[8,"RescueParameter"],[3,"FixedLengthRescueCommitment"],[8,"Borrow"],[4,"Option"],[8,"Default"],[8,"PartialEq"],[3,"FixedLengthRescueCRHF"],[3,"VariableLengthRescueCRHF"],[3,"KeyPair"],[8,"TECurveConfig"],[8,"Field"],[3,"ReedSolomonErasureCodeShare"],[8,"Error"],[4,"BLST_ERROR"],[4,"RescueError"],[3,"Demand"],[3,"String"],[8,"AsRef"],[3,"Projective"],[3,"BigUint"],[4,"LookupResult"],[8,"IntoIterator"],[8,"Hash"],[15,"u64"],[3,"MerkleTree"],[3,"Sha3Node"],[3,"Interval"],[4,"Ordering"],[3,"LightWeightMerkleTree"],[3,"RescueHash"],[3,"UniversalMerkleTree"],[4,"PCSError"],[8,"Pairing"],[3,"MultilinearUniversalParams"],[3,"MultilinearProverParam"],[3,"MultilinearVerifierParam"],[3,"MultilinearKzgProof"],[3,"MultilinearKzgBatchProof"],[3,"Commitment"],[3,"UnivariateUniversalParams"],[8,"AffineRepr"],[3,"UnivariateProverParam"],[3,"UnivariateVerifierParam"],[3,"UnivariateKzgProof"],[3,"DenseMultilinearExtension"],[3,"RescuePRF"],[3,"Permutation"],[8,"Copy"],[3,"BLSSignKey"],[3,"BLSVerKey"],[3,"BLSSignature"],[15,"str"],[3,"TaggedBase64"],[3,"SignKey"],[3,"VerKey"],[3,"KeyPair"],[3,"Signature"],[6,"Fr"],[6,"G1Projective"],[6,"G2Projective"],[6,"G2Affine"],[3,"SignKey"],[3,"KeyPair"],[3,"Affine"],[4,"BLSVRFCipherSuite"],[3,"BLSVRFScheme"],[8,"CommitmentGadget"],[8,"ElGamalEncryptionGadget"],[8,"MerkleTreeGadget"],[8,"UniversalMerkleTreeGadget"],[3,"RescueDigestGadget"],[8,"DigestAlgorithmGadget"],[8,"PRFGadget"],[8,"SpongeStateVar"],[8,"RescueGadget"],[8,"SignatureGadget"],[8,"CommitmentScheme"],[8,"CRHF"],[8,"ErasureCode"],[3,"ReedSolomonErasureCode"],[8,"TEHashToGroup"],[8,"MerkleTreeScheme"],[8,"UniversalMerkleTreeScheme"],[8,"DigestAlgorithm"],[8,"MerkleCommitment"],[8,"AppendableMerkleTreeScheme"],[8,"ForgetableMerkleTreeScheme"],[8,"ForgetableUniversalMerkleTreeScheme"],[8,"ToTraversalPath"],[3,"Sha3Digest"],[8,"PolynomialCommitmentScheme"],[8,"StructuredReferenceString"],[3,"MultilinearKzgPCS"],[3,"UnivariateKzgPCS"],[8,"PRF"],[8,"SignatureScheme"],[8,"AggregateableSignatureSchemes"],[3,"BLSSignatureScheme"],[3,"BLSOverBN254CurveSignatureScheme"],[3,"SchnorrSignatureScheme"],[8,"Vrf"]]},\
"jf_relation":{"doc":"Interfaces for Plonk-based constraint systems","t":"AAAAARRRFIDIGEDENNNNGGLLLLKLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLKLKLLLLLKLLLKLLLLKLLLKLLKLLLLLLLLLLLLLLLKLKLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLKLKLLKLKLKLKLLLLKLLLLKLKLKLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLENNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLAAASISDDSILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLFADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDIDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["constants","constraint_system","errors","gadgets","gates","GATE_WIDTH","N_MUL_SELECTORS","N_TURBO_PLONK_SELECTORS","compute_coset_representatives","Arithmetization","BoolVar","Circuit","GateId","MergeableCircuitType","PlonkCircuit","PlonkType","TurboPlonk","TypeA","TypeB","UltraPlonk","Variable","WireId","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add_constant","add_gate","add_gate","add_range_check_variable","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_circuit_satisfiability","check_circuit_satisfiability","check_var_bound","check_vars_bound","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_extended_permutation_polynomials","compute_extended_permutation_polynomials","compute_key_table_polynomial","compute_key_table_polynomial","compute_lookup_prod_polynomial","compute_lookup_prod_polynomial","compute_lookup_sorted_vec_polynomials","compute_lookup_sorted_vec_polynomials","compute_merged_lookup_table","compute_merged_lookup_table","compute_prod_permutation_polynomial","compute_prod_permutation_polynomial","compute_pub_input_polynomial","compute_pub_input_polynomial","compute_q_dom_sep_polynomial","compute_q_dom_sep_polynomial","compute_range_table_polynomial","compute_range_table_polynomial","compute_selector_polynomials","compute_selector_polynomials","compute_table_dom_sep_polynomial","compute_table_dom_sep_polynomial","compute_wire_polynomials","compute_wire_polynomials","conditional_select","create_boolean_variable","create_constant_point_variable","create_constant_variable","create_constant_variable","create_point_variable","create_public_point_variable","create_public_variable","create_public_variable","create_table_and_lookup_variables","create_variable","create_variable","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","ecc_add","enforce_bool","enforce_bool","enforce_constant","enforce_constant","enforce_equal","enforce_equal","enforce_false","enforce_geq","enforce_geq_constant","enforce_gt","enforce_gt_constant","enforce_in_range","enforce_leq","enforce_leq_constant","enforce_lt","enforce_lt_constant","enforce_on_curve","enforce_point_equal","enforce_true","eq","eq","equivalent","equivalent","eval_domain_size","eval_domain_size","false_var","finalize_for_arithmetization","finalize_for_mergeable_circuit","fixed_base_scalar_mul","fmt","fmt","fmt","fmt","from","from","from","from","from","gen_quad_poly","glv_mul","hash","hash","init","init","init","init","insert_gate","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","inverse_point","is_equal","is_geq","is_geq_constant","is_gt","is_gt_constant","is_in_range","is_leq","is_leq_constant","is_lt","is_lt_constant","is_neutral_point","is_point_equal","is_zero","lc","lc_gate","logic_and","logic_and_all","logic_neg","logic_or","logic_or_gate","merge","mod_add","mod_add_constant","mod_add_vec","mod_mul","mod_mul_constant","mod_negate","msm","msm_with_var_scalar_length","mul","mul","mul_add","mul_add_gate","mul_constant","mul_constant_gate","mul_gate","mul_gate","neutral_point_variable","new_turbo_plonk","new_ultra_plonk","non_native_linear_gen","non_native_power_11_gate","non_native_power_11_gen","non_native_power_5_gen","non_zero_gate","num_gates","num_gates","num_inputs","num_inputs","num_range_blocks","num_vars","num_vars","num_wire_types","num_wire_types","one","one","pad_gates","pad_gates","point_witness","power_11_gate","power_11_gen","public_input","public_input","quad_poly_gate","range_bit_len","range_size","set_variable_public","set_variable_public","srs_size","srs_size","sub","sub","sub_gate","sub_gate","sum","support_lookup","support_lookup","to_owned","to_owned","to_owned","to_owned","true_var","truncate","truncate_gate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unpack","variable_base_binary_scalar_mul","variable_base_scalar_mul","vzip","vzip","vzip","vzip","witness","witness","witness_mut","zero","zero","CircuitError","DomainCreationError","FieldAlgebraError","GateCheckFailure","IndexError","InternalError","LookupUnsupported","ModifyFinalizedCircuit","NotSupported","ParameterError","PubInputLenMismatch","UnfinalizedCircuit","UnsupportedCurve","VarIndexOutOfBound","WrongPlonkType","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","ecc","test_utils","ultraplonk","BETA","MultiScalarMultiplicationCircuit","NEG_ALPHA","Point","PointVariable","S","SWToTEConParam","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","get_x","get_x","get_y","get_y","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","inverse","msm","msm_with_var_scalar_length","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","test_variable_independence_for_circuit","mod_arith","FpElem","FpElemVar","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","components","convert_to_var","default","default","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","eq","eq","equivalent","equivalent","field_elem","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","new_from_field_element","new_from_fp_elem","new_unchecked","one","param_m","param_m","to_owned","to_owned","try_from","try_from","try_into","try_into","two_power_m","two_power_m","type_id","type_id","vzip","vzip","witness","witness_fp_elem","zero","AdditionGate","BoolGate","CondSelectGate","ConstantAdditionGate","ConstantGate","ConstantMultiplicationGate","CurvePointXAdditionGate","CurvePointYAdditionGate","EdwardsCurveEquationGate","EqualityGate","FifthRootGate","Gate","IoGate","LinCombGate","LogicOrGate","LogicOrOutputGate","LookupGate","MulAddGate","MultiplicationGate","PaddingGate","QuadPolyGate","QuaternaryPointSelectXGate","QuaternaryPointSelectYGate","SubtractionGate","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast_mut","downcast_rc","downcast_ref","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","q_c","q_c","q_c","q_c","q_c","q_c","q_c","q_dom_sep","q_dom_sep","q_ecc","q_ecc","q_ecc","q_ecc","q_hash","q_hash","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lookup","q_lookup","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","table_dom_sep","table_dom_sep","table_key","table_key","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["jf_relation","","","","","jf_relation::constants","","","","jf_relation::constraint_systemjf_relation::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_relation::gadgets","","","jf_relation::gadgets::ecc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_relation::gadgets::test_utils","jf_relation::gadgets::ultraplonk","jf_relation::gadgets::ultraplonk::mod_arith","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_relation::gatesd":["Crate wide constants.","Definitions and constructions of plonk constraint system","Error module.","Gates and gadgets implementations","Module for various circuit gates.","The number of input wires.","The number of multiplication selectors.","The number of TurboPlonk selectors.","Compute constants K0, K1, …, K_{<code>num_wire_types</code>-1} so …","An interface that transforms Plonk circuits to polynomial …","An index to a witness value of boolean type.","An interface for Plonk constraint systems.","An index to a gate in circuit.","Enum for each type of mergeable circuit. We can only merge …","A specific Plonk circuit instantiation.","Enum for each type of Plonk scheme.","TurboPlonk","First type","Second type","TurboPlonk that supports Plookup","An index to one of the witness values.","An index to the type of gate wires. There are 4 different …","","","","","Obtain a variable representing an addition. Return the …","","Obtains a variable representing an addition with a …","Constrain variable <code>c</code> to the addition of <code>a</code> and <code>b</code>. Return …","","Add a range_check gate that checks whether a variable is …","","","","","","","","","","","","","","","","","Check circuit satisfiability against a public input.","","Checks if a variable is strictly less than the number of …","Check if a list of variables are strictly less than the …","","","","","","","","","Compute and return extended permutation polynomials. …","","Compute and return the polynomial that interpolates the …","","Compute and return the product polynomial for Plookup …","","Compute the sorted concatenation of the (merged) lookup …","","Compute and return the combined lookup table vector given …","","Compute and return the product polynomial for permutation …","","Compute and return the public input polynomial. Return an …","","Compute and return the polynomial that interpolates the …","","Plookup-related methods Return default errors if the …","","Compute and return selector polynomials. Return an error …","","Compute and return the polynomial that interpolates the …","","Compute and return the list of wiring witness polynomials. …","","Obtain a variable that equals <code>x_0</code> if <code>b</code> is zero, or <code>x_1</code> if <code>b</code>…","Add a bool variable to the circuit; return the index of …","Add a new EC point (as a constant) to the circuit","Add a constant variable to the circuit; return the index …","","Add a new EC point (as witness) to the circuit","Add a new EC point (as public input) to the circuit","Add a public input variable; return the index of the …","","Create a table with keys/values [0, …, n - 1] and […","Add a variable to the circuit; return the index of the …","","","","","","","","","","","","","","","Obtain a variable to the point addition result of <code>point_a</code> …","Constrain a variable to a bool. Return error if the input …","","Common gates that should be implemented in any constraint …","","Constrain two variables to have the same value. Return …","","Assuming values represented by <code>a</code> is boolean. Constrain <code>a</code> …","Constrain that <code>a</code> &gt;= <code>b</code>.","Enforce the variable <code>a</code> to be greater than or equal a given …","Constrain that <code>a</code> &gt; <code>b</code>.","Enforce the variable <code>a</code> to be greater than a given constant …","Constrain a variable to be within the [0, 2^<code>bit_len</code>) range …","Constrain that <code>a</code> &lt;= <code>b</code>","Enforce the variable <code>a</code> to be less than or equal to a given …","Constrain that <code>a</code> &lt; <code>b</code>.","Enforce the variable <code>a</code> to be less than a given constant <code>val</code>…","Constrain a point to be on certain curve, namely its …","Constrain two point variables to be the same. Return error …","Assuming values represented by <code>a</code> is boolean. Constrain <code>a</code> …","","","","","Get the size of the evaluation domain for arithmetization …","","Return a default variable with value <code>false</code> (namely zero).","Finalize the setup of the circuit before arithmetization.","Finalize the setup of a mergeable circuit. Two circuits …","Obtain the fixed-based scalar multiplication result of …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Arithmetic gates","Perform GLV multiplication in circuit (which costs a few …","","","","","","","Insert a general (algebraic) gate","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Inverse a point variable","Obtain a bool variable representing whether two input …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &gt;= <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &gt; <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Return a boolean variable indicating whether variable <code>a</code> is …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &lt;= <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &lt; <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Obtain a boolean variable indicating whether a point is …","Obtain a bool variable representing whether two point …","Obtain a bool variable representing whether input variable …","Obtain a variable representing a linear combination. …","Constrain a linear combination gate: q1 * a + q2 * b + q3 …","Obtain a variable representing the result of a logic AND …","Given a list of boolean variables, obtain a variable …","Obtain a variable representing the result of a logic …","Obtain a variable representing the result of a logic OR …","Constrain that <code>a</code> is true or <code>b</code> is true. Return error if …","Merge a type A circuit with a type B circuit. Both …","Modular addition gate: Given Fp elements x, y and modulus …","Modular addition gate: Given input x: Fp element variable, …","Modular addition gate: Given Fp elements &amp;[x] and modulus …","Modular multiplication gate: Given Fp elements x, y and …","Modular multiplication gate: Given input x: Fp element …","Negate an FpElemVar mod p where p is a public variable …","","","Obtain a variable representing a multiplication. Return …","","Obtain a variable representing <code>q12 * a * b + q34 * c * d</code>, …","Constrain a mul-addition gate: q_muls[0] * wires[0] *  …","Obtains a variable representing a multiplication with a …","Constrain variable <code>y</code> to the product of <code>a</code> and <code>c</code>, where <code>c</code> is …","Constrain variable <code>c</code> to the multiplication of <code>a</code> and <code>b</code>. …","","Return the point variable for the infinity point in the TE …","Construct a new TurboPlonk circuit.","Construct a new UltraPlonk circuit.","Input vector x and y, and a constant c, generate a …","generate a non-native circuit for the statement x^11 = y","generate a non-native circuit for the statement x^11 = y","generate a non-native circuit for the statement x^5 = y","Constrain a variable to be non-zero. Return error if the …","The number of constraints.","","The number of public input variables.","","The number of range blocks, i.e., the minimal integer such …","The number of variables.","","The number of wire types of the circuit. E.g., UltraPlonk …","","Return a default variable with value one.","Default one variable","Pad the circuit with n dummy gates","","Return the witness point for the circuit","Constraint a variable to be the 11th power of another …","Return a variable to be the 11th power of the input …","The list of public input values.","","Arithmetic gates","The bit length of UltraPlonk range gates.","The range size of UltraPlonk range gates.","Set a variable to a public variable","","The required SRS size for the circuit.","","Obtain a variable representing a subtraction. Return the …","","Constrain variable <code>c</code> to the subtraction of <code>a</code> and <code>b</code>. Return …","","Obtain a variable representing the sum of a list of …","Plookup-related methods. Return true if the circuit …","","","","","","Return a default variable with value <code>true</code> (namely one).","Obtain the truncation of the input. Constrain that the …","Truncation gate. Constrain that b == a modulo 2^bit_length.","","","","","","","","","","","","","Obtain the <code>bit_len</code>-long binary representation of variable <code>a</code>","Obtain a variable of the result of a variable base scalar …","Obtain a variable of the result of a variable base scalar …","","","","","Return the witness value of variable <code>idx</code>. Return error if …","","Change the value of a variable. Only used for testing.","Return a default variable with value zero.","Default zero variable","A <code>enum</code> specifying the possible failure modes of the …","Failed to create domain","Algebra over field failed: {0}","The {0}-th gate failed: {1}","Failed to get array value by index","‼ ️Internal error! Please report to Crypto Team …","The circuit does not support lookup","Attempt to modify the finalized circuit","Feature not supported: {0}","Invalid parameters: {0}","Public input length {0} doesn’t match num_inputs = {1}.","The circuit is not finalized before doing arithmetization","Unexpected field for elliptic curve operation, currently …","Variable index {0} is larger than the bound {1}.","The circuit has wrong Plonk type","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Elliptic curve related gates and gadgets. Including both …","Utils for test","Implements ultra-plonk related circuits.","Parameter beta.","Compute the multi-scalar-multiplications in circuit.","Parameter 1/alpha.","An elliptic curve point in twisted Edwards affine form (x, …","Represent variable of an EC point.","Parameter S.","This trait holds constants that are used for curve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Get the x coordinate of the point.","Get the variable representing the x coordinate of the …","Get the y coordinate of the point.","Get the variable representing the y coordinate of the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The inverse point for the edward form.","Compute the multi-scalar-multiplications. Use pippenger …","Compute the multi-scalar-multiplications where each scalar …","","","","","","","","","","","two circuit with the same statement should have the same …","Modular arithmetic gates","A field element represented by: p = p.0 + 2^m * p.1. The …","Represent variable of an Fp element: elem = witness[vars.0]…","","","","","","","","","","","","","","","Expose the field element components","Expose the field element variables components","Convert into a single variable with value …","","","","","","","","","Enforce self == other.","","","","","Convert into a single field element.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a FpElem struct from field element <code>p</code> and split …","Create an FpElemVar from field element and split parameter …","Create an FpElemVar from FpElem form field element . This …","Create an FpElemVar from Fp element variable <code>var</code> and split …","An FpElemVar that represents a 1","Expose the m parameter","Expose the m parameter","","","","","","","Expose 2^m parameter","Expose 2^m parameter","","","","","Get the witness from the variables","Get the witness in FpElem form from the variables","An FpElemVar that represents a 0","An addition gate","A boolean gate, selectors identical to <code>MultiplicationGate</code>, …","A gate for conditional selection","Adding a variable by a constant.","A constant gate","A mul constant gate. Multiply the first variable with the …","A gate for point addition on x-coordinate between two …","A gate for point addition on y-coordinate between two …","A gate for checking a point conforming the twisted Edwards …","An equality gate, selectors identical to <code>SubtractionGate</code>, …","Gate for checking a value is the fifth root of another","Describes a gate with getter for all selectors …","An I/O gate for public inputs","A linear combination gate","A gate for logic OR","A gate for computing the logic OR value of 2 variables","An UltraPlonk lookup gate","A multiplication-then-addition gate","A multiplication gate","A empty gate for circuit padding","A deg-2 polynomial gate","A point selection gate on x-coordinate for conditional …","A point selection gate on y-coordinate for conditional …","A subtraction gateeturns a boxed object from a boxed trait object if the …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type …","Get the name of a gate.","","","","","","","","","","","","","","","","","","","","","","","","Constant selector.","","","","","","","UltraPlonk lookup domain separation selector.","","The selector for elliptic curve operation.","","","","Selectors for Rescue hashes.","","Selectors for linear combination.","","","","","","","","","","","","","UltraPlonk lookup selector.","","Selectors for multiplication.","","","","","","","","","","","","","Output wire selector.","","","","","","","","","","","","","","","","","","","","UltraPlonk table domain separation ids","","UltraPlonk table keys.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,14,13,0,0,12,13,14,10,62,10,10,62,10,10,12,13,14,10,12,13,14,10,12,13,14,10,12,13,14,10,62,10,10,10,12,13,14,10,12,13,14,10,63,10,63,10,63,10,63,10,63,10,63,10,63,10,63,10,63,10,63,10,63,10,63,10,10,62,10,62,10,10,10,62,10,10,62,10,10,12,13,14,10,12,13,14,10,12,13,14,10,10,62,10,62,10,62,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,14,13,14,63,10,62,10,10,10,12,13,14,10,6,12,13,14,10,10,10,13,14,12,13,14,10,10,12,13,14,10,12,13,14,10,12,13,14,12,13,14,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,62,10,10,10,10,10,62,10,10,10,10,10,10,10,10,10,62,10,62,10,10,62,10,62,10,62,10,62,10,10,10,10,62,10,10,10,10,62,10,63,10,62,10,62,10,10,62,10,12,13,14,10,62,10,10,12,13,14,10,12,13,14,10,12,13,14,10,10,10,10,12,13,14,10,62,10,10,62,10,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,64,0,64,0,0,64,0,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,17,17,17,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,65,65,17,18,17,18,17,18,17,18,17,18,0,0,0,0,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,27,28,27,28,27,28,27,28,27,27,28,27,28,27,28,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,27,27,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,22,22,22,22,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,22,38,39,40,41,42,43,44,45,46,47,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,22,22,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,22,38,40,48,52,56,57,22,59,22,52,53,54,22,47,22,39,40,41,43,45,48,49,51,55,56,57,58,22,59,22,42,44,48,50,51,52,53,54,55,56,57,58,22,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,58,22,59,22,59,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"f":[0,0,0,0,0,0,0,0,[[1,[2,[1]]],[[4,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[5],[5],[5],[5],[[6,6],[[8,[6,7]]]],[[[10,[9]],6,6],[[8,[6,7]]]],[[[10,[3]],6],[[8,[6,7]]]],[[6,6,6],[[8,[7]]]],[[[10,[9]],6,6,6],[[8,[7]]]],[[[10,[9]],6],[[8,[7]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[8,[7]]]],[[[10,[9]]],[[8,[7]]]],[[[10,[9]],6],[[8,[7]]]],[[[10,[9]]],[[8,[7]]]],[12,12],[13,13],[14,14],[10,10],[[]],[[]],[[]],[[]],[[],[[8,[[4,[15]],7]]]],[10,[[8,[[4,[15]],7]]]],[[],[[8,[15,7]]]],[10,[[8,[15,7]]]],[[],[[8,[15,7]]]],[10,[[8,[15,7]]]],[[],[[8,[7]]]],[10,[[8,[7]]]],[[],[[8,[4,7]]]],[10,[[8,[4,7]]]],[[],[[8,[15,7]]]],[10,[[8,[15,7]]]],[[],[[8,[15,7]]]],[10,[[8,[15,7]]]],[[],[[8,[15,7]]]],[10,[[8,[15,7]]]],[[],[[8,[15,7]]]],[10,[[8,[15,7]]]],[[],[[8,[[4,[15]],7]]]],[10,[[8,[[4,[15]],7]]]],[[],[[8,[15,7]]]],[10,[[8,[15,7]]]],[[],[[8,[[4,[15]],7]]]],[10,[[8,[[4,[15]],7]]]],[[[10,[3]],12,6,6],[[8,[6,7]]]],[16,[[8,[12,7]]]],[[[10,[3]],[17,[3]]],[[8,[18,7]]]],[[],[[8,[6,7]]]],[[[10,[9]],9],[[8,[6,7]]]],[[[10,[3]],[17,[3]]],[[8,[18,7]]]],[[[10,[3]],[17,[3]]],[[8,[18,7]]]],[[],[[8,[6,7]]]],[[[10,[9]],9],[[8,[6,7]]]],[[[10,[3]]],[[8,[7]]]],[[],[[8,[6,7]]]],[[[10,[9]],9],[[8,[6,7]]]],[[],[[10,[9]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[[10,[3]],18,18],[[8,[18,7]]]],[6,[[8,[7]]]],[[[10,[9]],6],[[8,[7]]]],[6,[[8,[7]]]],[[[10,[9]],6,9],[[8,[7]]]],[[6,6],[[8,[7]]]],[[[10,[9]],6,6],[[8,[7]]]],[[[10,[3]],6],[[8,[7]]]],[[[10,[3]],6,6],[[8,[7]]]],[[[10,[3]],6,3],[[8,[7]]]],[[[10,[3]],6,6],[[8,[7]]]],[[[10,[3]],6,3],[[8,[7]]]],[[[10,[3]],6,1],[[8,[7]]]],[[[10,[3]],6,6],[[8,[7]]]],[[[10,[3]],6,3],[[8,[7]]]],[[[10,[3]],6,6],[[8,[7]]]],[[[10,[3]],6,3],[[8,[7]]]],[[[10,[3]],18],[[8,[7]]]],[[[10,[3]],18,18],[[8,[7]]]],[[[10,[3]],6],[[8,[7]]]],[[13,13],16],[[14,14],16],[[],16],[[],16],[[],[[8,[1,7]]]],[10,[[8,[1,7]]]],[[],12],[[[10,[3]]],[[8,[7]]]],[[[10,[3]],14],[[8,[7]]]],[[[10,[3]],6,19],[[8,[18,7]]]],[[12,20],21],[[13,20],21],[[14,20],21],[[10,20],21],[12,6],[[]],[[]],[[]],[[]],[[[10,[3]],3],[[8,[6,7]]]],[[10,6,18],[[8,[18,7]]]],[13],[14],[[],1],[[],1],[[],1],[[],1],[[[10,[9]],[23,[22]]],[[8,[7]]]],[[]],[[]],[[]],[[]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[[[10,[3]],18],[[8,[18,7]]]],[[[10,[3]],6,6],[[8,[12,7]]]],[[[10,[3]],6,6],[[8,[12,7]]]],[[[10,[3]],6,3],[[8,[12,7]]]],[[[10,[3]],6,6],[[8,[12,7]]]],[[[10,[3]],6,3],[[8,[12,7]]]],[[[10,[3]],6,1],[[8,[12,7]]]],[[[10,[3]],6,6],[[8,[12,7]]]],[[[10,[3]],6,3],[[8,[12,7]]]],[[[10,[3]],6,6],[[8,[12,7]]]],[[[10,[3]],6,3],[[8,[12,7]]]],[[[10,[3]],18],[[8,[12,7]]]],[[[10,[3]],18,18],[[8,[12,7]]]],[[[10,[3]],6],[[8,[12,7]]]],[[[10,[3]]],[[8,[6,7]]]],[[[10,[3]]],[[8,[7]]]],[[[10,[3]],12,12],[[8,[12,7]]]],[[[10,[3]]],[[8,[12,7]]]],[[[10,[3]],12],[[8,[12,7]]]],[[[10,[3]],12,12],[[8,[12,7]]]],[[[10,[3]],12,12],[[8,[7]]]],[[[10,[3]],[10,[3]]],[[8,[[10,[3]],7]]]],[[[10,[3]],27,27,28],[[8,[[27,[3]],7]]]],[[[10,[3]],27,28,28],[[8,[[27,[3]],7]]]],[[[10,[3]],28],[[8,[[27,[3]],7]]]],[[[10,[3]],27,27,28],[[8,[[27,[3]],7]]]],[[[10,[3]],27,28,28],[[8,[[27,[3]],7]]]],[[[10,[3]],27],[[8,[[27,[3]],7]]]],[10,[[8,[18,7]]]],[[10,1],[[8,[18,7]]]],[[6,6],[[8,[6,7]]]],[[[10,[9]],6,6],[[8,[6,7]]]],[[[10,[3]]],[[8,[6,7]]]],[[[10,[3]]],[[8,[7]]]],[[[10,[3]],6],[[8,[6,7]]]],[[[10,[3]],6,3,6],[[8,[7]]]],[[6,6,6],[[8,[7]]]],[[[10,[9]],6,6,6],[[8,[7]]]],[[[10,[3]]],18],[[],[[10,[9]]]],[1,[[10,[9]]]],[[[10,[3]],28],[[8,[[27,[3]],7]]]],[[[10,[3]],27,27],[[8,[7]]]],[[[10,[3]],27],[[8,[[27,[3]],7]]]],[[[10,[3]],27],[[8,[[27,[3]],7]]]],[[[10,[3]],6],[[8,[7]]]],[[],1],[[[10,[9]]],1],[[],1],[[[10,[9]]],1],[[[10,[3]]],[[8,[1,7]]]],[[],1],[[[10,[9]]],1],[[],1],[[[10,[9]]],1],[[],6],[[[10,[9]]],6],[1],[[[10,[9]],1]],[[[10,[3]],18],[[8,[[17,[3]],7]]]],[[[10,[3]],6,6],[[8,[7]]]],[[[10,[3]],6],[[8,[6,7]]]],[[],[[8,[4,7]]]],[[[10,[9]]],[[8,[[4,[9]],7]]]],[[[10,[3]],3,3],[[8,[7]]]],[[[10,[9]]],[[8,[1,7]]]],[[[10,[9]]],[[8,[1,7]]]],[6,[[8,[7]]]],[[[10,[9]],6],[[8,[7]]]],[[],[[8,[1,7]]]],[10,[[8,[1,7]]]],[[6,6],[[8,[6,7]]]],[[[10,[9]],6,6],[[8,[6,7]]]],[[6,6,6],[[8,[7]]]],[[[10,[9]],6,6,6],[[8,[7]]]],[[[10,[3]]],[[8,[6,7]]]],[[],16],[[[10,[9]]],16],[[]],[[]],[[]],[[]],[[],12],[[[10,[3]],6,1],[[8,[6,7]]]],[[[10,[3]],6,6,1],[[8,[7]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],29],[[],29],[[],29],[[],29],[[[10,[3]],6,1],[[8,[[4,[12]],7]]]],[[[10,[3]],18],[[8,[18,7]]]],[[[10,[3]],6,18],[[8,[18,7]]]],[[]],[[]],[[]],[[]],[6,[[8,[7]]]],[[[10,[9]],6],[[8,[9,7]]]],[[[10,[9]],6]],[[],6],[[[10,[9]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[[],11],[[]],[[]],[1],[1],[1],[[7,20],21],[[7,20],21],[[]],[[],1],[[]],[[[23,[24]]],[[23,[11,24]]]],[25,[[25,[11]]]],[26,[[26,[11]]]],[[],30],[[],8],[[],8],[[],29],[[]],0,0,0,0,0,0,0,0,0,0,[5],[5],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[[17,[[0,[31,3]]]]],[[17,[[0,[31,3]]]]]],[18,18],[[]],[[]],[1],[1],[1],[1],[1],[1],[[[17,[[0,[32,3]]]],17],16],[[18,18],16],[[],16],[[],16],[[[17,[[0,[33,3]]]],20],21],[[18,20],21],[34,17],[[]],[35,17],[19,17],[34,17],[[]],[[[17,[3]]],3],[18,6],[[[17,[3]]],3],[18,6],[[],1],[[],1],[[]],[[]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[[[17,[3]]],[[17,[3]]]],[[],[[8,[18,7]]]],[1,[[8,[18,7]]]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],29],[[],29],[[]],[[]],[[[10,[3]],[10,[3]]],[[8,[7]]]],0,0,0,[5],[5],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[[28,[[0,[31,3]]]]],[[28,[[0,[31,3]]]]]],[[[27,[[0,[31,3]]]]],[[27,[[0,[31,3]]]]]],[[]],[[]],[28],[[[27,[3]]]],[[[27,[3]],10],[[8,[6,7]]]],[[],[[28,[[0,[36,3]]]]]],[[],[[27,[[0,[36,3]]]]]],[1],[1],[1],[1],[1],[1],[[[27,[3]],10,[27,[3]]],[[8,[7]]]],[[[28,[[0,[32,3]]]],28],16],[[[27,[[0,[32,3]]]],27],16],[[],16],[[],16],[28],[[[28,[[0,[33,3]]]],20],21],[[[27,[[0,[33,3]]]],20],21],[[]],[[]],[[],1],[[],1],[[]],[[]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[[1,2],[[8,[28,7]]]],[[10,1,[2,[3]]],[[8,[[27,[3]],7]]]],[[10,28,1,[2,[3]]],[[8,[[27,[3]],7]]]],[[10,6,1,[2,[3]]],[[8,[[27,[3]],7]]]],[[10,1,[2,[3]]],[[27,[3]]]],[28,1],[[[27,[3]]],1],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[28],[[[27,[3]]],3],[[],29],[[],29],[[]],[[]],[[[27,[3]],10],[[8,[3,7]]]],[[[27,[3]],10],[[8,[[28,[3]],7]]]],[[10,1,[2,[3]]],[[27,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[[0,[31,37]]]]],[[38,[[0,[31,37]]]]]],[39,39],[[[40,[[0,[31,37]]]]],[[40,[[0,[31,37]]]]]],[41,41],[42,42],[[[43,[31]]],[[43,[31]]]],[44,44],[45,45],[46,46],[47,47],[[[48,[[0,[31,37]]]]],[[48,[[0,[31,37]]]]]],[[[49,[[0,[31,37]]]]],[[49,[[0,[31,37]]]]]],[[[50,[[0,[31,37]]]]],[[50,[[0,[31,37]]]]]],[51,51],[52,52],[53,53],[54,54],[[[55,[[0,[31,3]]]]],[[55,[[0,[31,3]]]]]],[[[56,[[0,[31,3]]]]],[[56,[[0,[31,3]]]]]],[57,57],[58,58],[[[59,[[0,[31,37]]]]],[[59,[[0,[31,37]]]]]],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[[23,[22]]],[[8,[[23,[22]],[23,[22]]]]]],[22,2],[[[26,[22]]],[[8,[[26,[22]],[26,[22]]]]]],[22,2],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[22,20],21],[[[38,[[0,[33,37]]]],20],21],[[39,20],21],[[[40,[[0,[33,37]]]],20],21],[[41,20],21],[[42,20],21],[[[43,[33]],20],21],[[44,20],21],[[45,20],21],[[46,20],21],[[47,20],21],[[[59,[[0,[33,37]]]],20],21],[[60,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[[[23,[24]]],[[23,[11,24]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[25,[[25,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[26,[[26,[11]]]],[22,16],[[],61],[38,61],[39,61],[40,61],[41,61],[42,61],[43,61],[44,61],[45,61],[46,61],[47,61],[48,61],[49,61],[50,61],[51,61],[52,61],[53,61],[54,61],[55,61],[56,61],[57,61],[58,61],[59,61],[60,61],[[]],[38],[40],[48],[52],[56],[57],[[]],[59],[[]],[52],[53],[54],[[]],[47],[[]],[39],[40],[41],[43],[45],[48],[49],[51],[55],[56],[57],[58],[[]],[59],[[]],[42],[44],[48],[50],[51],[52],[53],[54],[55],[56],[57],[58],[[]],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47,37],[48],[49],[50],[51],[53],[54],[55],[56],[58],[[]],[59],[[]],[59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[15,"usize"],[4,"Option"],[8,"PrimeField"],[3,"Vec"],[3,"Private"],[6,"Variable"],[4,"CircuitError"],[4,"Result"],[8,"FftField"],[3,"PlonkCircuit"],[8,"Any"],[3,"BoolVar"],[4,"PlonkType"],[4,"MergeableCircuitType"],[3,"DensePolynomial"],[15,"bool"],[3,"Point"],[3,"PointVariable"],[3,"Affine"],[3,"Formatter"],[6,"Result"],[8,"Gate"],[3,"Box"],[3,"Global"],[3,"Arc"],[3,"Rc"],[3,"FpElemVar"],[3,"FpElem"],[3,"TypeId"],[3,"String"],[8,"Clone"],[8,"PartialEq"],[8,"Debug"],[3,"Affine"],[3,"Projective"],[8,"Default"],[8,"Field"],[3,"ConstantGate"],[3,"AdditionGate"],[3,"ConstantAdditionGate"],[3,"SubtractionGate"],[3,"MultiplicationGate"],[3,"ConstantMultiplicationGate"],[3,"BoolGate"],[3,"EqualityGate"],[3,"IoGate"],[3,"FifthRootGate"],[3,"QuadPolyGate"],[3,"LinCombGate"],[3,"MulAddGate"],[3,"CondSelectGate"],[3,"EdwardsCurveEquationGate"],[3,"CurvePointXAdditionGate"],[3,"CurvePointYAdditionGate"],[3,"QuaternaryPointSelectXGate"],[3,"QuaternaryPointSelectYGate"],[3,"LogicOrGate"],[3,"LogicOrOutputGate"],[3,"LookupGate"],[3,"PaddingGate"],[15,"str"],[8,"Circuit"],[8,"Arithmetization"],[8,"SWToTEConParam"],[8,"MultiScalarMultiplicationCircuit"]]},\
"jf_utils":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLFFALLLLLLLFLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLFLLFFFLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLFLLLLLALLLLLLLLLLLLLLLLLLLLLLLFOOOOLLLLLLLLLLLLLLLLLLLFFF","n":["CanonicalBytes","Vec","allocator","append","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_ptr","as_ref","as_ref","as_slice","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes_from_field_elements","bytes_to_field_elements","canonical","capacity","check","clear","clone","clone_from","clone_into","cmp","compute_len_to_next_multiple","dedup","dedup_by","dedup_by_key","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_canonical_bytes","deserialize_canonical_bytes","deserialize_with_mode","drain","drain_filter","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","field_switching","flush","fmt","fq_to_fr","fq_to_fr_with_mask","fr_to_fq","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_par_iter","from_raw_parts","from_raw_parts_in","hash","hash_to_field","index","index_mut","init","init","insert","into","into","into_boxed_slice","into_deserializer","into_flattened","into_iter","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_write_vectored","leak","len","multi_pairing","ne","ne","ne","ne","ne","ne","new","new_in","pad_with_zeros","par_drain","par_extend","par_extend","par_iter","par_iter_mut","par_utils","partial_cmp","pop","push","push_within_capacity","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","serialize","serialize","serialize_with_mode","serialized_size","set_len","shrink_to","shrink_to_fit","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","test_rng","test_serde_default","test_serde_default","to_bytes","to_bytes","to_field_elements","to_owned","truncate","try_from","try_from","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","vzip","vzip","with_capacity","with_capacity_in","write","write_all","write_vectored","zeroize","deserialize","serialize","parallelizable_slice_iter"],"q":["jf_utilsjf_utils::canonical","","jf_utils::par_utils"],"d":["A helper for converting ark_serialize::CanonicalSerialize …","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","Extracts a slice containing the entire vector.","","","","","","","","Inverse of <code>bytes_to_field_elements</code>. Preconditions:","Invertible, deterministic, infallible conversion from …","Serializers for elements that are Ark-Works serializable …","Returns the total number of elements the vector can hold …","","Clears the vector, removing all values.","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec&lt;T&gt;</code>.","","","","","","","","","","","","Removes the specified range from the vector in bulk, …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","","","","Convert a base field element to a scalar field element. …","Convert a field element in F(rom) to a field element in …","Convert a scalar field element to a base field element. …","Returns the argument unchanged.","","Convert a boxed slice into a vector by transferring …","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Convert a clone-on-write slice into a vector.","Returns the argument unchanged.","","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","","Hash a sequence of bytes to into a field element, whose …","","","","","Inserts an element at position <code>index</code> within the vector, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","Creates a consuming iterator, that is, one that moves each …","","","","","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Returns <code>true</code> if the vector contains no elements.","","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","A simple wrapper of multi-pairing function.","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","","Utilities for parallel code.","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","","","","","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","","Takes as input a struct, and converts them to a series of …","Takes as input a struct, and converts them to a series of …","","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","","“Best effort” zeroization for <code>Vec</code>.","","","this function helps with slice iterator creation that …"],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,11,1,1,11,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,11,1,1,11,1,1,11,1,0,0,1,1,1,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,11,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,11,1,1,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,11,1,11,1,1,1,11,1,11,1,1,1,1,1,1,1,0,0,0],"f":[0,0,[1],[[1,1]],[1],[1,1],[1],[1],[1],[1,1],[1],[1],[[[0,[2,3]]],[[5,[4]]]],[[]],[1],[[]],[[]],[1],[[]],[[],[[5,[[1,[6]],7]]]],[[],1],0,[1,8],[[[1,[9]]],[[5,[4]]]],[1],[1,1],[[1,1]],[[]],[[1,1],10],[[8,8],8],[1],[1],[1],[[],[[1,[9]]]],[8],[1],[8],[8],[1],[8],[[],[[5,[11]]]],[[],[[5,[[1,[9]]]]]],0,0,[[12,13],[[5,[[1,[9]],4]]]],[1,14],[1,15],[8],[1],[8],[1,16],[1,16],[1,16],[[1,1],16],[1,16],[1,16],[[],16],[1],[1],[1],[1],[1],[1],[[1,8]],[[1,8]],[[]],[[[1,[6]]],[[5,[17]]]],[[1,18],[[5,[19]]]],[[]],[[]],[[]],[[]],[20,11],[21,1],[22,[[1,[6,9]]]],[23,[[1,[6,9]]]],[24,1],[[],[[1,[9]]]],[[],[[1,[9]]]],[25,[[1,[9]]]],[7,[[1,[6,9]]]],[[],[[1,[9]]]],[26,[[1,[9]]]],[[]],[[],[[1,[9]]]],[[],[[1,[9]]]],[[8,8],[[1,[9]]]],[[8,8],1],[1],[[]],[1],[1],[[],8],[[],8],[[1,8]],[[]],[[]],[1,21],[[[1,[9]]]],[1,1],[1],[1],[1],[1],[1],[[[1,[9]]]],[1],[1],[1,16],[[[1,[6]]],16],[1],[1,8],[[],27],[1,16],[1,16],[1,16],[1,16],[[1,1],16],[1,16],[[],[[1,[9]]]],[[],1],[[1,8]],[1],[[[1,[9]]]],[[[1,[9]]]],[[]],[[]],0,[[1,1],[[28,[10]]]],[1,28],[1],[1,5],[[1,8]],[[1,8]],[[1,8]],[[1,8]],[[1,8]],[1],[1],[11,5],[[[1,[9]]],5],[[[1,[9]],12],[[5,[4]]]],[[[1,[9]],12],8],[[1,8]],[[1,8]],[1],[1],[1,29],[1],[[1,8],1],[[1,8]],[[],30],0,0,0,0,[[[1,[6,9]]],[[28,[[1,[9]]]]]],[[]],[[1,8]],[[],5],[[],5],[[],5],[[],5],[[1,8],[[5,[31]]]],[[1,8],[[5,[31]]]],[[],32],[[],32],[[]],[[]],[8,[[1,[9]]]],[8,1],[[[1,[6]]],[[5,[8,17]]]],[[[1,[6]]],[[5,[17]]]],[[[1,[6]]],[[5,[8,17]]]],[[[1,[9]]]],[33,[[5,[34]]]],[35,5],[[],[[37,[36]]]]],"p":[[3,"Vec"],[8,"Iterator"],[8,"Send"],[4,"SerializationError"],[4,"Result"],[15,"u8"],[3,"String"],[15,"usize"],[3,"Global"],[4,"Ordering"],[3,"CanonicalBytes"],[4,"Compress"],[4,"Validate"],[3,"Drain"],[3,"DrainFilter"],[15,"bool"],[3,"Error"],[3,"Formatter"],[3,"Error"],[8,"CanonicalSerialize"],[3,"Box"],[15,"str"],[3,"CString"],[3,"VecDeque"],[3,"BinaryHeap"],[4,"Cow"],[3,"PairingOutput"],[4,"Option"],[3,"Splice"],[3,"StdRng"],[3,"TryReserveError"],[3,"TypeId"],[8,"Deserializer"],[8,"CanonicalDeserialize"],[8,"Serializer"],[8,"Sync"],[3,"Iter"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
