var searchIndex = JSON.parse('{\
"jf_plonk":{"doc":"A Rust Implementation of the Plonk ZKP System and …","t":[4,4,13,13,13,13,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,8,8,6,6,6,10,10,0,10,10,10,11,11,11,11,10,10,11,10,10,10,11,10,10,10,0,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,18,18,8,18,18,3,3,18,18,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,8,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,8,8,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,16,16,8,16,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,10,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,8,3,3,3,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MergeableCircuitType","PlonkType","TurboPlonk","TypeA","TypeB","UltraPlonk","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","circuit","clone","clone","clone_into","clone_into","constants","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","errors","fmt","fmt","from","from","get_hash","get_hash","hash","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","proof_system","to_owned","to_owned","transcript","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Arithmetization","Circuit","GateId","Variable","WireId","add","add_gate","basic","bool_gate","check_circuit_satisfiability","compute_extended_permutation_polynomials","compute_key_table_polynomial","compute_lookup_prod_polynomial","compute_lookup_sorted_vec_polynomials","compute_merged_lookup_table","compute_prod_permutation_polynomial","compute_pub_input_polynomial","compute_range_table_polynomial","compute_selector_polynomials","compute_wire_polynomials","constant_gate","create_bool_variable","create_constant_variable","create_public_variable","create_variable","customized","equal_gate","eval_domain_size","gates","mul","mul_gate","num_gates","num_inputs","num_vars","num_wire_types","one","pad_gate","public_input","set_variable_public","srs_size","sub","sub_gate","support_lookup","witness","zero","PlonkCircuit","add","add_constant","add_gate","aggregate_verify_keys","as_any","as_any_mut","bool_gate","borrow","borrow_mut","check_circuit_satisfiability","check_var_bound","check_vars_bound","clone","clone_into","compute_extended_permutation_polynomials","compute_key_table_polynomial","compute_lookup_prod_polynomial","compute_lookup_sorted_vec_polynomials","compute_merged_lookup_table","compute_prod_permutation_polynomial","compute_pub_input_polynomial","compute_range_table_polynomial","compute_selector_polynomials","compute_wire_polynomials","conditional_select","constant_gate","create_constant_point_variable","create_constant_variable","create_point_variable","create_public_point_variable","create_public_variable","create_rescue_state_variable","create_table_and_lookup_variables","create_variable","default","deref","deref_mut","drop","ecc_add","enforce_false","enforce_true","equal_gate","eval_domain_size","finalize_for_arithmetization","finalize_for_mergeable_circuit","fixed_base_scalar_mul","fmt","from","gen_quad_poly","glv_mul","init","insert_gate","into","into_any","into_any_rc","inverse_point","is_equal","is_equal_point","is_in_range","is_neutral_point","is_zero","key_schedule","lc","lc_gate","logic_and","logic_and_all","logic_neg","logic_or","logic_or_gate","mod_add","mod_add_constant","mod_add_vec","mod_mul","mod_mul_constant","mod_negate","msm","msm_with_var_scalar_length","mul","mul_add","mul_add_gate","mul_constant","mul_gate","neutral_point_variable","new_turbo_plonk","new_ultra_plonk","non_native_linear_gen","non_native_power_11_gate","non_native_power_11_gen","non_native_power_5_gen","non_zero_gate","num_gates","num_inputs","num_range_blocks","num_vars","num_wire_types","on_curve_gate","one","pad_gate","point_equal_gate","point_witness","power_11_gate","power_11_gen","prp","prp","prp_with_round_keys","public_input","quad_poly_gate","range_bit_len","range_gate","range_size","rescue_full_state_keyed_sponge_no_padding","rescue_full_state_keyed_sponge_no_padding","rescue_permutation","rescue_permutation","rescue_sponge_no_padding","rescue_sponge_no_padding","rescue_sponge_with_padding","rescue_sponge_with_padding","set_variable_public","srs_size","sub","sub_gate","sum","support_lookup","to_owned","truncate","truncate_gate","try_from","try_into","type_id","unpack","variable_base_binary_scalar_mul","variable_base_scalar_mul","vzip","witness","witness_mut","zero","ecc","rescue","transcript","ultraplonk","BETA","BETA","MultiScalarMultiplicationCircuit","NEG_ALPHA","NEG_ALPHA","Point","PointVariable","S","S","SWToTEConParam","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","get_x","get_x","get_y","get_y","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","inverse","msm","msm_with_var_scalar_length","ne","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RescueGadget","RescueNonNativeGadget","RescueNonNativeStateVar","RescueStateVar","array","array_mut","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_rescue_state_variable","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","key_schedule","prp","prp","prp_with_round_keys","rescue_full_state_keyed_sponge_no_padding","rescue_full_state_keyed_sponge_no_padding","rescue_permutation","rescue_permutation","rescue_sponge_no_padding","rescue_sponge_no_padding","rescue_sponge_with_padding","rescue_sponge_with_padding","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RescueTranscriptVar","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","vzip","mod_arith","plonk_verifier","FpElem","FpElemVar","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","components","convert_to_var","default","default","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","eq","eq","field_elem","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","ne","ne","new","new_from_field_element","new_from_fp_elem","new_unchecked","one","param_m","param_m","to_owned","to_owned","try_from","try_from","try_into","try_into","two_power_m","two_power_m","type_id","type_id","vzip","vzip","witness","witness_fp_elem","zero","BatchProofVar","VerifyingKeyVar","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","ne","ne","new","partial_verify_circuit","to_owned","to_owned","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AdditionGate","BoolGate","ConstantAdditionGate","ConstantGate","ConstantMultiplicationGate","EqualityGate","FifthRootGate","Gate","GateClone","IoGate","MultiplicationGate","PaddingGate","SubtractionGate","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast_mut","downcast_rc","downcast_ref","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is","name","name","name","name","name","name","name","name","name","name","name","name","q_c","q_c","q_c","q_ecc","q_hash","q_hash","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lookup","q_mul","q_mul","q_mul","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","GATE_WIDTH","KECCAK256_STATE_SIZE","CircuitError","CircuitError","DivisionError","DomainCreationError","FieldAlgebraError","GateCheckFailure","IndexError","IndexError","IndexTooLarge","InternalError","InvalidParameters","IoError","IteratorOutOfRange","LookupUnsupported","ModifyFinalizedCircuit","NonNativeFieldOverflow","NotSupported","ParameterError","ParameterError","PcsError","PlonkError","PubInputLenMismatch","PublicInputsDoNotMatch","RescueError","SerializationError","SnarkError","SnarkError","SnarkLookupUnsupported","UnfinalizedCircuit","UnsupportedCurve","VarIndexOutOfBound","WrongPlonkType","WrongProof","WrongQuotientPolyDegree","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","1","PlonkKzgSnark","Proof","ProvingKey","Snark","VerifyingKey","as_any","as_any_mut","batch_arg","batch_prove","batch_verify","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","new","preprocess","prove","prove","structs","try_from","try_into","type_id","universal_setup","verify","verify","verify_batch_proof","vzip","BatchArgument","Instance","aggregate_verify_keys","as_any","as_any","as_any_mut","as_any_mut","batch_prove","borrow","borrow","borrow_mut","borrow_mut","build_batch_proof_and_vks_for_test","circuit_mut_ref","clone","clone_into","decide","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","partial_verify","setup_instance","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_key_ref","vzip","vzip","BatchProof","OpenKey","PlookupEvaluations","PlookupProof","PlookupProvingKey","PlookupVerifyingKey","Proof","ProofEvaluations","ProvingKey","UniversalSrs","VerifyingKey","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","convert_te_coordinates_to_scalars","create_variables","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy","dummy","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","len","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","open_key","powers_of_g_ref","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","vk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","PlonkTranscript","RescueTranscript","SolidityTranscript","StandardTranscript","append_challenge","append_challenge","append_commitment","append_commitment","append_commitments","append_message","append_message","append_message","append_message","append_plookup_evaluations","append_plookup_evaluations","append_proof_evaluations","append_proof_evaluations","append_vk_and_pub_input","append_vk_and_pub_input","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_and_append_challenge","get_and_append_challenge","get_and_append_challenge","get_and_append_challenge","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["jf_plonk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit::basic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit::customized","","","","jf_plonk::circuit::customized::ecc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit::customized::rescue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit::customized::transcript","","","","","","","","","","","","","","","","","","jf_plonk::circuit::customized::ultraplonk","","jf_plonk::circuit::customized::ultraplonk::mod_arith","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit::customized::ultraplonk::plonk_verifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::circuit::gatesjf_plonk::constants","","jf_plonk::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::errors::CircuitError","","","","","","","","","","jf_plonk::errors::PlonkError","","","","","","","jf_plonk::errors::SnarkError","","","jf_plonk::proof_system","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::proof_system::batch_arg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_plonk::proof_system::structsjf_plonk::transcript","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Enum for each type of mergeable circuit. We can only merge …","Enum for each type of Plonk scheme.","TurboPlonk","First type","Second type","TurboPlonk that supports Plookup","","","","","","","","","Interfaces for Plonk-based constraint systems","","","","","Crate wide constants.","","","","","","","","","Error module.","","","","","","","","","","","","","","","","","","","Interfaces for Plonk-based proof systems","","","This module implements three different types of …","","","","","","","","","An interface that transforms Plonk circuits to polynomial …","An interface for Plonk constraint systems.","An index to a gate in circuit.","An index to one of the witness values.","An index to the type of gate wires. There are 4 different …","Obtain a variable representing an addition. Return the …","Constrain variable <code>c</code> to the addition of <code>a</code> and <code>b</code>. Return …","Basic instantiations of Plonk-based constraint systems","Constrain a variable to a bool. Return error if the input …","Check circuit satisfiability against a public input.","Compute and return extended permutation polynomials. …","Compute and return the polynomial that interpolates the …","Compute and return the product polynomial for Plookup …","Compute the sorted concatenation of the (merged) lookup …","Compute and return the combined lookup table vector given …","Compute and return the product polynomial for permutation …","Compute and return the public input polynomial. Return an …","Plookup-related methods Return default errors if the …","Compute and return selector polynomials. Return an error …","Compute and return the list of wiring witness polynomials. …","Common gates that should be implemented in any constraint …","Add a bool variable to the circuit; return the index of …","Add a constant variable to the circuit; return the index …","Add a public input variable; return the index of the …","Add a variable to the circuit; return the index of the …","Customized gates and gadgets for rescue hash related, …","Constrain two variables to have the same value. Return …","Get the size of the evaluation domain for arithmetization …","Implementations of various Gates.","Obtain a variable representing a multiplication. Return …","Constrain variable <code>c</code> to the multiplication of <code>a</code> and <code>b</code>. …","The number of constraints.","The number of public input variables.","The number of variables.","The number of wire types of the circuit. E.g., UltraPlonk …","Return a default variable with value one.","Pad the circuit with n dummy gates","The list of public input values.","Set a variable to a public variable","The required SRS size for the circuit.","Obtain a variable representing a subtraction. Return the …","Constrain variable <code>c</code> to the subtraction of <code>a</code> and <code>b</code>. Return …","Plookup-related methods. Return true if the circuit …","Return the witness value of variable <code>idx</code>. Return error if …","Return a default variable with value zero.","A specific Plonk circuit instantiation.","","Obtains a variable representing an addition with a …","","Aggregate verification keys","","","","","","","Checks if a variable is strictly less than the number of …","Check if a list of variables are strictly less than the …","","","","","","","","","","","","","Obtain a variable that equals <code>x_0</code> if <code>b</code> is zero, or <code>x_1</code> if <code>b</code>…","","Add a new EC point (as a constant) to the circuit","","Add a new EC point (as witness) to the circuit","Add a new EC point (as public input) to the circuit","","","Create a table with keys/values [table_id, …, table_id + …","","","","","","Obtain a variable to the point addition result of <code>point_a</code> …","Assuming values represented by <code>a</code> is boolean. Constrain <code>a</code> …","Assuming values represented by <code>a</code> is boolean. Constrain <code>a</code> …","","","Finalize the setup of the circuit before arithmetization.","Finalize the setup of a mergeable circuit. Two circuits …","Obtain the fixed-based scalar multiplication result of …","","","Arithmetic gates","Perform GLV multiplication in circuit (which costs a few …","","Insert a general (algebraic) gate","","","","Inverse a point variable","Obtain a bool variable representing whether two input …","Obtain a bool variable representing whether two point …","Return a boolean variable indicating whether variable <code>a</code> is …","Obtain a boolean variable indicating whether a point is …","Obtain a bool variable representing whether input variable …","","Obtain a variable representing a linear combination. …","Constrain a linear combination gate: q1 * a + q2 * b + q3 …","Assuming values represented by <code>a</code> and <code>b</code> are boolean, obtain …","Given a list of boolean variables, obtain a variable …","Assuming value represented by <code>a</code> is boolean, obtain a …","Assuming values represented by <code>a</code> and <code>b</code> are boolean, obtain …","Logic gates Constrain that <code>a</code> is true or <code>b</code> is true. Return …","Modular addition gate: Given Fp elements x, y and modulus …","Modular addition gate: Given input x: Fp element variable, …","Modular addition gate: Given Fp elements &amp;[x] and modulus …","Modular multiplication gate: Given Fp elements x, y and …","Modular multiplication gate: Given input x: Fp element …","Negate an FpElemVar mod p where p is a public variable …","","","","Obtain a variable representing <code>q12 * a * b + q34 * c * d</code>, …","Constrain a mul-addition gate: q_muls[0] * wires[0] *  …","Obtains a variable representing a multiplication with a …","","Return the point variable for the infinity point in the TE …","Construct a new TurboPlonk circuit.","Construct a new UltraPlonk circuit.","Input vector x and y, and a constant c, generate a …","generate a non-native circuit for the statement x^11 = y","generate a non-native circuit for the statement x^11 = y","generate a non-native circuit for the statement x^5 = y","Constrain a variable to be non-zero. Return error if the …","","","The number of range blocks, i.e., the minimal integer such …","","","Constrain a point to be on certain curve, namely its …","Default one variable","","Constrain two point variables to be the same. Return error …","Return the witness point for the circuit","Constraint a variable to be the 11th power of another …","Return a variable to be the 11th power of the input …","","","Return the variable corresponding to the output of the of …","","Arithmetic gates","The bit length of UltraPlonk range gates.","Constrain a variable to be within the [0, 2^<code>bit_len</code>) range …","The range size of UltraPlonk range gates.","","","","","","","","","","","","","Obtain a variable representing the sum of a list of …","","","Obtain the truncation of the input. Constrain that the …","Truncation gate. Constrain that b == a modulo 2^bit_length.","","","","Obtain the <code>bit_len</code>-long binary representation of variable <code>a</code>","Obtain a variable of the result of a variable base scalar …","Obtain a variable of the result of a variable base scalar …","","","Change the value of a variable. Only used for testing.","Default zero variable","Elliptic curve related gates and gadgets. Including both …","Rescue hash related gates and gadgets. Including both …","Implementing <em>native</em> circuit for rescue transcript","Implements ultra-plonk related circuits.","Parameter beta.","Parameter beta.","Compute the multi-scalar-multiplications in circuit.","Parameter 1/alpha.","Parameter 1/alpha.","An elliptic curve point in twisted Edwards affine form (x, …","Represent variable of an EC point.","Parameter S.","Parameter S.","This trait holds constants that are used for curve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the x coordinate of the point.","Get the variable representing the x coordinate of the …","Get the y coordinate of the point.","Get the variable representing the y coordinate of the …","","","","","","","","","","","The inverse point for the edward form.","Compute the multi-scalar-multiplications. Use pippenger …","Compute the multi-scalar-multiplications where each scalar …","","","","","","","","","","","","","Trait for rescue circuit over native field.","Trait for rescue circuit over non-native field.","Array of variables representing a Rescue state (4 field …","Array of variables representing a Rescue state (4 field …","Expose the state array.","Expose the mutable state array.","","","","","","","","","","","","","Create a variable representing a rescue state","","","","","","","","","","","","","","","","","","","","","","Return the round keys variables for the Rescue block cipher","Rescue based Pseudo Random Permutation (PRP)","Rescue based Pseudo Random Permutation (PRP)","Return the variable corresponding to the output of the of …","Full-State-Keyed-Sponge with a single output","Full-State-Keyed-Sponge with a single output","Given an input state st_0 and an output state st_1, ensure …","Given an input state st_0 and an output state st_1, ensure …","Sponge-based hashes from Rescue permutations","Sponge-based hashes from Rescue permutations","Sponge-based hashes from Rescue permutations","Sponge-based hashes from Rescue permutations","","","","","","","","","","","Struct of variables representing a Rescue transcript type, …","","","","","","","","","","","","","","","","","","Modular arithmetic gates","Circuits for Plonk verifiers.","A field element represented by: p = p.0 + 2^m * p.1. The …","Represent variable of an Fp element: elem = witness[vars.0]…","","","","","","","","","","","","","Expose the field element components","Expose the field element variables components","Convert into a single variable with value …","","","","","","","","","Enforce self == other.","","","Convert into a single field element.","","","","","","","","","","","","","","","","","Create a FpElem struct from field element <code>p</code> and split …","Create an FpElemVar from field element and split parameter …","Create an FpElemVar from FpElem form field element . This …","Create an FpElemVar from Fp element variable <code>var</code> and split …","An FpElemVar that represents a 1","Expose the m parameter","Expose the m parameter","","","","","","","Expose 2^m parameter","Expose 2^m parameter","","","","","Get the witness from the variables","Get the witness in FpElem form from the variables","An FpElemVar that represents a 0","Represent variables of an aggregated SNARK proof that …","Represent variable of a Plonk verifying key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a variable for a Plonk verifying key.","Circuit for partially verifying a batched proof without …","","","Convert to a list of variables.","","","","","","","","","An addition gate","A boolean gate, selectors identical to <code>MultiplicationGate</code>, …","Adding a variable by a constant.","A constant gate","A mul constant gate. Multiply the first variable with the …","An equality gate, selectors identical to <code>SubtractionGate</code>, …","Gate for checking a value is the fifth root of another","Describes a gate with getter for all selectors …","Clone a Gate.","An I/O gate for public inputs","A multiplication gate","A empty gate for circuit padding","A subtraction gate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clone a Gate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a boxed object from a boxed trait object if the …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type …","Get the name of a gate.","","","","","","","","","","","","Constant selector.","","","The selector for elliptic curve operation.","Selectors for Rescue hashes.","","Selectors for linear combination.","","","","","","UltraPlonk lookup selector.","Selectors for multiplication.","","","Output wire selector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of input wires.","Keccak-256 have a 64 byte state size to accommodate two …","A <code>enum</code> specifying the possible failure modes of the …","An error in the Plonk circuit: {0}","Divided by zero field element","Failed to create domain","Algebra over field failed: {0}","The {0}-th gate failed: {1}","Failed to get array value by index","Failed to get array value by index","The index is too large for the universal public parameters","‼ ️Internal error! Please report to Crypto Team …","Invalid parameters","An error during IO: {0}","Iterator out of range","The circuit does not support lookup","Attempt to modify the finalized circuit","Non-native field overflow","Feature not supported: {0}","Invalid parameters: {0}","Invalid parameters: {0}","An error in the underlying polynomial commitment: {0}","A <code>enum</code> specifying the possible failure modes of the Plonk.","Public input length {0} doesn’t match num_inputs = {1}.","Public inputs for partial verification circuit do not match","Rescue Error","An error during (de)serialization","A <code>enum</code> specifying the possible failure modes of the …","An error in the Plonk SNARK logic: {0}","The SNARK does not support lookup","The circuit is not finalized before doing arithmetization","Unexpected field for elliptic curve operation, currently …","Variable index {0} is larger than the bound {1}.","The circuit has wrong Plonk type","Plonk proof verification failed due to wrong proof","The quotient polynomial has wrong degree: {0}, expected: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Plonk instantiated with KZG PCS","The SNARK proof computed by the prover.","The parameters required by the prover to compute a proof …","An interface for SNARKs.","The parameters required by the verifier to validate a …","","","An argument system that proves/verifies multiple instances …","Generate an aggregated Plonk proof for multiple instances.","Batch verify multiple SNARK proofs (w.r.t. different …","","","","","","","","","","","","A new Plonk KZG SNARK","Input a circuit and the SRS, precompute the proving key …","Compute a SNARK proof of a circuit <code>circuit</code>, using the …","Compute a Plonk proof. Refer to Sec 8.4 of …","Data structures used in Plonk proof systems","","","","Generate the universal SRS for the argument system. This …","Verify a SNARK proof <code>proof</code> of the circuit <code>circuit</code>, with …","","Verify a single aggregated Plonk proof.","","A batching argument.","A circuit instance that consists of the corresponding …","Aggregate verification keys","","","","","Prove satisfiability of multiple instances in a batch.","","","","","Create <code>num_instances</code> type A/B instance verifying keys and …","Get mutable circuit by reference.","","","Perform the final pairing to verify the proof.","","","","","","","","","","","","","","","","","","","Partially verify a batched proof without performing the …","Setup the circuit and the proving key for a (mergeable) …","","","","","","","","Get verification key by reference.","","","An aggregated SNARK proof that batchly proving multiple …","Key for verifying PCS opening proof (alias to …","A struct that stores the polynomial evaluations in a …","A Plookup argument proof.","Preprocessed prover parameters used to compute Plookup …","Preprocessed verifier parameters used to verify Plookup …","A Plonk SNARK proof.","A struct that stores the polynomial evaluations in a Plonk …","Preprocessed prover parameters used to compute Plonk …","Universal Structured Reference String for PlonkKzgSnark","Preprocessed verifier parameters used to verify Plonk …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the group elements to a list of scalars that …","Create a <code>BatchProofVar</code> variable from a <code>BatchProof</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a dummy batch proof over <code>n</code> TurboPlonk instances.","Create a dummy TurboPlonk verification key for a circuit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check whether a BatchProof proves nothing.","The number of instances being proved in a batch proof.","","","","","","","","","","","KZG PCS opening key.","Expose powers of g via reference.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The verifying key. It is used by prover to initialize …","","","","","","","","","","","Defines transcript APIs.","Transcript with rescue hash function.","Transcript with <code>keccak256</code> hash function.","A wrapper of <code>merlin::Transcript</code>.","Append a challenge to the transcript. <code>_label</code> is omitted for","Append a challenge to the transcript.","Append a single commitment to the transcript. <code>_label</code> is …","Append a single commitment to the transcript.","Append a slice of commitments to the transcript.","Append the message to the transcript.","Append the message to the transcript. <code>_label</code> is omitted for","Append the message to the transcript. <code>_label</code> is omitted for","","","Append the plookup evaluation to the transcript.","","Append a proof evaluation to the transcript.","","Append the verification key and the public input to the …","","","","","","","","","","","","","","","","","","","","","","","","","Generate the challenge for the current transcript, and …","Generate the challenge for the current transcript, and …","Generate the challenge for the current transcript, and …","","","","","","","","","","","","","","","","","Create a new plonk transcript.","Create a new plonk transcript. <code>_label</code> is omitted for …","Create a new plonk transcript. <code>label</code> is omitted for …","create a new plonk transcript","","","","","","","","","","","",""],"if":[null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],null,[[],["plonktype",4]],[[],["mergeablecircuittype",4]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["plonktype",4]],["bool",15]],[[["mergeablecircuittype",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],null,[[["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["vec",3,[["densepolynomial",3]]],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["vec",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["vec",3,[["densepolynomial",3]]],["plonkerror",4]]]],[[],["result",4,[["vec",3,[["densepolynomial",3]]],["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[["bool",15]],["result",4,[["variable",6],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],null,[[["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["usize",15],["plonkerror",4]]]],null,[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["variable",6]],[[["usize",15]]],[[],["result",4,[["vec",3],["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["usize",15],["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[],["bool",15]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[],["variable",6]],null,[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["vec",3,[["verifyingkeyvar",3]]],["plonkerror",4]]]],[[],["any",8]],[[],["any",8]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[]],[[]],[[],["result",4,[["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["plonkcircuit",3]],[[]],[[],["result",4,[["vec",3,[["densepolynomial",3]]],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["vec",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["densepolynomial",3],["plonkerror",4]]]],[[],["result",4,[["vec",3,[["densepolynomial",3]]],["plonkerror",4]]]],[[],["result",4,[["vec",3,[["densepolynomial",3]]],["plonkerror",4]]]],[[["variable",6],["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[["point",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[["point",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["point",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[["rescuevector",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["pointvariable",3],["pointvariable",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["usize",15],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[["mergeablecircuittype",4]],["result",4,[["plonkerror",4]]]],[[["variable",6],["groupaffine",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["formatter",3]],["result",6]],[[]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["pointvariable",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[],["usize",15]],[[["box",3,[["gate",8]]]],["result",4,[["plonkerror",4]]]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["pointvariable",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["pointvariable",3],["pointvariable",3]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["usize",15]],["result",4,[["variable",6],["plonkerror",4]]]],[[["pointvariable",3]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["rescuematrix",3],["rescuestatevar",3],["prp",3]],["result",4,[["vec",3,[["rescuestatevar",3]]],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[["fpelemvar",3],["fpelemvar",3],["fpelem",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["fpelemvar",3],["fpelem",3],["fpelem",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["fpelem",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["fpelemvar",3],["fpelemvar",3],["fpelem",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["fpelemvar",3],["fpelem",3],["fpelem",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["fpelemvar",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["usize",15]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[],["pointvariable",3]],[[]],[[["usize",15]]],[[["fpelem",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["fpelemvar",3],["fpelemvar",3]],["result",4,[["plonkerror",4]]]],[[["fpelemvar",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["fpelemvar",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["result",4,[["usize",15],["plonkerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[["pointvariable",3]],["result",4,[["plonkerror",4]]]],[[],["variable",6]],[[["usize",15]]],[[["pointvariable",3],["pointvariable",3]],["result",4,[["plonkerror",4]]]],[[["pointvariable",3]],["result",4,[["point",3],["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["rescuestatevar",3],["rescuestatevar",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[["rescuenonnativestatevar",3],["rescuenonnativestatevar",3]],["result",4,[["rescuenonnativestatevar",3],["plonkerror",4]]]],[[["rescuestatevar",3],["rescuematrix",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[],["result",4,[["vec",3],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["usize",15],["plonkerror",4]]]],[[["variable",6],["usize",15]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["usize",15],["plonkerror",4]]]],[[["fpelemvar",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["rescuestatevar",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[["rescuenonnativestatevar",3]],["result",4,[["rescuenonnativestatevar",3],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["variable",6]]],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["fpelemvar",3]]],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["fpelemvar",3]]],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["variable",6]]],["plonkerror",4]]]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["usize",15],["plonkerror",4]]]],[[["variable",6],["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6],["variable",6]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["variable",6],["plonkerror",4]]]],[[],["bool",15]],[[]],[[["variable",6],["usize",15]],["result",4,[["variable",6],["plonkerror",4]]]],[[["variable",6],["variable",6],["usize",15]],["result",4,[["plonkerror",4]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["variable",6],["usize",15]],["result",4,[["vec",3,[["variable",6]]],["plonkerror",4]]]],[[["pointvariable",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["variable",6],["pointvariable",3]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[]],[[["variable",6]],["result",4,[["plonkerror",4]]]],[[["variable",6]]],[[],["variable",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["point",3]],[[],["pointvariable",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["point",3]],["bool",15]],[[["pointvariable",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["swgroupaffine",3]]],[[["swaffine",3]]],[[["groupaffine",3]]],[[]],[[["groupprojective",3]]],[[]],[[]],[[],["variable",6]],[[]],[[],["variable",6]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["usize",15]],["result",4,[["pointvariable",3],["plonkerror",4]]]],[[["point",3]],["bool",15]],[[["pointvariable",3]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["rescuestatevar",3]],[[],["rescuenonnativestatevar",3]],[[]],[[]],[[["rescuevector",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rescuematrix",3],["rescuestatevar",3],["prp",3]],["result",4,[["vec",3,[["rescuestatevar",3]]],["plonkerror",4]]]],[[["rescuestatevar",3],["rescuestatevar",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[["rescuenonnativestatevar",3],["rescuenonnativestatevar",3]],["result",4,[["rescuenonnativestatevar",3],["plonkerror",4]]]],[[["rescuestatevar",3],["rescuematrix",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],[[["fpelemvar",3]],["result",4,[["fpelemvar",3],["plonkerror",4]]]],[[["rescuestatevar",3]],["result",4,[["rescuestatevar",3],["plonkerror",4]]]],[[["rescuenonnativestatevar",3]],["result",4,[["rescuenonnativestatevar",3],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["variable",6]]],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["fpelemvar",3]]],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["variable",6]]],["plonkerror",4]]]],[[["usize",15]],["result",4,[["vec",3,[["fpelemvar",3]]],["plonkerror",4]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["fpelem",3]],[[],["fpelemvar",3]],[[]],[[]],[[]],[[]],[[["plonkcircuit",3]],["result",4,[["variable",6],["plonkerror",4]]]],[[],["fpelem",3]],[[],["fpelemvar",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["plonkcircuit",3]],["result",4,[["plonkerror",4]]]],[[["fpelem",3]],["bool",15]],[[["fpelemvar",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["fpelem",3]],["bool",15]],[[["fpelemvar",3]],["bool",15]],[[["usize",15],["option",4]],["result",4,[["plonkerror",4]]]],[[["plonkcircuit",3],["usize",15],["option",4]],["result",4,[["plonkerror",4]]]],[[["plonkcircuit",3],["fpelem",3],["usize",15],["option",4]],["result",4,[["plonkerror",4]]]],[[["plonkcircuit",3],["variable",6],["usize",15],["option",4]],["result",4,[["plonkerror",4]]]],[[["plonkcircuit",3],["usize",15],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["plonkcircuit",3]],["result",4,[["plonkerror",4]]]],[[["plonkcircuit",3]],["result",4,[["fpelem",3],["plonkerror",4]]]],[[["plonkcircuit",3],["usize",15],["option",4]]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["batchproofvar",3]],[[],["verifyingkeyvar",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["batchproofvar",3]],["bool",15]],[[["verifyingkeyvar",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["batchproofvar",3]],["bool",15]],[[["verifyingkeyvar",3]],["bool",15]],[[["plonkcircuit",3],["verifyingkey",3]],["result",4,[["plonkerror",4]]]],[[["plonkcircuit",3],["point",3],["point",3],["batchproofvar",3],["variable",6]],["result",4,[["plonkerror",4]]]],[[]],[[]],[[],["vec",3,[["variable",6]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["paddinggate",3]],[[],["constantgate",3]],[[],["additiongate",3]],[[],["constantadditiongate",3]],[[],["subtractiongate",3]],[[],["multiplicationgate",3]],[[],["constantmultiplicationgate",3]],[[],["boolgate",3]],[[],["equalitygate",3]],[[],["iogate",3]],[[],["fifthrootgate",3]],[[],["box",3,[["gate",8]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[],["box",3,[["gate",8],["global",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["box",3]],["result",4,[["box",3,[["gate",8]]],["box",3]]]],[[],["option",4]],[[["rc",3]],["result",4,[["rc",3,[["gate",8]]],["rc",3]]]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]]],[[["circuiterror",4]]],[[["snarkerror",4]]],[[]],[[["rescueerror",4]]],[[["serializationerror",4]]],[[["error",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],null,[[],["result",4,[["batchproof",3],["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[["universalsrs",3]],["result",4,[["plonkerror",4]]]],[[["option",4,[["vec",3,[["u8",15]]]]]],["result",4,[["plonkerror",4]]]],[[["option",4,[["vec",3,[["u8",15]]]]]],["result",4,[["plonkerror",4]]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],["result",4,[["universalsrs",3],["plonkerror",4]]]],[[["option",4,[["vec",3,[["u8",15]]]]]],["result",4,[["plonkerror",4]]]],[[["option",4,[["vec",3,[["u8",15]]]]]],["result",4,[["plonkerror",4]]]],[[["batchproof",3]],["result",4,[["plonkerror",4]]]],[[]],null,null,[[],["result",4,[["vec",3,[["verifyingkey",3]]],["plonkerror",4]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["result",4,[["batchproof",3],["plonkerror",4]]]],[[]],[[]],[[]],[[]],[[["universalsrs",3],["usize",15]],["result",4,[["plonkerror",4]]]],[[],["plonkcircuit",3]],[[],["instance",3]],[[]],[[["openkey",6]],["result",4,[["bool",15],["plonkerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["batchproof",3]],["result",4,[["plonkerror",4]]]],[[["universalsrs",3],["plonkcircuit",3],["mergeablecircuittype",4]],["result",4,[["instance",3],["plonkerror",4]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["verifyingkey",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["universalsrs",3]],[[],["proof",3]],[[],["plookupproof",3]],[[],["batchproof",3]],[[],["proofevaluations",3]],[[],["plookupevaluations",3]],[[],["provingkey",3]],[[],["plookupprovingkey",3]],[[],["verifyingkey",3]],[[],["plookupverifyingkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[["plonkcircuit",3],["usize",15],["option",4]],["result",4,[["batchproofvar",3],["plonkerror",4]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["universalsrs",3]],["bool",15]],[[["proof",3]],["bool",15]],[[["plookupproof",3]],["bool",15]],[[["batchproof",3]],["bool",15]],[[["proofevaluations",3]],["bool",15]],[[["plookupevaluations",3]],["bool",15]],[[["provingkey",3]],["bool",15]],[[["plookupprovingkey",3]],["bool",15]],[[["verifyingkey",3]],["bool",15]],[[["plookupverifyingkey",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["proof",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["bool",15]],[[],["usize",15]],[[["universalsrs",3]],["bool",15]],[[["proof",3]],["bool",15]],[[["plookupproof",3]],["bool",15]],[[["batchproof",3]],["bool",15]],[[["proofevaluations",3]],["bool",15]],[[["plookupevaluations",3]],["bool",15]],[[["provingkey",3]],["bool",15]],[[["plookupprovingkey",3]],["bool",15]],[[["verifyingkey",3]],["bool",15]],[[["plookupverifyingkey",3]],["bool",15]],null,[[]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[["taggedblob",3]],["result",4]],[[],["result",4]],[[["vec",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["taggedblob",3]],["result",4]],[[["vec",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[["commitment",3]],["result",4,[["plonkerror",4]]]],[[["commitment",3]],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[["plookupevaluations",3]],["result",4,[["plonkerror",4]]]],[[["plookupevaluations",3]],["result",4,[["plonkerror",4]]]],[[["proofevaluations",3]],["result",4,[["plonkerror",4]]]],[[["proofevaluations",3]],["result",4,[["plonkerror",4]]]],[[["verifyingkey",3]],["result",4,[["plonkerror",4]]]],[[["verifyingkey",3]],["result",4,[["plonkerror",4]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["result",4,[["plonkerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[4,"PlonkType"],[4,"MergeableCircuitType"],[8,"Circuit"],[8,"Arithmetization"],[3,"PlonkCircuit"],[8,"SWToTEConParam"],[3,"Point"],[3,"PointVariable"],[8,"MultiScalarMultiplicationCircuit"],[3,"RescueStateVar"],[3,"RescueNonNativeStateVar"],[8,"RescueGadget"],[8,"RescueNonNativeGadget"],[3,"RescueTranscriptVar"],[3,"FpElem"],[3,"FpElemVar"],[3,"BatchProofVar"],[3,"VerifyingKeyVar"],[3,"PaddingGate"],[3,"ConstantGate"],[3,"AdditionGate"],[3,"ConstantAdditionGate"],[3,"SubtractionGate"],[3,"MultiplicationGate"],[3,"ConstantMultiplicationGate"],[3,"BoolGate"],[3,"EqualityGate"],[3,"IoGate"],[3,"FifthRootGate"],[8,"GateClone"],[8,"Gate"],[4,"PlonkError"],[4,"CircuitError"],[4,"SnarkError"],[13,"VarIndexOutOfBound"],[13,"PubInputLenMismatch"],[13,"GateCheckFailure"],[13,"ParameterError"],[13,"FieldAlgebraError"],[13,"NotSupported"],[13,"InternalError"],[13,"SnarkError"],[13,"PcsError"],[13,"CircuitError"],[13,"IoError"],[13,"SerializationError"],[13,"RescueError"],[13,"InvalidParameters"],[13,"ParameterError"],[13,"WrongQuotientPolyDegree"],[8,"Snark"],[3,"PlonkKzgSnark"],[3,"BatchArgument"],[3,"Instance"],[3,"UniversalSrs"],[3,"Proof"],[3,"PlookupProof"],[3,"BatchProof"],[3,"ProofEvaluations"],[3,"PlookupEvaluations"],[3,"ProvingKey"],[3,"PlookupProvingKey"],[3,"VerifyingKey"],[3,"PlookupVerifyingKey"],[3,"RescueTranscript"],[8,"PlonkTranscript"],[3,"SolidityTranscript"],[3,"StandardTranscript"]]},\
"jf_primitives":{"doc":"Crate implementates various cryptography primitives, as …","t":[0,0,0,0,0,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,8,10,12,8,3,3,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,3,3,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,8,10,12,12,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,10,10,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,13,13,3,13,4,3,4,3,3,3,3,3,13,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["aead","circuit","commitment","constants","elgamal","errors","merkle_tree","prf","schnorr_dsa","Ciphertext","EncKey","KeyPair","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decrypt","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_uncompressed","drop","drop","drop","enc_key","enc_key_ref","encrypt","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","generate","get_hash","get_hash","hash","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","ne","serialize","serialize","serialize","serialize_unchecked","serialize_uncompressed","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uncompressed_size","vzip","vzip","vzip","commitment","elgamal","merkle_tree","prf","schnorr_dsa","CommitmentGadget","commit","0","ElGamalEncryptionGadget","ElGamalHybridCtxtVars","EncKeyVars","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","create_ciphertext_variable","create_enc_key_variable","deref","deref","deref_mut","deref_mut","drop","drop","elgamal_encrypt","ephemeral","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","symm_ctxts","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AccElemVars","AccMemberWitnessVar","MerkleNodeVars","MerklePathVars","MerkleTreeGadget","add_merkle_path_variable","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compute_merkle_root","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","elem","fmt","fmt","fmt","from","from","from","from","gen_merkle_path_for_test","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_left_child","is_right_child","merkle_path","new","nodes","sibling1","sibling2","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uid","uid","vzip","vzip","vzip","vzip","PrfGadget","eval_prf","0","R","SignatureGadget","SignatureVar","VerKeyVar","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_signature_variable","create_signature_vk_variable","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_valid_signature","s","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_sig_core","verify_signature","vzip","vzip","Commitment","as_any","as_any_mut","borrow","borrow_mut","commit","default","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","new","try_from","try_into","type_id","verify","vzip","Ciphertext","EncKey","KeyPair","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decrypt","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deterministic_encrypt","drop","drop","drop","enc_key","enc_key_ref","encrypt","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_scalars","generate","get_hash","get_hash","hash","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","ne","rand","serialize","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_scalars","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uncompressed_size","uncompressed_size","uncompressed_size","vzip","vzip","vzip","zeroize","DeserializationError","FailedDecryption","InconsistentStructureError","InternalError","ParameterError","PrimitivesError","RescueError","VerificationError","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","AccMemberWitness","Empty","EmptyLeaf","FilledMTBuilder","Left","LookupResult","MerkleCommitment","MerkleFrontier","MerkleLeaf","MerkleLeafProof","MerklePath","MerklePathNode","MerkleTree","Middle","NodePos","NodeValue","NotInMemory","Ok","Proof","Right","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_pruned","check_proof","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commitment","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy","empty_node_value","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expect_ok","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_existing","from_frontier","from_scalar","from_str","from_str","frontier","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_leaf","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_frontier_and_commitment","leaf","lookup_from_tree","map","merkle_path","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","nodes","non_empty","num_leaves","num_leaves","path","pos","push","push","rand","remember","restore_from_frontier","root","root_value","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","sibling1","sibling2","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","1","0","height","PRF","PrfKey","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize_unchecked","deserialize_uncompressed","drop","drop","drop","eq","eval","fmt","from","from","from","from","get_hash","hash","init","init","input_len","internal","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","key_gen","ne","new","output_len","serialize","serialize_unchecked","serialize_uncompressed","serialized_size","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uncompressed_size","vzip","vzip","zeroize","KeyPair","Signature","VerKey","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","from_str","from_str","generate","generate_with_sign_key","get_hash","get_hash","hash","hash","init","init","init","internal","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","ne","randomize_with","randomize_with","serialize","serialize","serialize","serialize","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","serialized_size","sign","sign_key_internal","tag","tag","tag","to_affine","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uncompressed_size","uncompressed_size","uncompressed_size","ver_key","ver_key_ref","verify","vzip","vzip","vzip"],"q":["jf_primitives","","","","","","","","","jf_primitives::aead","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::circuit","","","","","jf_primitives::circuit::commitment","","jf_primitives::circuit::elgamal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::circuit::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::circuit::prf","","jf_primitives::circuit::schnorr_dsa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::commitment","","","","","","","","","","","","","","","","","","","","","","jf_primitives::elgamal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::errors::PrimitivesError","","","","","","","jf_primitives::merkle_treejf_primitives::merkle_tree::LookupResult","","jf_primitives::merkle_tree::MerkleFrontier","","jf_primitives::prf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_primitives::schnorr_dsa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wraps crypto_box’s AEAD encryption scheme.","Circuit implementation of various crypto primitives.","Implements a rescue hash based commitment scheme.","Constants for curve specific parameters.","Implements the ElGamal encryption scheme.","Error types.","Implementation of the Merkle tree data structure.","This module implements a pseudo random function that is …","This module implements the Schnorr signature over the …","The ciphertext produced by AEAD encryption","Public/encryption key for AEAD","Keypair for Authenticated Encryption with Associated Data","","","","","","","","","","","","","","","","","","","Decrypt a ciphertext with authenticated associated data …","","","","","","","","","","","","","","","","","Getter for the public/encryption key","Getter for reference to the public/encryption key","Encrypt a message with authenticated associated data which …","","","","","","","","","","","Randomly sample a key pair.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Circuit implementation of the commitment scheme.","Circuit implementation of the ElGamal scheme.","Circuit implementation of a Merkle tree.","Circuit implementation of a PRF.","Circuit implementation of a Schnorr signature scheme.","Circuit implementation of the commitment scheme.","Commitment function.","","Circuit implementation of the ElGamal scheme.","Variables holding a ciphertext.","Variables holding an encryption key.","","","","","","","","","Helper function to create a ciphertext variable","Helper function to create encryption key variables struct","","","","","","","Compute the gadget that check a correct Elgamal encryption","r*G component","","","","","","","","","","","","","","","Ciphertext under hybrid encryption.","","","","","","","","","Circuit variables for an accumulated element","Circuit variables for membership proof.","Circuit variables for a Merkle node","Circuit variables for a Merkle authentication path","Circuit implementation of a Merkle tree.","Wrapper around Circuit.constrain_merkle_path. Adds and …","","","","","","","","","","","","","","","","","Computes the merkle root based on some element placed at a …","","","","","","","","","","","","","","","","","","","","","Create a merkle path for position <code>uid</code> and element <code>comm</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Circuit implementation of a PRF.","PRF many to one","","R component.","Plonk circuit gadget for EdDSA signatures.","Signature variable","Signature verification key variable","","","","","","","","","","","","","Create a signature variable from a signature <code>sig</code>.","Create a signature verification key variable from a key <code>vk</code>.","","","","","","","","","","","","","","","","","","","","","Obtain the result bit of a signature verification.","s component.","","","","","","","","","Compute the two point variables to be compared in the …","Signature verification circuit","","","Commitment instance for user defined input size (in scalar …","","","","","Commits to <code>input</code> slice using blinding <code>blind</code>. Return …","","","","","","","","","","","Create a new commitment instance for inputs of length …","","","","Verifies <code>commitment</code> against <code>input</code> and <code>blind</code>. Returns …","","Public encryption cipher text","Encryption key for encryption scheme","KeyPair structure for encryption scheme","","","","","","","","","","","","","","","","","","","Decryption function","","","","","","","","","","","","","","","","","Public key encryption function with pre-sampled randomness","","","","Get encryption key","Get encryption key reference","Public key encryption function","","","","","","","","","","Reconstruct the ciphertext from a list of scalars.","Key generation algorithm for public key encryption scheme","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flatten out the ciphertext into a vector of scalars","","","","","","","","","","","","","","","","","Deserialization failed: {0}","Decryption failed: {0}","Inconsistent Structure error, {0}","‼ ️Internal error! Please report to Crypto Team …","Bad parameter in function call, {0}","A <code>enum</code> specifying the possible failure modes of the …","Rescue Error: {0}","Unsuccessful verification for proof or signature, {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The proof of membership in an accumulator (Merkle tree) …","Without proof.","The index is outside the occupied range in the tree","","Left.","The result of querying at an index in the tree","A wrapper of the merkle root, together with the tree …","A wrapper of the merkle membership proof.","Data struct for a merkle leaf.","Inclusive proof of a merkle leaf.","An authentication path of a ternary Merkle tree. While …","A 3-ary Merkle tree node.","Data struct of a merkle tree.","Middle.","Enum for identifying a position of a node (left, middle or …","Represents the value for a node in the merkle tree.","The index is valid but we do not have the leaf in memory","The value at the given index, and a proof of validity","With proof.","Right.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify an element is a leaf of a Merkle tree given the …","","","","","","","","","","","","","","","","","","","","","","","get the collected commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a fake proof/witness for a dummy element","Empty node.","","","","","","","","","","","","Assert the lookup result is Ok.","","","","","","","","","","","","","","Trim the leaf at position <code>i</code> from memory, if present. Will …","","","","","","","","","","","","","","","","","","Convert a scalar field element into anode.","","","get the frontier","","","","","","","","","","","","Returns the leaf value given a position","","","","","","","","","","","","get the height","Height of the tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The leaf node.","Create a proof/witness for an accumulated ARC in the …","FIXME: Not sure what this function does :-(.","","","","","","","","","","","","","Creates a new node on some Merkle path given the position …","Create a Merkle path from the list of nodes","Input a leaf and the path, build a proof.","Create a new Merkle with a specific height","Nodes along the path.","If the merkle frontier is empty or not.","Get the number of leaves","#leaves of the tree.","The path.","Position.","","Insert a new value at the leftmost available slot","","“Re-insert” a leaf into the tree using its proof. …","Recreates a pruned Merkle from the rightmost leaf and …","","Root of the tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","First sibling.","Second sibling.","","","","","","","","","","","","","","Convert a node into a scalar field element.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Height of the tree.","Pseudo-random function (PRF) instance for user defined …","Key data-type of Pseudo-random function consisting on a …","","","","","","","","","","","","","","","","","","","","","","","Compute output of pseudo-random function for a given key …","","","","","","","","","","Length of the input.","return the internal field value","","","","","","","","","Key generation for Pseudo-random function","","Pseudo-random function instance constructor <code>input_len</code>: …","Length of the output.","","","","","","","","","","","","","","","","Signature secret key pair used to sign messages","The signature of Schnorr signature scheme","Signature public verification key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Key-pair generation algorithm","Key pair generation using a particular sign key secret <code>sk</code>","","","","","","","","Get the internal of verifying key, namely a curve Point","","","","","","","","","","","","","","Return a randomized verification key.","Randomize the key pair with the <code>randomizer</code>, return the …","","","","","","","","","","","","","","","","Signature function","Get the internal of the signing key, namely a …","","","","Convert the verification key into the affine form.","","","","","","","","","","","","","","","","","","","","","","Get the verification key","Get reference to verification key","Signature verification function","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,2,1,2,1,2,3,1,2,3,1,2,3,2,2,1,2,3,2,2,1,1,2,3,1,2,3,1,1,2,3,2,1,3,1,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,2,2,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,2,1,2,3,0,0,0,0,0,0,4,5,0,0,0,5,6,5,6,5,6,5,6,7,7,5,6,5,6,5,6,7,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,6,5,6,5,6,5,6,5,6,0,0,0,0,0,8,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,8,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,0,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,10,10,12,12,11,10,10,9,10,11,12,9,10,11,12,9,10,11,12,9,12,9,10,11,12,0,13,14,15,0,0,0,14,15,14,15,14,15,14,15,14,15,14,15,16,16,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,16,15,14,15,14,15,14,15,14,15,16,16,14,15,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,19,18,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,18,19,20,19,19,18,18,19,20,18,19,20,18,19,20,20,19,18,20,18,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,19,18,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,21,21,21,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,0,30,31,0,32,0,0,0,0,0,0,0,0,32,0,0,31,31,30,32,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,33,39,32,34,35,36,31,37,29,38,30,39,40,32,34,35,36,31,37,29,38,30,39,40,39,32,34,35,36,29,38,40,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,32,32,34,34,35,35,36,36,37,37,29,29,38,38,30,39,40,40,34,35,36,37,29,38,40,34,35,36,37,29,38,40,33,32,34,35,36,31,37,29,38,30,39,40,40,36,32,34,35,36,31,37,29,38,30,39,40,31,32,34,35,36,36,31,37,29,29,38,30,39,40,39,33,32,32,34,35,36,36,31,37,29,38,30,39,39,40,33,33,36,36,29,39,32,34,35,36,31,37,29,38,30,39,40,39,32,34,35,36,31,37,29,38,30,39,40,39,37,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,38,40,31,40,34,35,36,31,37,29,38,30,39,40,33,34,35,38,39,35,30,39,37,38,34,33,39,36,39,39,40,37,32,32,34,34,35,35,36,36,37,37,29,29,38,38,30,39,40,40,34,35,36,37,29,38,40,34,35,36,37,29,38,40,32,34,35,36,37,29,38,40,34,34,36,29,32,34,35,36,31,37,29,38,30,39,40,36,36,29,33,32,32,34,35,36,36,31,37,29,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,33,32,34,35,36,31,37,29,38,30,39,40,40,34,35,36,37,29,38,40,33,32,34,35,36,31,37,29,38,30,39,40,41,41,42,43,0,0,44,45,44,45,44,45,44,45,45,45,45,44,45,44,45,45,45,45,44,45,45,45,44,45,44,45,45,45,45,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,44,45,45,45,45,45,44,45,44,45,44,45,45,44,45,45,0,0,0,46,47,48,46,47,48,46,47,48,46,47,48,46,47,48,46,47,48,46,47,46,47,48,46,47,48,46,46,47,47,48,48,46,47,48,46,47,48,46,47,48,46,47,48,46,46,47,47,48,48,46,46,47,48,46,47,48,47,47,46,48,46,48,46,47,48,46,46,47,48,46,47,48,46,47,48,46,47,48,47,46,47,46,46,47,47,48,48,46,47,48,46,47,48,46,47,48,47,47,46,47,48,46,46,47,48,46,47,48,46,46,47,47,48,48,46,47,48,46,47,48,46,47,48,47,47,46,46,47,48],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["enckey",3]],[[],["keypair",3]],[[],["ciphertext",3]],[[]],[[]],[[]],[[["ciphertext",3]],["result",4,[["vec",3,[["u8",15]]],["primitiveserror",4]]]],[[]],[[],["keypair",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["enckey",3]],[[],["enckey",3]],[[],["result",4,[["ciphertext",3],["primitiveserror",4]]]],[[],["bool",15]],[[["keypair",3]],["bool",15]],[[["ciphertext",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["ciphertext",3]],["bool",15]],[[],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,null,null,null,[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["ciphertext",3]],["result",4,[["elgamalhybridctxtvars",3],["plonkerror",4]]]],[[["enckey",3]],["result",4,[["enckeyvars",3],["plonkerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["enckeyvars",3],["variable",6]],["result",4,[["elgamalhybridctxtvars",3],["plonkerror",4]]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,[[["merklepath",3]],["result",4,[["merklepathvars",3],["plonkerror",4]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["accelemvars",3],["merklepathvars",3]],["result",4,[["variable",6],["plonkerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u64",15],["rescueparameter",8]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,null,[[["plonkcircuit",3],["accmemberwitness",3]],["result",4,[["plonkerror",4]]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],null,[[["variable",6]],["result",4,[["variable",6],["plonkerror",4]]]],null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["verkeyvar",3]],[[],["signaturevar",3]],[[]],[[]],[[["signature",3]],["result",4,[["signaturevar",3],["plonkerror",4]]]],[[["verkey",3]],["result",4,[["verkeyvar",3],["plonkerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["verkeyvar",3],["signaturevar",3]],["result",4,[["variable",6],["plonkerror",4]]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["verkeyvar",3],["signaturevar",3]],["result",4,[["plonkerror",4]]]],[[["verkeyvar",3],["signaturevar",3]],["result",4,[["plonkerror",4]]]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["result",4,[["primitiveserror",4]]]],[[],["commitment",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["usize",15]],["commitment",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4,[["primitiveserror",4]]]],[[]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["enckey",3]],[[],["keypair",3]],[[],["ciphertext",3]],[[]],[[]],[[]],[[["ciphertext",3]],["vec",3]],[[],["enckey",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["ciphertext",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["enckey",3]],[[],["enckey",3]],[[],["ciphertext",3]],[[],["bool",15]],[[["keypair",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4,[["primitiveserror",4]]]],[[],["keypair",3]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["keypair",3]],["bool",15]],[[]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["rescueerror",4]]],[[]],[[],["usize",15]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["merkletree",3]],[[],["merkletree",3]],[[["nodevalue",3],["u64",15],["merkleleafproof",3]],["result",4,[["option",4,[["nodevalue",3]]]]]],[[],["nodepos",4]],[[],["merklepathnode",3]],[[],["merklepath",3]],[[],["nodevalue",3]],[[],["lookupresult",4]],[[],["merklecommitment",3]],[[],["merkleleaf",3]],[[],["merkleleafproof",3]],[[],["merklefrontier",4]],[[],["merkletree",3]],[[],["accmemberwitness",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["merklecommitment",3]],[[]],[[],["merklepathnode",3]],[[],["merklepath",3]],[[],["nodevalue",3]],[[],["merkleleaf",3]],[[],["merkleleafproof",3]],[[],["accmemberwitness",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u8",15]]],[[]],[[["nodepos",4]],["bool",15]],[[["merklepathnode",3]],["bool",15]],[[["merklepath",3]],["bool",15]],[[["nodevalue",3]],["bool",15]],[[["lookupresult",4]],["bool",15]],[[["merklecommitment",3]],["bool",15]],[[["merkleleaf",3]],["bool",15]],[[["merkleleafproof",3]],["bool",15]],[[["merklefrontier",4]],["bool",15]],[[["merkletree",3]],["bool",15]],[[["accmemberwitness",3]],["bool",15]],[[],["result",4,[["primitiveserror",4]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u64",15]],["lookupresult",4,[["merkleleafproof",3]]]],[[]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["filledmtbuilder",3]]],[[]],[[["merkletree",3]],["option",4]],[[["merklecommitment",3],["merklefrontier",4]],["option",4]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["merklefrontier",4]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]],["lookupresult",4,[["merkleleafproof",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[]],null,[[["merkletree",3],["u64",15]],["lookupresult",4]],[[],["lookupresult",4]],null,[[["merklepathnode",3]],["bool",15]],[[["merklepath",3]],["bool",15]],[[["nodevalue",3]],["bool",15]],[[["lookupresult",4]],["bool",15]],[[["merklecommitment",3]],["bool",15]],[[["merkleleaf",3]],["bool",15]],[[["merkleleafproof",3]],["bool",15]],[[["merklefrontier",4]],["bool",15]],[[["merkletree",3]],["bool",15]],[[["accmemberwitness",3]],["bool",15]],[[["u8",15]],["option",4]],[[["nodepos",4],["nodevalue",3],["nodevalue",3]]],[[["vec",3,[["merklepathnode",3]]]]],[[["merklepath",3]],["merkleleafproof",3]],[[["u8",15]],["option",4]],null,[[],["option",4,[["merkleleafproof",3]]]],[[],["u64",15]],null,null,null,[[]],[[]],[[]],[[["u64",15],["merkleleafproof",3]],["result",4,[["option",4]]]],[[["merklecommitment",3],["merklefrontier",4]],["option",4]],null,null,[[],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["taggedblob",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["taggedblob",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["prfkey",3]],[[]],[[],["prfkey",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["prfkey",3]],["bool",15]],[[["prfkey",3]],["result",4,[["vec",3],["primitiveserror",4]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["never",15]]],[[],["u64",15]],[[]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["prfkey",3]],[[["prfkey",3]],["bool",15]],[[["usize",15],["usize",15]],["prf",3]],null,[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["verkey",3]],[[],["keypair",3]],[[],["signature",3]],[[]],[[]],[[]],[[],["verkey",3]],[[],["keypair",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["keypair",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["groupaffine",3]]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["keypair",3]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["groupprojective",3]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["keypair",3]],["bool",15]],[[]],[[]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[["write",8]],["result",4,[["serializationerror",4]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["signature",3]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["groupaffine",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[["taggedblob",3]],["result",4]],[[["taggedblob",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["taggedblob",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["verkey",3]],[[],["verkey",3]],[[["signature",3]],["result",4,[["primitiveserror",4]]]],[[]],[[]],[[]]],"p":[[3,"EncKey"],[3,"KeyPair"],[3,"Ciphertext"],[8,"CommitmentGadget"],[3,"EncKeyVars"],[3,"ElGamalHybridCtxtVars"],[8,"ElGamalEncryptionGadget"],[8,"MerkleTreeGadget"],[3,"AccElemVars"],[3,"MerkleNodeVars"],[3,"MerklePathVars"],[3,"AccMemberWitnessVar"],[8,"PrfGadget"],[3,"VerKeyVar"],[3,"SignatureVar"],[8,"SignatureGadget"],[3,"Commitment"],[3,"EncKey"],[3,"KeyPair"],[3,"Ciphertext"],[4,"PrimitivesError"],[13,"VerificationError"],[13,"ParameterError"],[13,"DeserializationError"],[13,"FailedDecryption"],[13,"RescueError"],[13,"InconsistentStructureError"],[13,"InternalError"],[3,"MerkleLeaf"],[4,"MerkleFrontier"],[4,"LookupResult"],[4,"NodePos"],[3,"FilledMTBuilder"],[3,"MerklePathNode"],[3,"MerklePath"],[3,"NodeValue"],[3,"MerkleCommitment"],[3,"MerkleLeafProof"],[3,"MerkleTree"],[3,"AccMemberWitness"],[13,"Ok"],[13,"Proof"],[13,"Empty"],[3,"PRF"],[3,"PrfKey"],[3,"VerKey"],[3,"KeyPair"],[3,"Signature"]]},\
"jf_rescue":{"doc":"This module implements Rescue hash function over the …","t":[18,18,18,18,18,18,3,3,17,17,3,8,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["A","A_INV","INIT_VEC_LE","KEY_INJECTION_LE","MDS_LE","PERMUTATION_ROUND_KEYS","PRP","Permutation","RATE","ROUNDS","RescueMatrix","RescueParameter","RescueVector","STATE_SIZE","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","elems","eq","errors","eval","fmt","from","from","from","from","from","from","from","from","full_state_keyed_sponge_no_padding","full_state_keyed_sponge_with_padding","hash_3_to_1","init","init","init","init","init_vec_ref","into","into","into","into","is_empty","key_injection_vec_ref","key_schedule","len","linear","mds_matrix_ref","mds_matrix_ref","ne","non_linear","prp","prp_with_round_keys","round_keys_ref","sponge_no_padding","sponge_with_padding","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vec","vzip","vzip","vzip","vzip","zero","ParameterError","RescueError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","to_string","try_from","try_into","type_id","vzip","0"],"q":["jf_rescue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jf_rescue::errors","","","","","","","","","","","","","","","","","jf_rescue::errors::RescueError"],"d":["parameter A, a.k.a., alpha","parameter A^-1","Initial vector.","Injected keys for each round.","MDS matrix","Permutation keys.","Rescue pseudo-random permutation (PRP) instance","Instance of a unkeyed cryptographic permutation to be used …","The rate of rescue hash.","The # of rounds of rescue hash.","A matrix that consists of <code>STATE_SIZE</code> number of rescue …","This trait defines constants that are used for rescue hash …","Data type for rescue prp inputs, keys and internal data","The state size of rescue hash.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return vector of the field elements WARNING: may expose …","","Error types.","Compute the permutation on RescueVector <code>input</code>","","","","","","","","","","Pseudorandom function for Bls12_381 scalar field. It …","Pseudorandom function for Bls12_381 scalar field. It …","Compute the 3-to-1 rescue based hash function","","","","","Return a pointer to the initial vectors. Does not expose …","","","","","Check if the matrix is empty.","Return a pointer to the key injection vectors. Function …","Key scheduling for rescue based PRP for Bls12_381 scalars …","Return the number of columns of the matrix.","Perform a linear transform of the vector. Function needs …","Return a pointer to the mds matrix. Does not expose secret …","Return a pointer to the mds matrix. Does not expose secret …","","Helper function to compute f(M,x,c) = Mx^a + c. Function …","Rescue pseudorandom permutation for Bls12381 scalars …","Rescue pseudorandom permutation for Bls12381 scalars …","Return a pointer to the round key. Does not expose secret …","Sponge hashing based on rescue permutation for Bls12_381 …","Sponge hashing based on rescue permutation for Bls12_381 …","","","","","","","","","","","","","","","","Accessing the i-th vector of the matrix. Function needs to …","","","","","zero vector","Bad parameter in function call, {0}","Various error modes.","","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,0,0,0,0,0,0,0,0,2,3,4,5,2,3,4,5,3,4,5,3,4,5,2,5,2,3,4,5,2,3,4,5,2,3,4,5,3,3,0,2,3,2,2,3,3,3,4,4,5,2,2,2,2,3,4,5,5,2,3,4,5,4,5,5,4,3,2,5,3,3,5,5,2,2,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,4,2,3,4,5,3,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rescuevector",3]],[[],["rescuematrix",3]],[[],["prp",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["vec",3]],[[["rescuevector",3]],["bool",15]],null,[[["rescuevector",3]],["rescuevector",3]],[[["formatter",3]],["result",6]],[[]],[[["prp",3]]],[[],["rescuevector",3]],[[]],[[],["rescuevector",3]],[[]],[[]],[[]],[[["usize",15]],["result",4,[["vec",3],["rescueerror",4]]]],[[["usize",15]],["vec",3]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["rescuevector",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["rescuevector",3]],["vec",3,[["rescuevector",3]]]],[[],["usize",15]],[[["rescuematrix",3],["rescuevector",3]]],[[],["rescuematrix",3]],[[],["rescuematrix",3]],[[["rescuevector",3]],["bool",15]],[[["rescuematrix",3],["rescuevector",3]]],[[["rescuevector",3],["rescuevector",3]],["rescuevector",3]],[[["rescuevector",3]],["rescuevector",3]],[[]],[[["usize",15]],["result",4,[["vec",3],["rescueerror",4]]]],[[["usize",15]],["vec",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["rescuevector",3]],[[]],[[]],[[]],[[]],[[],["rescuevector",3]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null],"p":[[8,"RescueParameter"],[3,"Permutation"],[3,"RescueVector"],[3,"RescueMatrix"],[3,"PRP"],[4,"RescueError"],[13,"ParameterError"]]},\
"jf_utils":{"doc":"","t":[12,13,3,13,8,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,23,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,5,5],"n":["0","Base64Error","CanonicalBytes","DeserializationError","Tagged","TaggedBlob","TaggedBlobError","Vec","allocator","append","as_error_source","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_ref","as_slice","as_slice","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes_to_field_elements","capacity","cause","clear","clone","clone_from","clone_into","cmp","compute_len_to_next_multiple","dedup","dedup_by","dedup_by_key","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize_canonical_bytes","deserialize_canonical_bytes","deserialize_in_place","deserialize_unchecked","deserialize_uncompressed","drain","drain_filter","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","field_elem","field_switching","flush","fmt","fmt","fmt","fq_to_fr","fq_to_fr_with_mask","fr_to_fq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_abi","from_iter","from_par_iter","from_raw_parts","from_raw_parts_in","from_str","hash","hash_to_curve","hash_to_field","index","index_mut","init","init","init","init","insert","into","into","into","into","into_abi","into_boxed_slice","into_deserializer","into_iter","into_par_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_none","is_write_vectored","leak","len","multi_pairing","ne","ne","ne","ne","ne","ne","new","new_in","none","pad_with_zeros","par_extend","par_extend","par_iter","par_iter_mut","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","return_abi","serialize","serialize","serialize","serialize","serialize_unchecked","serialize_uncompressed","serialized_size","set_len","shrink_to","shrink_to_fit","source","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","tag","tagged_base64","tagged_blob","tagged_blob","test_serde_default","test_serde_default","to_bytes","to_bytes","to_field_elements","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","uncompressed_size","vzip","vzip","vzip","vzip","with_capacity","with_capacity_in","write","write","write_all","write_vectored","source","source","deserialize","serialize","deserialize","deserialize_with_tag","serialize","serialize_with_tag"],"q":["jf_utilsjf_utils::TaggedBlobError","","jf_utils::field_elem","","jf_utils::tagged_blob","","",""],"d":["","","A helper for converting CanonicalSerde bytes to standard …","","Trait for types whose serialization is not human-readable.","Helper type for serializing tagged blobs.","","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …","","","","Returns an unsafe mutable pointer to the vector’s buffer.","Extracts a mutable slice of the entire vector.","","Returns a raw pointer to the vector’s buffer.","","","","Extracts a slice containing the entire vector.","","","","","","","","","","","","","One-way, deterministic, infallible conversion between …","Returns the number of elements the vector can hold without …","","Clears the vector, removing all values.","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec&lt;T&gt;</code>.","","","","","","","","","","","","","","","","","","","","","Creates a draining iterator that removes the specified …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","Serializers for finite field elements.","","","","","","Convert a base field element to a scalar field element. …","Convert a field element in F(rom) to a field element in …","Convert a scalar field element to a base field element. …","","","","","","","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Converts a <code>CString</code> into a [Vec]&lt;u8&gt;.","Convert a clone-on-write slice into a vector.","Convert a boxed slice into a vector by transferring …","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","","","","Creates a <code>Vec&lt;T&gt;</code> directly from the raw components of …","Creates a <code>Vec&lt;T, A&gt;</code> directly from the raw components of …","","","Hash to Curve point, using hash function implementing …","Hash a sequence of bytes to into a field element, whose …","","","","","","","Inserts an element at position <code>index</code> within the vector, …","","","","","","Converts the vector into <code>Box&lt;[T]&gt;</code>.","","Creates a consuming iterator, that is, one that moves each …","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Returns <code>true</code> if the vector contains no elements.","","","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","A simple wrapper of multi-pairing function.","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for exactly <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","","","","","","","","","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","","Derive serdes for a type which serializes as a binary blob.","","","Takes as input a struct, and converts them to a series of …","Takes as input a struct, and converts them to a series of …","","","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for exactly …","","","","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code> with the specified capacity.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with the specified …","","","","","","","","","","","",""],"i":[1,2,0,2,0,0,0,0,3,3,2,3,3,3,3,3,3,3,3,3,3,2,1,4,2,3,3,1,4,2,3,3,4,0,3,2,3,3,3,3,3,0,3,3,3,3,1,4,2,3,3,1,4,2,3,3,2,1,4,3,3,0,0,3,3,3,3,3,1,4,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,2,2,3,0,0,0,1,1,4,4,4,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,0,0,3,3,1,4,2,3,3,1,4,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,4,3,3,3,3,3,3,3,3,2,3,3,3,3,3,5,4,0,0,0,0,0,0,3,3,2,3,1,4,2,3,1,4,2,3,3,3,1,4,2,3,3,1,4,2,3,3,3,3,3,3,3,6,7,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,[[]],[[["vec",3]]],[[],["error",8]],[[]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[]],[[]],[[]],[[],["option",4,[["backtrace",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["canonicalbytes",3]],[[],["vec",3]],[[],["usize",15]],[[],["option",4,[["error",8]]]],[[]],[[],["vec",3]],[[["vec",3]]],[[]],[[["vec",3]],["ordering",4]],[[["usize",15],["usize",15]],["usize",15]],[[]],[[]],[[]],[[],["vec",3,[["global",3]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["vec",3,[["global",3]]]]]],[[],["result",4,[["vec",3,[["global",3]]],["serializationerror",4]]]],null,null,[[["vec",3]],["result",4]],[[],["result",4,[["vec",3,[["global",3]]],["serializationerror",4]]]],[[],["result",4,[["vec",3,[["global",3]]],["serializationerror",4]]]],[[],["drain",3]],[[],["drainfilter",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[],["canonicalbytes",3]],[[]],[[]],[[]],[[]],[[["binaryheap",3]],["vec",3,[["global",3]]]],[[]],[[],["vec",3,[["global",3]]]],[[["cstring",3]],["vec",3,[["u8",15],["global",3]]]],[[["cow",4]],["vec",3,[["global",3]]]],[[["box",3]],["vec",3]],[[["str",15]],["vec",3,[["u8",15],["global",3]]]],[[],["vec",3,[["global",3]]]],[[["string",3]],["vec",3,[["u8",15],["global",3]]]],[[["vecdeque",3]],["vec",3]],[[],["vec",3,[["global",3]]]],[[],["vec",3,[["global",3]]]],[[],["vec",3,[["global",3]]]],[[],["vec",3,[["global",3]]]],[[["usize",15],["usize",15]],["vec",3,[["global",3]]]],[[["usize",15],["usize",15]],["vec",3]],[[["str",15]],["result",4]],[[]],[[],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["box",3]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[],["bool",15]],[[["wasmslice",3]],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["vec",3,[["global",3]]]],[[],["vec",3]],[[],["wasmslice",3]],[[["vec",3],["usize",15]]],[[]],[[]],[[]],[[]],[[["vec",3]],["option",4,[["ordering",4]]]],[[],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["serializationerror",4]]]],[[],["result",4]],[[],["result",4,[["serializationerror",4]]]],[[],["result",4,[["serializationerror",4]]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4,[["error",8]]]],[[]],[[],["splice",3]],[[]],[[["usize",15]],["vec",3]],[[["usize",15]]],[[],["string",3]],[[],["result",4,[["taggedbase64",3],["tb64error",4]]]],null,null,null,null,null,null,[[],["option",4,[["vec",3,[["global",3]]]]]],[[]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4,[["tryreserveerror",3]]]],[[["usize",15]],["result",4,[["tryreserveerror",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15]],["vec",3,[["global",3]]]],[[["usize",15]],["vec",3]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],null,null,[[["deserializer",8]],["result",4,[["canonicaldeserialize",8]]]],[[["serializer",8]],["result",4]],[[["deserializer",8]],["result",4]],[[["str",15],["deserializer",8]],["result",4,[["canonicalbytes",3]]]],[[["serializer",8]],["result",4]],[[["str",15],["canonicalbytes",3],["serializer",8]],["result",4]]],"p":[[3,"CanonicalBytes"],[4,"TaggedBlobError"],[3,"Vec"],[3,"TaggedBlob"],[8,"Tagged"],[13,"Base64Error"],[13,"DeserializationError"]]},\
"jf_utils_derive":{"doc":"","t":[23],"n":["tagged_blob"],"q":["jf_utils_derive"],"d":["Derive serdes for a type which serializes as a binary blob."],"i":[0],"f":[null],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};