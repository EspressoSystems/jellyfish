var searchIndex = new Map(JSON.parse('[\
["jf_aead",{"doc":"Use <code>crypto_kx</code> to derive shared session secrets and use …","t":"FFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AEADError","Ciphertext","EncKey","KeyPair","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","decrypt","default","default","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","enc_key","enc_key_ref","encrypt","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","generate","hash","hash","hash","into","into","into","into","partial_cmp","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"jf_aead"],[91,"ark_serialize::error"],[92,"core::result"],[93,"core::iter::traits::iterator"],[94,"core::marker"],[95,"core::cmp"],[96,"alloc::vec"],[97,"serde::de"],[98,"ark_serialize"],[99,"ark_serialize"],[100,"rand_core"],[101,"rand_core"],[102,"core::fmt"],[103,"core::option"],[104,"serde::ser"],[105,"std::io"],[106,"core::any"]],"d":["AEAD Error.","The ciphertext produced by AEAD encryption","Public/encryption key for AEAD","Keypair for Authenticated Encryption with Associated Data","","","","","","","","","","","","","","","","","","","","","","","Decrypt a ciphertext with authenticated associated data …","","","","","","","","","Getter for the public/encryption key","Getter for reference to the public/encryption key","Encrypt a message with authenticated associated data which …","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Randomly sample a key pair.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,5,8,9,10,5,8,9,10,5,8,9,5,8,9,10,5,8,9,10,5,8,10,5,9,5,9,5,8,9,5,8,5,5,9,9,10,5,8,9,10,10,5,8,9,9,10,5,8,5,9,10,8,9,10,5,8,10,9,5,8,9,5,8,9,5,8,9,10,5,8,10,9,10,5,8,9,10,5,8,9,10,5,8,9,10,5,8],"f":"````{c{{f{bd}}}{{l{}{{h{j}}}}n}}{c{{f{bd}}}{{l{}{{h{A`}}}}n}}{ce{}{}}0000000{Ab{{f{bd}}}}{j{{f{bd}}}}{A`{{f{bd}}}}{AbAb}{AdAd}{jj}{A`A`}{{ce}b{}{}}000{{AdAd}Af}{{jA`{Aj{Ah}}}{{f{{Al{Ah}}Ad}}}}{{}Ab}{{}j}{c{{f{Ab}}}An}{c{{f{j}}}An}{c{{f{A`}}}An}{{cB`Bb}{{f{Abd}}}Bd}{{cB`Bb}{{f{jd}}}Bd}{{cB`Bb}{{f{A`d}}}Bd}{jAb}0{{Abc{Aj{Ah}}{Aj{Ah}}}{{f{A`Ad}}}{BfBh}}{{AbAb}Bj}{{AdAd}Bj}{{jj}Bj}{{A`A`}Bj}{{AbBl}Bn}{{AdBl}Bn}0{{jBl}Bn}{{A`Bl}Bn}{cc{}}{{{C`{Ah}}}Ab}111{cj{BfBh}}{{Abc}bCb}{{Adc}bCb}{{A`c}bCb}{ce{}{}}000{{AdAd}{{Cd{Af}}}}{{Abc}fCf}{{jc}fCf}{{A`c}fCf}{{AbcB`}{{f{bd}}}Ch}{{jcB`}{{f{bd}}}Ch}{{A`cB`}{{f{bd}}}Ch}{{AbB`}Cj}{{jB`}Cj}{{A`B`}Cj}::::{cCl{}}{c{{f{e}}}{}{}}0000000{cCn{}}000====","c":[],"p":[[1,"unit"],[6,"SerializationError",91],[6,"Result",92],[17,"Item"],[5,"KeyPair",0],[10,"Iterator",93],[10,"Send",94],[5,"Ciphertext",0],[5,"EncKey",0],[5,"AEADError",0],[6,"Ordering",95],[1,"u8"],[1,"slice"],[5,"Vec",96],[10,"Deserializer",97],[6,"Compress",98],[6,"Validate",98],[10,"Read",99],[10,"RngCore",100],[10,"CryptoRng",100],[1,"bool"],[5,"Formatter",101],[8,"Result",101],[1,"array"],[10,"Hasher",102],[6,"Option",103],[10,"Serializer",104],[10,"Write",99],[1,"usize"],[5,"String",105],[5,"TypeId",106]],"b":[[43,"impl-Debug-for-AEADError"],[44,"impl-Display-for-AEADError"]]}],\
["jf_commitment",{"doc":"Trait definition for cryptographic commitment scheme","t":"KRRRRMM","n":["CommitmentScheme","Error","Input","Output","Randomness","commit","verify"],"q":[[0,"jf_commitment"],[7,"core::option"],[8,"core::result"],[9,"core::borrow"]],"d":["","Error type","Input to the commitment","The type of output commitment value","The type of the hiding/blinding factor","Commit algorithm that takes <code>input</code> and blinding randomness <code>r</code>","Verify algorithm that output <code>Ok</code> if accepted, or <code>Err</code> if …"],"i":[0,5,5,5,5,5,5],"f":"`````{{e{b{g}}}{{d{ik}}}{}{{f{c}}}{}{}{}}{{e{b{g}}i}{{d{{d{hh}}k}}}{}{{f{c}}}{}{}{}}","c":[],"p":[[6,"Option",7],[6,"Result",8],[10,"Borrow",9],[1,"unit"],[10,"CommitmentScheme",0]],"b":[]}],\
["jf_crhf",{"doc":"Trait definition for Collision-resistant hash function …","t":"KRRRM","n":["CRHF","Error","Input","Output","evaluate"],"q":[[0,"jf_crhf"],[5,"core::result"],[6,"core::borrow"]],"d":["A trait for CRHF (based on ark-primitives’ definition, …","Error type","Input to the CRHF","Output of the CRHF","evaluate inputs and return hash output"],"i":[0,3,3,3,3],"f":"````{e{{b{gi}}}{}{{d{c}}}{}{}}","c":[],"p":[[6,"Result",5],[10,"Borrow",6],[10,"CRHF",0]],"b":[]}],\
["jf_elgamal",{"doc":"Implements the ElGamal encryption scheme.","t":"FFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Ciphertext","EncKey","KeyPair","ParameterError","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","clone","clone","clone","clone_into","clone_into","clone_into","decrypt","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deterministic_encrypt","drop","drop","drop","drop","enc_key","enc_key_ref","encrypt","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_scalars","generate","hash","hash","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","rand","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_scalars","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zeroize"],"q":[[0,"jf_elgamal"],[127,"dyn_clone::sealed"],[128,"core::any"],[129,"ark_serialize::error"],[130,"core::result"],[131,"ark_ec::models::twisted_edwards"],[132,"core::iter::traits::iterator"],[133,"core::marker"],[134,"alloc::vec"],[135,"jf_rescue"],[136,"ark_serialize"],[137,"ark_serialize"],[138,"rand_core"],[139,"rand_core"],[140,"core::fmt"],[141,"alloc::boxed"],[142,"alloc::sync"],[143,"alloc::rc"],[144,"rand::rng"],[145,"core::marker"],[146,"core::any"]],"d":["Public encryption cipher text","Encryption key for encryption scheme","KeyPair structure for encryption scheme","Parameter error: {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decryption function","","","","","","","","","","","","","Public key encryption function with pre-sampled randomness","","","","","Get encryption key","Get encryption key reference","Public key encryption function","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reconstruct the ciphertext from a list of scalars.","Key generation algorithm for public key encryption scheme","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Flatten out the ciphertext into a vector of scalars","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,8,11,12,24,8,11,12,24,8,11,12,8,11,12,24,8,11,12,24,8,11,12,8,11,12,8,11,12,8,11,12,11,8,24,8,11,12,24,8,11,12,8,11,12,8,24,8,11,12,11,11,8,8,11,12,8,8,8,12,12,12,24,24,8,11,12,24,8,11,12,12,11,8,12,24,8,11,12,24,8,11,12,24,8,11,12,24,8,11,12,24,8,11,12,8,8,11,12,8,11,12,8,11,12,12,24,24,8,11,12,24,8,11,12,24,8,11,12,24,8,11,12,8],"f":"````{{cb}d{}}00{cf{}}0000000{e{{j{dh}}}l{{Ab{}{{n{{A`{c}}}}}}Ad}}{e{{j{dh}}}l{{Ab{}{{n{{Af{c}}}}}}Ad}}{e{{j{dh}}}l{{Ab{}{{n{{Ah{c}}}}}}Ad}}{ce{}{}}0000000{{{A`{c}}}{{j{dh}}}l}{{{Af{c}}}{{j{dh}}}l}{{{Ah{c}}}{{j{dh}}}l}{{{A`{c}}}{{A`{c}}}l}{{{Af{c}}}{{Af{c}}}l}{{{Ah{c}}}{{Ah{c}}}l}{{ce}d{}{}}00{{{Af{e}}{Ah{e}}}{{Aj{c}}}Al{{l{}{{An{c}}}}}}{{}{{A`{c}}}l}{B`c{}}0000000{{cBbBd}{{j{{A`{e}}h}}}Bfl}{{cBbBd}{{j{{Af{e}}h}}}Bfl}{{cBbBd}{{j{{Ah{e}}h}}}Bfl}{{{A`{e}}{Bh{c}}}{{Ah{e}}}Al{{l{}{{An{c}}}}}}{B`d}000{{{Af{c}}}{{A`{c}}}l}0{{{A`{e}}gBh}{{Ah{e}}}Al{{l{}{{An{c}}}}}{BjBl}}{{{A`{c}}{A`{c}}}Bnl}{{{Af{c}}{Af{c}}}Bnl}{{{Ah{c}}{Ah{c}}}Bnl}{{ce}Bn{}{}}00000{{C`Cb}Cd}0{{{A`{c}}Cb}Cdl}{{{Af{c}}Cb}Cdl}{{{Ah{c}}Cb}Cdl}{cc{}}000{Bh{{j{{Ah{c}}C`}}}l}{c{{Af{e}}}{BjBl}l}{{{A`{c}}e}dlCf}{{{Ah{c}}e}dlCf}{{}B`}000{ce{}{}}000{{{Ch{c}}}{{Ch{f}}}{}}000{{{Cj{c}}}{{Cj{f}}}{}}000{{{Cl{c}}}{{Cl{f}}}{}}000{c{{A`{e}}}{CnBlD`}l}{{{A`{c}}eBb}{{j{dh}}}lDb}{{{Af{c}}eBb}{{j{dh}}}lDb}{{{Ah{c}}eBb}{{j{dh}}}lDb}{{{A`{c}}Bb}B`l}{{{Af{c}}Bb}B`l}{{{Ah{c}}Bb}B`l}:::{{{Ah{c}}}Ajl}{cDd{}}{c{{j{e}}}{}{}}0000000{cDf{}}000>>>>{{{A`{c}}}dl}","c":[],"p":[[5,"Private",127],[1,"unit"],[10,"Any",128],[6,"SerializationError",129],[6,"Result",130],[10,"TECurveConfig",131],[17,"Item"],[5,"EncKey",0],[10,"Iterator",132],[10,"Send",133],[5,"KeyPair",0],[5,"Ciphertext",0],[5,"Vec",134],[10,"RescueParameter",135],[17,"BaseField"],[1,"usize"],[6,"Compress",136],[6,"Validate",136],[10,"Read",137],[1,"slice"],[10,"CryptoRng",138],[10,"RngCore",138],[1,"bool"],[5,"ParameterError",0],[5,"Formatter",139],[8,"Result",139],[10,"Hasher",140],[5,"Box",141],[5,"Arc",142],[5,"Rc",143],[10,"Rng",144],[10,"Sized",133],[10,"Write",137],[5,"String",145],[5,"TypeId",128]],"b":[[65,"impl-Debug-for-ParameterError"],[66,"impl-Display-for-ParameterError"]]}],\
["jf_merkle_tree",{"doc":"Merkle Tree traits and implementations","t":"TKRRRKKRKKKRGRKEKKRRPPPKKKNCNNNNMNNMNNMMMNNNNNCCNNNNNMNMNCMMQQQQNNNNNMCMCCMMMNNMCMMNMNMNNNMMCNMMNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNFINNNNNNNNNNNNNNNNNNNNNNNNNNRRIKFIFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKRFKRRRKRKKRNNNNNNNNNNNNNNNNNNNNNMMMMNNNNNNNNNNNMMNNNNNNNNMNMNNEPEEPEEPEPIEEGIFEEEFIIIIFFEEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQQNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ARITY","AppendableMerkleTreeScheme","BatchMembershipProof","BatchNonMembershipProof","Commitment","DigestAlgorithm","Element","Element","ForgetableMerkleTreeScheme","ForgetableUniversalMerkleTreeScheme","Index","Index","LookupResult","MembershipProof","MerkleCommitment","MerkleTreeError","MerkleTreeScheme","NodeValue","NodeValue","NonMembershipProof","NotFound","NotInMemory","Ok","PersistentUniversalMerkleTreeScheme","ToTraversalPath","UniversalMerkleTreeScheme","__clone_box","append_only","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","digest","digest","digest_leaf","drop","eq","equivalent","equivalent","equivalent","errors","examples","expect_not_found","expect_not_in_memory","expect_ok","extend","fmt","forget","from","from_commitment","hash","hasher","height","height","impl_forgetable_merkle_tree_scheme","impl_merkle_tree_scheme","impl_to_traversal_path_biguint","impl_to_traversal_path_primitives","init","into","into_any","into_any_arc","into_any_rc","iter","light_weight","lookup","macros","namespaced_merkle_tree","non_membership_remember","non_membership_verify","num_leaves","persistent_remove","persistent_update","persistent_update_with","prelude","push","remember","remove","size","to_owned","to_traversal_path","try_from","try_into","type_id","universal_forget","universal_lookup","universal_merkle_tree","update","update_with","verify","vzip","MerkleTree","__clone_box","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","extend","fmt","forget","from","from_commitment","from_elems","hash","height","init","into","into_any","into_any_arc","into_any_rc","into_iter","into_iter","iter","lookup","new","num_leaves","push","remember","serialize","to_owned","try_from","try_into","type_id","verify","vzip","DigestError","ExceedCapacity","ExistingLeaf","ForgottenLeaf","InconsistentStructureError","MerkleTreeError","NotFound","ParametersError","as_any","as_any_mut","as_error_source","borrow","borrow_mut","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","Interval","IntervalMerkleTree","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","from","hash","init","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","vzip","Bar","Foo","GenericHasherMerkleTree","HasherDigest","HasherDigestAlgorithm","HasherMerkleTree","HasherNode","__clone_box","as_any","as_any","as_any_mut","as_any_mut","as_ref","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","cmp","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize_with_mode","digest","digest_leaf","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from_str","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","partial_cmp","serialize","serialize_with_mode","serialized_size","tag","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LightWeightMerkleTree","__clone_box","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","extend","fmt","forget","from","from_commitment","from_elems","hash","height","init","into","into_any","into_any_arc","into_any_rc","into_iter","into_iter","iter","lookup","new","num_leaves","push","remember","serialize","to_owned","try_from","try_into","type_id","verify","vzip","BindNamespace","Leaf","NMT","Namespace","Namespace","Namespace","NamespaceId","NamespaceProof","NamespaceProof","Namespaced","NamespacedMerkleTreeScheme","Node","__clone_box","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","extend","fmt","from","from_elems","generate_namespaced_commitment","get_namespace","get_namespace_leaves","get_namespace_proof","get_namespace_proof","hash","height","init","into","into_any","into_any_arc","into_any_rc","iter","leaves","lookup","max","min","new","num_leaves","push","serialize","to_owned","try_from","try_into","type_id","verify","verify","verify_namespace_proof","verify_namespace_proof","vzip","AppendableMerkleTreeScheme","Branch","DigestAlgorithm","Element","Empty","ForgetableMerkleTreeScheme","ForgetableUniversalMerkleTreeScheme","ForgettenSubtree","Index","Leaf","LightWeightSHA3MerkleTree","LookupResult","MerkleCommitment","MerkleNode","MerklePath","MerkleProof","MerkleTree","MerkleTreeScheme","NodeValue","RescueHash","RescueLightWeightMerkleTree","RescueMerkleTree","RescueSparseMerkleTree","SHA3MerkleTree","Sha3Digest","Sha3Node","ToTraversalPath","UniversalMerkleTree","UniversalMerkleTreeScheme","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_with_mode","digest","digest","digest","digest_leaf","digest_leaf","digest_leaf","drop","drop","drop","drop","drop","elem","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","generate_namespaced_commitment","hash","hash","hash","hash","impl_to_traversal_path_biguint","impl_to_traversal_path_primitives","index","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","partial_cmp","pos","proof","serialize","serialize","serialize_with_mode","serialized_size","to_owned","to_owned","to_owned","to_owned","to_owned","tree_height","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","children","elem","pos","value","value","value","UniversalMerkleTree","__clone_box","as_any","as_any_mut","borrow","borrow_mut","capacity","clone","clone_into","commitment","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","forget","from","from_commitment","from_kv_set","hash","height","init","into","into_any","into_any_arc","into_any_rc","into_iter","into_iter","iter","lookup","new","non_membership_remember","non_membership_verify","num_leaves","persistent_update_with","remember","serialize","to_owned","try_from","try_into","type_id","universal_forget","universal_lookup","update_with","verify","vzip"],"q":[[0,"jf_merkle_tree"],[97,"jf_merkle_tree::append_only"],[143,"jf_merkle_tree::errors"],[177,"jf_merkle_tree::examples"],[205,"jf_merkle_tree::hasher"],[275,"jf_merkle_tree::light_weight"],[321,"jf_merkle_tree::namespaced_merkle_tree"],[384,"jf_merkle_tree::prelude"],[574,"jf_merkle_tree::prelude::MerkleNode"],[580,"jf_merkle_tree::universal_merkle_tree"],[630,"dyn_clone::sealed"],[631,"core::any"],[632,"num_bigint::biguint"],[633,"core::clone"],[634,"core::cmp"],[635,"core::hash"],[636,"core::result"],[637,"core::cmp"],[638,"core::iter::traits::collect"],[639,"core::fmt"],[640,"core::fmt"],[641,"alloc::sync"],[642,"alloc::rc"],[643,"core::option"],[644,"core::ops::function"],[645,"alloc::vec"],[646,"core::any"],[647,"ark_serialize"],[648,"ark_serialize"],[649,"core::error"],[650,"jf_rescue"],[651,"alloc::string"],[652,"ark_ff::fields"],[653,"crypto_common"],[654,"digest::digest"],[655,"ark_serialize::error"],[656,"core::cmp"],[657,"std::io"],[658,"core::iter::traits::exact_size"],[659,"jf_rescue"]],"d":["Tree ARITY","Merkle tree that allows insertion at back. Abstracted as a …","Batch proof","Batch non membership proof","Merkle tree commitment","Merkle tree hash function","An element of a Merkle tree.","Merkle tree element type","Merkle tree that allows forget/remember elements from the …","Universal Merkle tree that allows forget/remember elements …","An index type of a leaf in a Merkle tree.","Index type for this merkle tree","The result of querying at an index in the tree Typically, …","Merkle proof","Trait for a succinct merkle tree commitment","","Basic functionalities for a merkle tree implementation. …","An internal node value type in a Merkle tree.","Internal and root node value","Non membership proof for a given index","The index is outside the occupied range in the tree, and a …","The index is valid but we do not have the leaf in memory","The value at the given index, and a proof of validity","A universal merkle tree that allows non destructive …","An trait for Merkle tree index type.","A universal merkle tree is abstracted as a random-access …","","Implementation of a typical append only merkle tree","","","","","Return the maximum allowed number leaves","","","Return a merkle commitment","","","Digest a list of values","Return a digest of the tree","Digest an indexed element","","","","","","Error types","Provides sample instantiations of merkle tree. E.g. Sparse …","Assert the lookup result is NotFound. Return a …","Assert the lookup result is NotInMemory.","Assert the lookup result is Ok. Return a tuple of element …","Insert a list of new values at the leftmost available slots","","Trim the leaf at position <code>i</code> from memory, if present. …","Returns the argument unchanged.","Rebuild a merkle tree from a commitment. Return a tree …","","A convenience wrapper <code>HasherMerkleTree</code> to instantiate …","Return the height of the tree","Return the height of this merkle tree","Macro for generating a forgetable merkle tree …","Macro for generating a standard merkle tree implementation","Macros for implementing ToTreversalPath for BigUint types","Macros for implementing ToTreversalPath for primitive types","","Calls <code>U::from(self)</code>.","","","","Return an iterator that iterates through all element that …","A light weight merkle tree is an append only merkle tree …","Returns the leaf value given a position","Useful macros","Implementation of a Namespaced Merkle Tree.","“Re-insert” an empty leaf into the tree using its …","Verify an index is not in this merkle tree","Return the current number of leaves","A persistent remove interface, check …","A non destructive update interface, check …","A persistent update_with interface, check …","Prelude. Also provides sample instantiations of merkle …","Insert a new value at the leftmost available slot","“Re-insert” a leaf into the tree using its proof. …","Remove a leaf at the given position","Return the number of elements included in the …","","Convert the given index to a vector of branch indices …","","","","Trim the leaf at position <code>pos</code> from memory.","Returns the leaf value given a position","Implementation of a typical Sparse Merkle Tree.","Update the leaf value at a given position","Apply an update function <code>f</code> at a given position","Verify an element is a leaf of a Merkle tree given the …","","A standard append only Merkle tree implementation","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Construct a new Merkle tree with given height from a data …","","","","Calls <code>U::from(self)</code>.","","","","","","","","Initialize an empty Merkle tree.","","","","","","","","","","","Digest error, {0}","Merkle tree is already full.","Queried leaf is already occupied.","Queried leaf is forgotten.","Inconsistent Structure error, {0}","Error type for Merkle tree","Queried leaf isn’t in this Merkle tree","Parameters error, {0}","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Element type for interval merkle tree","Interval merkle tree instantiation for interval merkle …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Associated type needed to express trait bounds.","Associated type needed to express trait bounds.","Like <code>HasherMerkleTree</code> except with additional parameters.","Convenience trait and blanket impl for downstream trait …","A struct that impls <code>DigestAlgorithm</code> for use with <code>MerkleTree</code>…","Merkle tree generic over <code>Digest</code> hasher <code>H</code>.","Newtype wrapper for hash output that impls <code>NodeValue</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","A standard append only Merkle tree implementation","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Construct a new Merkle tree with given height from a data …","","","","Calls <code>U::from(self)</code>.","","","","","","","","Initialize an empty Merkle tree.","","","","","","","","","","","Trait indicating that a digest algorithm can commit to a …","Namespaced leaf","NMT","Trait indicating that a struct can act as an orderable …","Namespace type","Namespace type","Namespace type","Completeness proof for a namespace","Namespace proof type","Trait indicating that a leaf has a namespace.","Namespaced Merkle Tree where leaves are sorted by a …","Internal node value","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct an NMT from elements.","Generate a commitment that binds a node to a namespace …","Returns the namespace of the leaf","Return the set of leaves associated with this Namespace …","Returns the entire set of leaves corresponding to a given …","","","","","Calls <code>U::from(self)</code>.","","","","","Helper function to return an iterator over the leaves in …","","Returns the maximum possible namespace","Returns the minimum possible namespace","Initializze an empty NMT","","","","","","","","Verify a namespace proof","","Verifies the completeness proof for a given set of leaves …","","","","An internal branching node","","","An empty subtree.","","","The subtree is forgotten from the memory","","A leaf node","Light weight merkle tree using SHA3 hash","","","An internal Merkle node.","A merkle path is a bottom-up list of nodes from leaf to …","Merkle proof struct.","","","","Wrapper for rescue hash function","A standard light merkle tree using RATE-3 rescue hash …","A standard merkle tree using RATE-3 rescue hash function","Example instantiation of a SparseMerkleTree indexed by I","Merkle tree using SHA3 hash","Wrapper for SHA3_512 hash function","Update the array length here","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the element associated with this <code>MerkleProof</code>. None …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Macros for implementing ToTreversalPath for BigUint types","Macros for implementing ToTreversalPath for primitive types","Return the index of this <code>MerkleProof</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Form a <code>MerkleProof</code> from a given index and Merkle path.","","Proof of inclusion for element at index <code>pos</code>","Nodes of proof path, from root to leaf","","","","","","","","","","Return the height of this proof.","","","","","","","","","","","","","","","","","","","","","All it’s children","Associated element of this leaf","Index of this leaf","Merkle hash value of this subtree","Merkle hash value of this leaf","Merkle hash value of this forgotten subtree","A standard append only Merkle tree implementation","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Build a universal merkle tree from a key-value set.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Initialize an empty Merkle tree.","","","","","","","","","","","WARN(#495): this method breaks non-membership proofs.","","","",""],"i":[10,0,10,42,10,0,0,10,0,0,0,10,0,10,0,0,0,0,10,42,19,19,19,0,0,0,19,0,19,19,19,19,10,19,19,10,19,19,52,18,52,19,19,19,19,19,0,0,19,19,19,27,19,34,19,34,19,0,18,10,0,0,0,0,19,19,19,19,19,10,0,10,0,0,39,42,10,44,44,44,0,27,34,42,18,19,48,19,19,19,39,42,0,42,42,10,19,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,22,22,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,70,70,0,0,0,0,0,62,97,62,97,62,62,97,62,97,62,62,62,62,62,62,97,62,97,62,62,62,97,97,97,62,62,62,62,62,62,62,97,62,62,62,62,97,62,97,62,97,62,97,62,97,62,62,62,62,62,62,62,62,97,62,62,62,97,62,97,62,97,62,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,82,0,0,82,78,85,0,85,0,0,82,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,79,78,82,85,75,75,75,75,75,75,75,75,75,75,75,76,76,75,75,75,75,75,75,75,75,82,75,85,75,75,0,89,0,0,89,0,0,89,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,91,87,93,89,90,91,87,93,89,90,91,87,93,87,89,90,91,87,93,89,90,91,87,93,87,89,90,91,87,93,89,90,91,87,93,87,87,89,90,91,87,93,89,90,91,87,93,89,90,87,91,91,93,91,91,93,89,90,91,87,93,90,89,90,91,87,93,89,89,89,90,90,90,91,91,91,87,87,87,93,93,93,89,90,91,87,93,89,90,91,87,93,93,89,90,87,93,0,0,90,89,90,91,87,93,89,90,91,87,93,89,90,91,87,93,89,90,91,87,93,89,90,91,87,93,90,87,90,90,89,90,87,87,89,90,91,87,93,90,89,90,91,87,93,89,90,91,87,93,89,90,91,87,93,89,90,91,87,93,98,99,99,98,99,100,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96],"f":"``````````````````````````{{cb}d{}}`{cf{}}0{ce{}{}}0{{{Ad{}{{h{c}}{j{e}}{l{g}}{n{i}}{A`{k}}{Ab{m}}}}}AfAhAjAl{AnB`Bb}An{{Bd{g}}}}{{{Bf{ceg}}}{{Bf{ceg}}}AnAnAn}{{ce}d{}{}}{{{Ad{}{{h{c}}{j{e}}{l{g}}{n{i}}{A`{k}}{Ab{m}}}}}mAhAjAl{AnB`Bb}An{{Bd{g}}}}{Bhc{}}0{{{Bj{c}}}{{Bn{cBl}}}Al}{BdcAl}{{ce}{{Bn{gBl}}}AjAhAl}{Bhd}{{{Bf{ceg}}{Bf{ceg}}}C`CbCbCb}{{ce}C`{}{}}00``{{{Bf{ceg}}}{{Bn{gBl}}}{}{}{}}{{{Bf{ceg}}}{{Bn{dBl}}}{}{}{}}{{{Bf{ceg}}}{{Bn{{Cd{ce}}Bl}}}{}{}{}}{{Cfg}{{Bn{dBl}}}{}{{Ch{c}}}{{Cl{}{{Cj{e}}}}}}{{{Bf{ceg}}Cn}D`DbDbDb}{{Dde}{{Bf{gid}}}{}{{Ch{c}}}{}{}}{cc{}}{eDd{}{{Ch{c}}}}{{{Bf{ceg}}i}dBbBbBbDf}`{BdBh}{{{Ad{}{{h{c}}{j{e}}{l{g}}{n{i}}{A`{k}}{Ab{m}}}}}BhAhAjAl{AnB`Bb}An{{Bd{g}}}}````{{}Bh}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{{{Ad{}{{h{c}}{j{e}}{l{g}}{n{i}}{A`{k}}{Ab{m}}}}}{{`{ceg}}}AhAjAl{AnB`Bb}An{{Bd{g}}}}`{{{Ad{}{{h{c}}{j{e}}{l{g}}{n{i}}{A`{k}}{Ab{m}}}}o}{{Bf{cid}}}AhAjAl{AnB`Bb}An{{Bd{g}}}{{Ch{e}}}}``{{Dncg}{{Bn{dBl}}}{}{}{{Ch{e}}}}{{{Ed{}{{E`{c}}{Eb{e}}}}ik}{{Bn{C`Bl}}}{}{}{}{{Ch{g}}}{{Ch{c}}}}{{{Ad{}{{h{c}}{j{e}}{l{g}}{n{i}}{A`{k}}{Ab{m}}}}}EfAhAjAl{AnB`Bb}An{{Bd{g}}}}{{Ehc}{{Bn{EhBl}}}{}}{{Ehei}{{Bn{EhBl}}}{}{{Ch{c}}}{}{{Ch{g}}}}{{Ehei}{{Bn{EhBl}}}{}{{Ch{c}}}{}{{En{{Ej{g}}}{{El{{Ej{g}}}}}}}}`{{Cfe}{{Bn{dBl}}}{}{{Ch{c}}}}{{Ddeim}{{Bn{dBl}}}{}{{Ch{c}}}{}{{Ch{g}}}{}{{Ch{k}}}}{{{Ed{}{{E`{c}}{Eb{e}}}}i}{{Bn{{Bf{kdd}}Bl}}}{}{}{}{{Ch{g}}}{}}{BdEf}?{{F`Bh}{{Fb{Bh}}}}{c{{Bn{e}}}{}{}}0{cFd{}}{{Dnc}{{Bf{egi}}}{}{}{}{}}{{{Ed{}{{E`{c}}{Eb{e}}}}i}{{Bf{kmc}}}{}{}{}{{Ch{g}}}{}{}}`{{{Ed{}{{E`{c}}{Eb{e}}}}im}{{Bn{{Bf{kdd}}Bl}}}{}{}{}{{Ch{g}}}{}{{Ch{k}}}}{{{Ed{}{{E`{c}}{Eb{e}}}}im}{{Bn{{Bf{kdd}}Bl}}}{}{}{}{{Ch{g}}}{}{{En{{Ej{k}}}{{El{{Ej{k}}}}}}}}{{eim}{{Bn{{Bn{dd}}Bl}}}{}{{Ch{c}}}{}{{Ch{g}}}{}{{Ch{k}}}}{ce{}{}}`{{cb}d{}}{cf{}}022{{{Ff{cieg}}}AfAh{AjF`}Al{{Fh{ceg}}}}{{{Ff{cieg}}}{{Ff{cieg}}}{AhAn}{AjAn}{AlAn}{{Fh{ceg}}An}}{{ce}d{}{}}{{{Ff{cieg}}}kAh{AjF`}Al{{Fh{ceg}}}{}}{Bhc{}}0{c{{Bn{{Ff{ekgi}}}}}Fj{AhFlFn}{AjFlFn}Al{{Fh{egi}}}}{Bhd}{{{Ff{cieg}}{Ff{cieg}}}C`{AhCb}{AjCb}{AlCb}{{Fh{ceg}}Cb}}{{ce}C`{}{}}00{{{Ff{cgEfe}}m}{{Bn{dBl}}}AhAl{{Fh{cEfe}}}{}{{Ch{i}}}{{Cl{}{{Cj{k}}}}}}{{{Ff{cieg}}Cn}D`{AhDb}{AjDb}{AlDb}{{Fh{ceg}}Db}}{{{Ff{cieg}}m}{{Bf{oAad}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{}}{cc{}}{e{{Ff{gmik}}}{}{{Ch{c}}}Ah{AjF`}Al{{Fh{gik}}}}{{{Ej{Bh}}g}{{Bn{{Ff{ckEfi}}Bl}}}Ah{{Ch{c}}}{{Cl{}{{Cj{e}}}}}Al{{Fh{cEfi}}}}{{{Ff{cieg}}k}d{AhBb}{AjBb}{AlBb}{{Fh{ceg}}Bb}Df}{{{Ff{cieg}}}BhAh{AjF`}Al{{Fh{ceg}}}}{{}Bh}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{{{Ff{cieg}}}kAh{AjF`}Al{{Fh{ceg}}}{}}0{{{Ff{cieg}}}{{`{ceg}}}Ah{AjF`}Al{{Fh{ceg}}}}<{Bh{{Ff{cieg}}}AhAjAl{{Fh{ceg}}}}{{{Ff{cieg}}}EfAh{AjF`}Al{{Fh{ceg}}}}{{{Ff{cgEfe}}k}{{Bn{dBl}}}AhAl{{Fh{cEfe}}}{}{{Ch{i}}}}{{{Ff{cieg}}mAaAe}{{Bn{dBl}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{{Ch{o}}}{}{{Ch{Ac}}}}{{{Ff{cieg}}k}Bn{AhFlFn}{AjFlFn}Al{{Fh{ceg}}}G`}:{c{{Bn{e}}}{}{}}0{cFd{}}{{eim}{{Bn{{Bn{dd}}Bl}}}{}{{Ch{c}}}{}{{Ch{g}}}{}{{Ch{k}}}}=````````{cf{}}0{cGb{}}??{Bhc{}}0{Bhd}{{BlBl}C`}{{ce}C`{}{}}00{{BlCn}D`}0{GdBl}{cc{}}{{}Bh}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{cGf{}}{c{{Bn{e}}}{}{}}0{cFd{}}6``{{cb}d{}}{cf{}}088{{{Gh{c}}}{{Gh{c}}}{AnGj}}{{ce}d{}{}}{Bhc{}}0{Bhd}{{{Gh{c}}{Gh{c}}}C`{CbGj}}{{ce}C`{}{}}00{cc{}}{{{Gh{c}}e}d{BbGj}Df}{{}Bh}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}3{c{{Bn{e}}}{}{}}0{cFd{}}5```````{{cb}d{}}{cf{}}000{{{Gl{c}}}{{Gn{c}}}H`}8888{{{Gl{c}}}{{Bn{dHb}}}H`}{{{Gl{c}}}{{Gl{c}}}H`}{{ce}d{}{}}{{{Gl{c}}{Gl{c}}}HdH`}{{}{{Gl{c}}}H`}{Bhc{}}000{c{{Bn{{Gl{e}}}}}FjH`}{{cHfHh}{{Bn{{Gl{e}}Hb}}}HjH`}{{{Bj{{Gl{c}}}}}{{Bn{{Gl{c}}Bl}}}Hl}{{ce}{{Bn{{Gl{g}}Bl}}}{AjFl}{AhFl}Hl}{Bhd}0{{{Gl{c}}{Gl{c}}}C`H`}{{ce}C`{}{}}00{{{Gl{c}}Cn}D`H`}0{cc{}}0{{{Gn{c}}}{{Gl{c}}}H`}{Hn{{Bn{{Gl{c}}e}}}H`{}}{{{Gl{c}}e}dH`Df}{{}Bh}0{ce{}{}}0{{{Dh{c}}}{{Dh{f}}}{}}0{{{Dj{c}}}{{Dj{f}}}{}}0{{{Dl{c}}}{{Dl{f}}}{}}0{{{Gl{c}}{Gl{c}}}{{Ej{Hd}}}H`}{{{Gl{c}}e}BnH`G`}{{{Gl{c}}eHf}{{Bn{dHb}}}H`I`}{{{Gl{c}}Hf}BhH`}{{}Gf}8{cGf{}}{c{{Bn{e}}}{}{}}{Ib{{Bn{{Gl{c}}e}}}H`{}}0111{cFd{}}0<<`{{cb}d{}}{cf{}}0>>{{{Id{cieg}}}AfAh{AjF`}Al{{Fh{ceg}}}}{{{Id{cieg}}}{{Id{cieg}}}{AhAn}{AjAn}{AlAn}{{Fh{ceg}}An}}{{ce}d{}{}}{{{Id{cieg}}}kAh{AjF`}Al{{Fh{ceg}}}{}}{Bhc{}}0{c{{Bn{{Id{ekgi}}}}}Fj{AhFlFn}{AjFlFn}Al{{Fh{egi}}}}{Bhd}{{{Id{cieg}}{Id{cieg}}}C`{AhCb}{AjCb}{AlCb}{{Fh{ceg}}Cb}}{{ce}C`{}{}}00{{{Id{cgEfe}}m}{{Bn{dBl}}}AhAl{{Fh{cEfe}}}{}{{Ch{i}}}{{Cl{}{{Cj{k}}}}}}{{{Id{cieg}}Cn}D`{AhDb}{AjDb}{AlDb}{{Fh{ceg}}Db}}{{{Id{cieg}}m}{{Bf{oAad}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{}}{cc{}}{e{{Id{gmik}}}{}{{Ch{c}}}Ah{AjF`}Al{{Fh{gik}}}}{{{Ej{Bh}}g}{{Bn{{Id{ckEfi}}Bl}}}Ah{{Ch{c}}}{{Cl{}{{Cj{e}}}}}Al{{Fh{cEfi}}}}{{{Id{cieg}}k}d{AhBb}{AjBb}{AlBb}{{Fh{ceg}}Bb}Df}{{{Id{cieg}}}BhAh{AjF`}Al{{Fh{ceg}}}}{{}Bh}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{{{Id{cieg}}}kAh{AjF`}Al{{Fh{ceg}}}{}}0{{{Id{cieg}}}{{`{ceg}}}Ah{AjF`}Al{{Fh{ceg}}}}<{Bh{{Id{cieg}}}AhAjAl{{Fh{ceg}}}}{{{Id{cieg}}}EfAh{AjF`}Al{{Fh{ceg}}}}{{{Id{cgEfe}}k}{{Bn{dBl}}}AhAl{{Fh{cEfe}}}{}{{Ch{i}}}}{{{Id{cieg}}mAaAe}{{Bn{dBl}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{{Ch{o}}}{}{{Ch{Ac}}}}{{{Id{cieg}}k}Bn{AhFlFn}{AjFlFn}Al{{Fh{ceg}}}G`}:{c{{Bn{e}}}{}{}}0{cFd{}}{{eim}{{Bn{{Bn{dd}}Bl}}}{}{{Ch{c}}}{}{{Ch{g}}}{}{{Ch{k}}}}=````````````{{cb}d{}}{cf{}}0??{{{If{eicg}}}AfIh{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}}{{{If{eicg}}}{{If{eicg}}}{IhAn}{Ah{Il{}{{Ij{c}}}}An}{AlAn}{{Fh{eEfg}}{In{eEfgc}}An}}{{ce}d{}{}}{{{If{eicg}}}kIh{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}{}}{Bhc{}}0{c{{Bn{{If{gkei}}}}}FjIh{Ah{Il{}{{Ij{e}}}}FlFn}{AlFlFn}{{Fh{gEfi}}{In{gEfie}}}}{Bhd}{{{If{eicg}}{If{eicg}}}C`{IhCb}{Ah{Il{}{{Ij{c}}}}Cb}{AlCb}{{Fh{eEfg}}{In{eEfgc}}Cb}}{{ce}C`{}{}}00{{{If{eicg}}o}{{Bn{dBl}}}Ih{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}{}{{Ch{k}}}{{Cl{}{{Cj{m}}}}}}{{{If{eicg}}Cn}D`{IhDb}{Ah{Il{}{{Ij{c}}}}Db}{AlDb}{{Fh{eEfg}}{In{eEfgc}}Db}}{cc{}}{{{Ej{Bh}}i}{{Bn{{If{emck}}Bl}}}Ih{Ah{Il{}{{Ij{c}}}}}{{Ch{e}}}{{Cl{}{{Cj{g}}}}}Al{{Fh{eEfk}}{In{eEfkc}}}}{{{`{ce}}}cAlIh}{{{Il{}{{Ij{c}}}}}cIh}{{{Jd{}{{Ij{c}}{J`{e}}{Jb{g}}}}}{{Fb{e}}}Ih{Ah{Il{}{{Ij{c}}}}}Al}{{{Jj{}{{Jf{c}}{Jh{e}}}}e}cJdIh}{{{If{eicg}}k}mIh{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}An}{}{}}{{{If{eicg}}k}d{IhBb}{Ah{Il{}{{Ij{c}}}}Bb}{AlBb}{{Fh{eEfg}}{In{eEfgc}}Bb}Df}{{{If{eicg}}}BhIh{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}}{{}Bh}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{{{If{eicg}}}{{`{kmo}}}Ih{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}{}{}{}}{{{If{eicg}}}{{`{{Jl{}{{Cj{e}}}}}}}Ih{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}}{{{If{eicg}}m}{{Bf{oAad}}}Ih{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}{}{{Ch{k}}}{}{}}{{}Ih}0{Bh{{If{eicg}}}Ih{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}}{{{If{eicg}}}EfIh{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}}{{{If{eicg}}m}{{Bn{dBl}}}Ih{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}}{}{{Ch{k}}}}{{{If{eicg}}k}BnIh{Ah{Il{}{{Ij{c}}}}FlFn}{AlFlFn}{{Fh{eEfg}}{In{eEfgc}}}G`};{c{{Bn{e}}}{}{}}0{cFd{}}{{{Jd{}{{Ij{c}}{J`{e}}{Jb{g}}}}{`{gc}}c}{{Bn{{Bn{dd}}Bl}}}Ih{Ah{Il{}{{Ij{c}}}}}Al}{{eim}{{Bn{{Bn{dd}}Bl}}}{}{{Ch{c}}}{}{{Ch{g}}}{}{{Ch{k}}}}{{{Jj{}{{Jf{c}}{Jh{e}}}}ce}{{Bn{{Bn{dd}}Bl}}}JdIh}{{{If{eicg}}km}{{Bn{{Bn{dd}}Bl}}}Ih{Ah{Il{}{{Ij{c}}}}}Al{{Fh{eEfg}}{In{eEfgc}}An}{}{}}{ce{}{}}`````````````````````````````{{cb}d{}}0000{cf{}}000000000{Jn{{Bj{K`}}}}3333333333{Jn{{Bn{dHb}}}}{{{Kb{ceg}}}{{Kb{ceg}}}{AnAh}{AnAj}{AnAl}}{{{Kd{ceg}}}{{Kd{ceg}}}{AhAn}{AjAn}{AlAn}}{{{Kf{c}}}{{Kf{c}}}{AnKh}}{JnJn}{KjKj}{{ce}d{}{}}0000{{JnJn}Hd}{{}Jn}{Bhc{}}000000000{c{{Bn{{Kb{egi}}}}}Fj{FlFnAh}{FlFnAj}Al}{c{{Bn{{Kd{egi}}}}}Fj{AhFlFn}{AjFlFn}Al}{{cHfHh}{{Bn{JnHb}}}Hj}{{{Bj{e}}}{{Bn{eBl}}}Aj{Kh{Kl{c}}}}{{{Bj{c}}}{{Bn{cBl}}}Kh}{{{Bj{Jn}}}{{Bn{JnBl}}}}{{Ef{Gh{c}}}{{Bn{cBl}}}Kh}{{ce}{{Bn{eBl}}}Aj{Kh{Kl{c}}}}{{ce}{{Bn{JnBl}}}Aj{AhFl}}{Bhd}0000{{{Kd{ceg}}}{{Ej{c}}}AhAjAl}{{{Kb{ceg}}{Kb{ceg}}}C`{CbAh}{CbAj}{CbAl}}{{{Kd{ceg}}{Kd{ceg}}}C`{AhCb}{AjCb}{AlCb}}{{{Kf{c}}{Kf{c}}}C`{CbKh}}{{JnJn}C`}{{KjKj}C`}{{ce}C`{}{}}00000000000000{{{Kb{ceg}}Cn}D`{DbAh}{DbAj}{DbAl}}{{{Kd{ceg}}Cn}D`{AhDb}{AjDb}{AlDb}}{{{Kf{c}}Cn}D`{DbKh}}{{JnCn}D`}{{KjCn}D`}{cc{}}0000{{{`{Jnc}}}JnIh}{{{Kb{ceg}}i}d{BbAh}{BbAj}{BbAl}Df}{{{Kd{ceg}}i}d{AhBb}{AjBb}{AlBb}Df}{{Jnc}dDf}{{Kjc}dDf}``{{{Kd{ceg}}}eAhAjAl}{{}Bh}0000{ce{}{}}0000{{{Dh{c}}}{{Dh{f}}}{}}0000{{{Dj{c}}}{{Dj{f}}}{}}0000{{{Dl{c}}}{{Dl{f}}}{}}0000{{c{Kn{ecg}}}{{Kd{ecg}}}AjAhAl}{{JnJn}{{Ej{Hd}}}}``{{{Kb{ceg}}i}Bn{FlFnAh}{FlFnAj}AlG`}{{{Kd{ceg}}i}Bn{AhFlFn}{AjFlFn}AlG`}{{JncHf}{{Bn{dHb}}}I`}{{JnHf}Bh}99999{{{Kd{ceg}}}BhAhAjAl}{c{{Bn{e}}}{}{}}000000000{cFd{}}0000<<<<<```````{{cb}d{}}{cf{}}0>>{{{L`{cieg}}}AfAh{AjF`}Al{{Fh{ceg}}}}{{{L`{cieg}}}{{L`{cieg}}}{AhAn}{AjAn}{AlAn}{{Fh{ceg}}An}}{{ce}d{}{}}{{{L`{cieg}}}kAh{AjF`}Al{{Fh{ceg}}}{}}{Bhc{}}0{c{{Bn{{L`{ekgi}}}}}Fj{AhFlFn}{AjFlFn}Al{{Fh{egi}}}}{Bhd}{{{L`{cieg}}{L`{cieg}}}C`{AhCb}{AjCb}{AlCb}{{Fh{ceg}}Cb}}{{ce}C`{}{}}00{{{L`{cieg}}Cn}D`{AhDb}{AjDb}{AlDb}{{Fh{ceg}}Db}}{{{L`{cieg}}m}{{Bf{oAad}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{}}{cc{}}{e{{L`{gmik}}}{}{{Ch{c}}}Ah{AjF`}Al{{Fh{gik}}}}{{Bhm}{{Bn{{L`{gAaco}}Bl}}}{AjF`}{{Ch{c}}}Ah{{Ch{g}}}{{Ch{{Cd{ei}}}}}{{Cl{}{{Cj{k}}}}}Al{{Fh{gco}}}}{{{L`{cieg}}k}d{AhBb}{AjBb}{AlBb}{{Fh{ceg}}Bb}Df}{{{L`{cieg}}}BhAh{AjF`}Al{{Fh{ceg}}}}{{}Bh}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{{{L`{cieg}}}kAh{AjF`}Al{{Fh{ceg}}}{}}0{{{L`{cieg}}}{{`{ceg}}}Ah{AjF`}Al{{Fh{ceg}}}}<{Bh{{L`{cieg}}}Ah{AjF`}Al{{Fh{ceg}}}}{{{L`{cieg}}ko}{{Bn{dBl}}}Ah{AjF`}Al{{Fh{ceg}}}{}{}{{Ch{m}}}}{{{L`{cieg}}mAa}{{Bn{C`Bl}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{{Ch{o}}}}{{{L`{cieg}}}EfAh{AjF`}Al{{Fh{ceg}}}}{{{L`{cieg}}mAa}{{Bn{{L`{cieg}}Bl}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{{En{{Ej{o}}}{{El{{Ej{o}}}}}}}}{{{L`{cieg}}mAaAe}{{Bn{dBl}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{{Ch{o}}}{}{{Ch{Ac}}}}{{{L`{cieg}}k}Bn{AhFlFn}{AjFlFn}Al{{Fh{ceg}}}G`}<{c{{Bn{e}}}{}{}}0{cFd{}}{{{L`{cieg}}k}{{Bf{moAa}}}Ah{AjF`}Al{{Fh{ceg}}}{}{}{}{}}{{{L`{cieg}}m}{{Bf{oAaAc}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{}{}}{{{L`{cieg}}mAa}{{Bn{{Bf{cdd}}Bl}}}Ah{AjF`}Al{{Fh{ceg}}}{}{{Ch{k}}}{}{{En{{Ej{o}}}{{El{{Ej{o}}}}}}}}{{eim}{{Bn{{Bn{dd}}Bl}}}{}{{Ch{c}}}{}{{Ch{g}}}{}{{Ch{k}}}}{ce{}{}}","c":[],"p":[[5,"Private",630],[1,"unit"],[10,"Any",631],[17,"Element"],[17,"Index"],[17,"NodeValue"],[17,"MembershipProof"],[17,"BatchMembershipProof"],[17,"Commitment"],[10,"MerkleTreeScheme",0],[5,"BigUint",632],[10,"Element",0],[10,"Index",0],[10,"NodeValue",0],[10,"Clone",633],[10,"Eq",634],[10,"Hash",635],[10,"MerkleCommitment",0],[6,"LookupResult",0],[1,"usize"],[1,"slice"],[6,"MerkleTreeError",143],[6,"Result",636],[1,"bool"],[10,"PartialEq",634],[1,"tuple"],[10,"AppendableMerkleTreeScheme",0],[10,"Borrow",637],[17,"Item"],[10,"IntoIterator",638],[5,"Formatter",639],[8,"Result",639],[10,"Debug",639],[10,"ForgetableMerkleTreeScheme",0],[10,"Hasher",635],[5,"Box",640],[5,"Arc",641],[5,"Rc",642],[10,"ForgetableUniversalMerkleTreeScheme",0],[17,"NonMembershipProof"],[17,"BatchNonMembershipProof"],[10,"UniversalMerkleTreeScheme",0],[1,"u64"],[10,"PersistentUniversalMerkleTreeScheme",0],[6,"Option",643],[17,"Output"],[10,"FnOnce",644],[10,"ToTraversalPath",0],[5,"Vec",645],[5,"TypeId",631],[5,"MerkleTree",97],[10,"DigestAlgorithm",0],[10,"Deserializer",646],[10,"CanonicalSerialize",647],[10,"CanonicalDeserialize",647],[10,"Serializer",648],[10,"Error",649],[6,"RescueError",650],[5,"String",651],[5,"Interval",177],[10,"Field",652],[5,"HasherNode",205],[8,"Output",653],[10,"Digest",654],[6,"SerializationError",655],[6,"Ordering",634],[6,"Compress",647],[6,"Validate",647],[10,"Read",656],[10,"HasherDigest",205],[1,"str"],[10,"Write",656],[5,"TaggedBase64",657],[5,"LightWeightMerkleTree",275],[5,"NMT",321],[10,"Namespace",321],[17,"Namespace"],[10,"Namespaced",321],[10,"BindNamespace",321],[17,"Leaf"],[17,"Node"],[10,"NamespaceProof",321],[17,"NamespaceProof"],[17,"NamespaceId"],[10,"NamespacedMerkleTreeScheme",321],[10,"ExactSizeIterator",658],[5,"Sha3Node",384],[1,"u8"],[6,"MerkleNode",384],[5,"MerkleProof",384],[5,"RescueHash",384],[10,"RescueParameter",650],[5,"Sha3Digest",384],[10,"From",659],[8,"MerklePath",384],[5,"UniversalMerkleTree",580],[5,"HasherDigestAlgorithm",205],[15,"Branch",574],[15,"Leaf",574],[15,"ForgettenSubtree",574]],"b":[[128,"impl-IntoIterator-for-MerkleTree%3CE,+H,+I,+ARITY,+T%3E"],[129,"impl-IntoIterator-for-%26MerkleTree%3CE,+H,+I,+ARITY,+T%3E"],[163,"impl-Debug-for-MerkleTreeError"],[164,"impl-Display-for-MerkleTreeError"],[241,"impl-Debug-for-HasherNode%3CH%3E"],[242,"impl-Display-for-HasherNode%3CH%3E"],[266,"impl-TryFrom%3CTaggedBase64%3E-for-HasherNode%3CH%3E"],[267,"impl-TryFrom%3C%26TaggedBase64%3E-for-HasherNode%3CH%3E"],[306,"impl-IntoIterator-for-LightWeightMerkleTree%3CE,+H,+I,+ARITY,+T%3E"],[307,"impl-IntoIterator-for-%26LightWeightMerkleTree%3CE,+H,+I,+ARITY,+T%3E"],[465,"impl-DigestAlgorithm%3CF,+I,+F%3E-for-RescueHash%3CF%3E"],[466,"impl-DigestAlgorithm%3CInterval%3CF%3E,+u64,+F%3E-for-RescueHash%3CF%3E"],[468,"impl-DigestAlgorithm%3CInterval%3CF%3E,+u64,+F%3E-for-RescueHash%3CF%3E"],[469,"impl-DigestAlgorithm%3CF,+I,+F%3E-for-RescueHash%3CF%3E"],[610,"impl-IntoIterator-for-UniversalMerkleTree%3CE,+H,+I,+ARITY,+T%3E"],[611,"impl-IntoIterator-for-%26UniversalMerkleTree%3CE,+H,+I,+ARITY,+T%3E"]]}],\
["jf_pcs",{"doc":"Polynomial Commitment Scheme","t":"RRRRERRKRRRKKRMMMHMCMMNNNNNMMMMCMCCMMNMCMPPPPGPPPNNNNNNNNNNNNNNNNNNIFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNFEEEEFFFEEEEEEFFFNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOHOOOOOONNNNNNNNNNNNNNNNHOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNN","n":["BatchCommitment","BatchProof","Commitment","Evaluation","PCSError","Point","Polynomial","PolynomialCommitmentScheme","Proof","ProverParam","SRS","StructuredReferenceString","UnivariatePCS","VerifierParam","batch_commit","batch_open","batch_verify","checked_fft_size","commit","errors","extract_prover_param","extract_verifier_param","load_srs_from_file","load_srs_from_file","multi_open","multi_open_rou","multi_open_rou_eval_domain","multi_open_rou_evals","multi_open_rou_proofs","multi_point_open","multi_point_verify","multilinear_kzg","open","prelude","transcript","trim","trim","trim_fft_size","trim_with_verifier_degree","univariate_kzg","verify","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","PCSError","SerializationError","TranscriptError","UpstreamError","as_error_source","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","to_string","try_from","try_into","type_id","vzip","MLE","MultilinearKzgBatchProof","MultilinearKzgPCS","MultilinearKzgProof","batch_check","batch_check","batch_commit","batch_open","batch_verify","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone_into","clone_into","commit","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","hash","init","init","init","into","into","into","open","proof","proofs","q_x_commit","q_x_opens","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","to_owned","to_owned","trim","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","Commitment","MLE","MultilinearKzgBatchProof","MultilinearKzgPCS","MultilinearKzgProof","MultilinearProverParam","MultilinearUniversalParams","MultilinearVerifierParam","PCSError","PolynomialCommitmentScheme","StructuredReferenceString","UnivariateKzgBatchProof","UnivariateKzgPCS","UnivariateKzgProof","UnivariateProverParam","UnivariateUniversalParams","UnivariateVerifierParam","as_ref","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","beta_h","beta_h","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extract_prover_param","extract_prover_param","extract_verifier_param","extract_verifier_param","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","g","g","g","get_batched_nv","h","h","h","h","h_mask","h_mask","hash","init","init","init","init","init","init","init","into","into","into","into","into","into","into","max_degree","merge_polynomials","num_vars","num_vars","powers_of_g","powers_of_g","powers_of_g","powers_of_g","powers_of_h","powers_of_h","prover_param","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trim","trim","trim_with_verifier_degree","trim_with_verifier_degree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","IOPTranscript","InvalidTranscript","SerializationError","TranscriptError","append_message","append_serializable_element","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","get_and_append_byte_challenge","get_and_append_challenge","init","init","into","into","new","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","UnivariateKzgBatchProof","UnivariateKzgPCS","UnivariateKzgProof","batch_check","batch_commit","batch_open","batch_verify","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","commit","deref","deref","deref_mut","deref_mut","deserialize_with_mode","drop","drop","eq","equivalent","equivalent","fmt","from","from","hash","init","init","into","into","multi_open","multi_open_rou_evals","multi_open_rou_proofs","multi_point_open","multi_point_verify","open","proof","serialize_with_mode","serialized_size","to_owned","trim","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip"],"q":[[0,"jf_pcs"],[41,"jf_pcs::errors"],[67,"jf_pcs::multilinear_kzg"],[143,"jf_pcs::prelude"],[357,"jf_pcs::transcript"],[397,"jf_pcs::univariate_kzg"],[450,"core::result"],[451,"core::borrow"],[452,"alloc::vec"],[453,"rand_core"],[454,"rand_core"],[455,"ark_poly::domain::radix2"],[456,"core::error"],[457,"core::fmt"],[458,"core::fmt"],[459,"alloc::string"],[460,"core::any"],[461,"ark_ec::pairing"],[462,"core::iter::traits::iterator"],[463,"core::marker"],[464,"core::clone"],[465,"ark_serialize"],[466,"ark_serialize"],[467,"core::cmp"],[468,"core::fmt"],[469,"std::io"],[470,"core::default"],[471,"ark_poly::evaluations::multivariate::multilinear::dense"],[472,"ark_ff::fields::prime"],[473,"ark_serialize"]],"d":["Batch commitments","Batch proofs","Commitments","Polynomial Evaluation","","Polynomial input domain","Polynomial and its associated types","This trait defines APIs for polynomial commitment schemes. …","Proofs","Prover parameters","Structured reference string","API definitions for structured reference string","Super-trait specific for univariate polynomial commitment …","Verifier parameters","Batch commit a list of polynomials","Input a list of polynomials, and a same number of points, …","Verifies that <code>value_i</code> is the evaluation at <code>x_i</code> of the …","compute the fft size (i.e. <code>num_coeffs</code>) given a degree.","Generate a binding (but not hiding) commitment for a …","Error module.","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Load public parameter in production environment. These …","Load public parameter in production environment. These …","Open a single polynomial at multiple points. The naive …","Same task as <code>PolynomialCommitmentScheme::multi_open()</code>, …","Given <code>degree</code> of the committed polynomial and <code>num_points</code> to …","Compute the evaluations in <code>Self::multi_open_rou()</code>.","Compute the opening proofs in <code>Self::multi_open_rou()</code>.","Input a polynomial, and multiple evaluation points, …","Verifies that <code>values</code> are the evaluation at the <code>points</code> of …","Main module for multilinear KZG commitment scheme","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","Prelude","Module for PolyIOP transcript.","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Similar to <code>PolynomialCommitmentScheme::trim()</code>, but trim to …","Trim the universal parameters to specialize the public …","Main module for univariate KZG commitment scheme","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","A <code>enum</code> specifying the possible failure modes of the PCS.","An error during (de)serialization: {0}","Transcript error {0}","Error from upstream dependencies: {0}","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Multi-linear Extension (MLE) polynomial, this type alias …","proof of batch opening","KZG Polynomial Commitment Scheme on multilinear …","proof of opening","","","Batch commit a list of polynomials.","Input","Verifies that <code>value</code> is the evaluation at <code>x_i</code> of the …","","","","","","","","","","","","","Generate a commitment for a polynomial.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","The actual proof","Evaluation of quotients","Commitment to q(x):= w(l(x)) where","openings of q(x) at 1, omega, …, and r","","","","","","","Trim the universal parameters to specialize the public …","","","","","","","","","","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","","","","A commitment is an Affine point.","","","","","Prover Config","Universal Parameter","Verifier Config","","","","","","","<code>UnivariateProverParam</code> is used to generate a proof","<code>UniversalParams</code> are the universal parameters for the KZG10 …","<code>UnivariateVerifierParam</code> is used to check evaluation proofs …","","","","","","","","","\\\\beta times the above generator of G2.","\\\\beta times the above generator of G2.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the prover parameters from the public parameters.","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Extract the verifier parameters from the public parameters.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generator for G1","generator of G1","TODO: remove g, h and beta_h The generator of G1.","Return the number of variables that one need for an MLE to …","generator for G2","generator of G2","TODO: remove h and beta_h The generator of G2.","The generator of G2.","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the maximum supported degree","merge a set of polynomials. Returns an error if the …","number of variables","number of variables","<code>pp_{0}</code>, <code>pp_{1}</code>, …,pp_{nu_vars} defined by XZZPD19 where …","Group elements of the form <code>{ \\\\beta^i G }</code>, where <code>i</code> ranges …","Config","powers of \\\\beta time the generator g of G1: only used for …","powers of \\\\beta time the generator h of G2","powers of \\\\beta time the generator h of G2: only used for …","prover parameters","","","","","","","","","","","","","","","","","","","","","","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Naive implementation","Trim the universal parameters to specialize the public …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An IOP transcript consists of a Merlin transcript and a …","Invalid Transcript: {0}","An error during (de)serialization: {0}","A <code>enum</code> specifying the possible failure modes of the …","Append the message to the transcript.","Append the message to the transcript.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Generate the challenge from the current transcript and …","Generate the challenge from the current transcript and …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new IOP transcript.","","","","","","","","","","","batch proof","KZG Polynomial Commitment Scheme on univariate polynomial.","proof of opening","","Generate a commitment for a list of polynomials","Input a list of polynomials, and a same number of points, …","Verifies that <code>value_i</code> is the evaluation at <code>x_i</code> of the …","","","","","","","","Generate a commitment for a polynomial Note that the …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Fast computation of batch opening for a single polynomial …","Compute the evaluations in <code>Self::multi_open_rou()</code>.","","Input a polynomial, and multiple evaluation points, …","Verifies that <code>values</code> are the evaluation at the <code>points</code> of …","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","Evaluation of quotients","","","","Trim the universal parameters to specialize the public …","","","","","","","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","",""],"i":[56,56,56,56,0,56,56,0,56,13,56,0,0,13,56,56,56,0,56,0,13,13,56,13,56,57,57,57,57,57,57,0,56,0,0,56,13,57,13,0,56,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,27,30,58,58,58,58,27,30,58,27,30,27,30,27,30,27,30,58,58,27,30,58,27,30,27,30,58,27,30,27,30,27,27,30,30,27,30,58,27,30,27,58,27,30,58,27,30,58,30,27,30,30,27,30,27,30,27,30,58,58,27,30,58,27,30,58,27,30,58,58,27,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,42,43,44,39,45,46,47,45,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,39,45,46,47,39,39,45,45,46,46,47,47,42,45,42,45,42,43,44,39,45,46,47,42,43,44,39,39,45,46,47,43,44,47,0,43,44,45,47,42,44,39,42,43,44,39,45,46,47,42,43,44,39,45,46,47,45,0,43,44,43,45,46,47,45,47,42,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,45,42,45,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,42,43,44,39,45,46,47,0,22,22,0,52,52,22,52,22,52,52,52,22,52,22,52,22,52,22,22,22,22,52,52,52,22,52,22,52,52,52,22,22,52,22,52,22,52,22,52,0,0,0,55,59,59,59,59,55,59,55,55,55,55,59,59,55,59,55,55,59,55,55,55,55,55,59,55,55,59,55,59,55,59,59,59,59,59,59,55,55,55,55,59,59,55,59,55,59,55,59,59,55],"f":"``````````````{{c{b{e}}}{{f{gd}}}h{}{}}{{ce{b{g}}{b{i}}}{{f{{l{k{j{m}}}}d}}}h{}{}{}{}{}}{{c{b{e}}{b{g}}ik}{{f{nd}}}{}{}{}{}{A`Ab}}{Ad{{f{Add}}}}{{ce}{{f{gd}}}h{}{}}`{{{Aj{}{{Af{c}}{Ah{e}}}}Ad}c{}{}}{{{Aj{}{{Af{c}}{Ah{e}}}}Ad}e{}{}}{{Ad{An{Al}}}{{f{cd}}}{}}{{Ad{An{Al}}}{{f{{Aj{}{{Af{c}}{Ah{e}}}}d}}}{}{}}{{ce{b{g}}}{{f{{l{{j{i}}{j{k}}}}d}}}h{}{}{}{}}{{ceAd{B`{g}}}{{f{{l{{j{i}}{j{g}}}}d}}}h{}{}{}}{{AdAd}{{f{{B`{c}}d}}}{}}{{cAd{B`{e}}}{{f{{j{e}}d}}}{}{}}{{ceAd{B`{g}}}{{f{{j{i}}d}}}h{}{}{}}{{ce{b{g}}}{{f{{l{i{j{k}}}}d}}}h{}{}{}{}}{{ce{b{g}}{b{i}}k}{{f{nd}}}h{}{}{}{}}`{{ceg}{{f{{l{ik}}d}}}h{}{}{}{}}``{{eAd{An{Ad}}}{{f{ld}}}{}{{h{c}}}}{{{Aj{}{{Af{c}}{Ah{e}}}}Ad}{{f{{l{ce}}d}}}{}{}}{{eAd}{{f{ld}}}{}{{h{c}}}}{{{Aj{}{{Af{c}}{Ah{e}}}}AdAd}{{f{{l{ce}}d}}}{}{}}`{{cegi}{{f{nd}}}{}{}{}{}}````````{cBb{}}{ce{}{}}0{Adc{}}0{AdBd}{{dBf}Bh}0{Bjd}{Bld}{cc{}}{{}Ad}7{cBn{}}{c{{f{e}}}{}{}}0{cC`{}}:````{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Cf{c}}}}}}Cj}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Cl{c}}}}}}Cj}}{{c{b{e}}}{{f{gd}}}h{}{}}{{ce{b{g}}{b{i}}}{{f{{l{k{j{m}}}}d}}}h{}{}{}{}{}}{{c{b{e}}bgi}{{f{nd}}}{}{}{}{A`Ab}}??????{{{Cf{c}}}{{f{BdBj}}}Cb}{{{Cl{c}}}{{f{BdBj}}}Cb}{{{Cf{c}}}{{Cf{c}}}{CnCb}}{{{Cl{c}}}{{Cl{c}}}{CnCb}}{{ce}Bd{}{}}0{{ce}{{f{gd}}}h{}{}}{Adc{}}00000{{cD`Db}{{f{{Cf{e}}Bj}}}DdCb}{{cD`Db}{{f{{Cl{e}}Bj}}}DdCb}{AdBd}00{{{Cf{c}}{Cf{c}}}n{DfCb}}{{{Cl{c}}{Cl{c}}}n{DfCb}}{{ce}n{}{}}000{{{Cf{c}}Bf}Bh{DhCb}}{{{Cl{c}}Bf}Bh{DhCb}}{cc{}}00{{{Cf{c}}e}BdCbDj}{{}Ad}00{ce{}{}}00{{ceg}{{f{{l{ik}}d}}}h{}{}{}{}}````{{{Cf{c}}eD`}{{f{BdBj}}}CbDl}{{{Cl{c}}eD`}{{f{BdBj}}}CbDl}{{{Cf{c}}D`}AdCb}{{{Cl{c}}D`}AdCb}55{{eAd{An{Ad}}}{{f{ld}}}{}{{h{c}}}}{c{{f{e}}}{}{}}00000{cC`{}}00{{ceg}{{f{nd}}}{}{}{}}999`````````````````{{{Dn{e}}}cE`{{Cb{}{{Eb{c}}}}}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Ed{c}}}}}}Cj}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Ef{c}}}}}}Cj}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Eh{c}}}}}}Cj}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Dn{c}}}}}}Cj}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Ej{c}}}}}}Cj}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{El{c}}}}}}Cj}}{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{En{c}}}}}}Cj}}``{ce{}{}}0000000000000{{{Ed{c}}}{{f{BdBj}}}Cb}{{{Ef{c}}}{{f{BdBj}}}Cb}{{{Eh{c}}}{{f{BdBj}}}Cb}{{{Dn{c}}}{{f{BdBj}}}Cb}{{{Ej{c}}}{{f{BdBj}}}Cb}{{{El{c}}}{{f{BdBj}}}Cb}{{{En{c}}}{{f{BdBj}}}Cb}{{{Ed{c}}}{{Ed{c}}}{CnCb}}{{{Ef{c}}}{{Ef{c}}}{CnCb}}{{{Eh{c}}}{{Eh{c}}}{CnCb}}{{{Dn{c}}}{{Dn{c}}}{CnCb}}{{{Ej{c}}}{{Ej{c}}}{CnCb}}{{{El{c}}}{{El{c}}}{CnCb}}{{{En{c}}}{{En{c}}}{CnCb}}{{ce}Bd{}{}}000000{{}{{Dn{c}}}Cb}{{}{{Ej{c}}}{F`Cb}}{{}{{El{c}}}{F`Cb}}{{}{{En{c}}}Cb}{Adc{}}0000000000000{{cD`Db}{{f{{Ed{e}}Bj}}}DdCb}{{cD`Db}{{f{{Ef{e}}Bj}}}DdCb}{{cD`Db}{{f{{Eh{e}}Bj}}}DdCb}{{cD`Db}{{f{{Dn{e}}Bj}}}DdCb}{{cD`Db}{{f{{Ej{e}}Bj}}}DdCb}{{cD`Db}{{f{{El{e}}Bj}}}DdCb}{{cD`Db}{{f{{En{e}}Bj}}}DdCb}{AdBd}000000{{{Dn{c}}{Dn{c}}}n{DfCb}}{{{Ej{c}}{Ej{c}}}n{DfCb}}{{{El{c}}{El{c}}}n{DfCb}}{{{En{c}}{En{c}}}n{DfCb}}{{ce}n{}{}}0000000{{{Ed{c}}Ad}eCb{}}{{{Ej{c}}Ad}eCb{}}10{{{Ed{c}}Bf}Bh{DhCb}}{{{Ef{c}}Bf}Bh{DhCb}}{{{Eh{c}}Bf}Bh{DhCb}}{{{Dn{c}}Bf}Bh{DhCb}}{{{Ej{c}}Bf}Bh{DhCb}}{{{El{c}}Bf}Bh{DhCb}}{{{En{c}}Bf}Bh{DhCb}}{cc{}}000{c{{Dn{e}}}E`{{Cb{}{{Eb{c}}}}}}111```{{AdAd}Ad}``````{{{Dn{c}}e}BdCbDj}{{}Ad}000000{ce{}{}}000000{{{Ej{c}}}AdCb}{{{b{{Fb{c}}}}}{{f{{Fd{c}}d}}}Ff}`````````{{{Ed{c}}eD`}{{f{BdBj}}}CbDl}{{{Ef{c}}eD`}{{f{BdBj}}}CbDl}{{{Eh{c}}eD`}{{f{BdBj}}}CbDl}{{{Dn{c}}eD`}{{f{BdBj}}}CbDl}{{{Ej{c}}eD`}{{f{BdBj}}}CbDl}{{{El{c}}eD`}{{f{BdBj}}}CbDl}{{{En{c}}eD`}{{f{BdBj}}}CbDl}{{{Ed{c}}D`}AdCb}{{{Ef{c}}D`}AdCb}{{{Eh{c}}D`}AdCb}{{{Dn{c}}D`}AdCb}{{{Ej{c}}D`}AdCb}{{{El{c}}D`}AdCb}{{{En{c}}D`}AdCb}{ce{}{}}000000{{{Ed{c}}Ad}{{f{{l{eg}}d}}}Cb{}{}}{{{Ej{c}}Ad}{{f{{l{eg}}d}}}Cb{}{}}{{{Ed{c}}AdAd}{{f{{l{eg}}d}}}Cb{}{}}{{{Ej{c}}AdAd}{{f{{l{eg}}d}}}Cb{}{}}{c{{f{e}}}{}{}}0000000000000{cC`{}}0000006666666````{{{Fh{c}}{b{Fj}}{b{Fj}}}{{f{BdBl}}}Ff}{{{Fh{c}}{b{Fj}}e}{{f{BdBl}}}FfFl}8888{{{Fh{c}}}{{Fh{c}}}{CnFf}}{{ce}Bd{}{}}{Adc{}}000{AdBd}0{{BlBf}Bh}0{cc{}}{BjBl}18{{{Fh{c}}{b{Fj}}}{{f{cBl}}}Ff}{{}Ad}0{ce{}{}}0{{{b{Fj}}}{{Fh{c}}}Ff}1{cBn{}}????>>22```{e{{f{BdBj}}}Cb{{Ch{}{{Cd{{Fn{c}}}}}}Cj}}{{e{b{g}}}{{f{id}}}Cb{{h{{El{c}}}}}{}{}}{{eg{b{i}}{b{k}}}{{f{{l{m{j{o}}}}d}}}Cb{{h{{El{c}}}}}{}{}{}{}{}}{{{En{c}}e{b{g}}bik}{{f{nd}}}Cb{}{}{}{A`Ab}}6666{{{Fn{c}}}{{f{BdBj}}}Cb}{{{Fn{c}}}{{Fn{c}}}{CnCb}}{{ce}Bd{}{}}{{eg}{{f{id}}}Cb{{h{{El{c}}}}}{}{}}{Adc{}}000{{cD`Db}{{f{{Fn{e}}Bj}}}DdCb}{AdBd}0{{{Fn{c}}{Fn{c}}}n{DfCb}}{{ce}n{}{}}0{{{Fn{c}}Bf}Bh{DhCb}}{cc{}}0{{{Fn{c}}e}BdCbDj}{{}Ad}0{ce{}{}}0{{eg{b{i}}}{{f{{l{{j{k}}{j{m}}}}d}}}Cb{{h{{El{c}}}}}{}{}{}{}}{{cAd{B`{e}}}{{f{{j{e}}d}}}{}{}}{{ceAd{B`{g}}}{{f{{j{i}}d}}}h{}{}{}}{{ce{b{g}}}{{f{{l{i{j{k}}}}d}}}h{}{}{}{}}{{ce{b{g}}{b{i}}k}{{f{nd}}}h{}{}{}{}}{{egi}{{f{{l{km}}d}}}Cb{{h{{El{c}}}}}{}{}{}{}}`{{{Fn{c}}eD`}{{f{BdBj}}}CbDl}{{{Fn{c}}D`}AdCb}8{{eAd{An{Ad}}}{{f{{l{{El{g}}{En{g}}}}d}}}{}{{h{c}}}Cb}{c{{f{e}}}{}{}}000{cC`{}}0{{{En{c}}egi}{{f{nd}}}Cb{}{}{}}<<","c":[],"p":[[1,"slice"],[6,"PCSError",41],[6,"Result",450],[10,"Borrow",451],[5,"Vec",452],[1,"tuple"],[1,"bool"],[10,"RngCore",453],[10,"CryptoRng",453],[1,"usize"],[17,"ProverParam"],[17,"VerifierParam"],[10,"StructuredReferenceString",0],[1,"str"],[6,"Option",454],[5,"Radix2EvaluationDomain",455],[10,"Error",456],[1,"unit"],[5,"Formatter",457],[8,"Result",457],[6,"SerializationError",458],[6,"TranscriptError",357],[5,"String",459],[5,"TypeId",460],[10,"Pairing",461],[17,"Item"],[5,"MultilinearKzgProof",67],[10,"Iterator",462],[10,"Send",463],[5,"MultilinearKzgBatchProof",67],[10,"Clone",464],[6,"Compress",465],[6,"Validate",465],[10,"Read",466],[10,"PartialEq",467],[10,"Debug",457],[10,"Hasher",468],[10,"Write",466],[5,"Commitment",143],[10,"AffineRepr",469],[17,"G1Affine"],[5,"MultilinearUniversalParams",143],[5,"MultilinearProverParam",143],[5,"MultilinearVerifierParam",143],[5,"UnivariateUniversalParams",143],[5,"UnivariateProverParam",143],[5,"UnivariateVerifierParam",143],[10,"Default",470],[8,"MLE",67],[5,"DenseMultilinearExtension",471],[10,"PrimeField",472],[5,"IOPTranscript",357],[1,"u8"],[10,"CanonicalSerialize",465],[5,"UnivariateKzgProof",397],[10,"PolynomialCommitmentScheme",0],[10,"UnivariatePCS",0],[5,"MultilinearKzgPCS",67],[5,"UnivariateKzgPCS",397]],"b":[[55,"impl-Display-for-PCSError"],[56,"impl-Debug-for-PCSError"],[57,"impl-From%3CSerializationError%3E-for-PCSError"],[58,"impl-From%3CTranscriptError%3E-for-PCSError"],[375,"impl-Display-for-TranscriptError"],[376,"impl-Debug-for-TranscriptError"]]}],\
["jf_plonk",{"doc":"A Rust Implementation of the Plonk ZKP System and …","t":"EGPPNNNNNCNNCNNNNNNNCNNNNNNNNCNCNNNNCCFKFNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNSPPPPPPPPPPPGPPPGPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRFRRKRRNNCNNNNNNNNNNNNNNMNMNCNNNNMNNNFFNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFIIFFFFFFFIFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNOOOKFFFNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNN","n":["PlonkError","PlonkType","TurboPlonk","UltraPlonk","__clone_box","as_any","as_any_mut","borrow","borrow_mut","circuit","clone","clone_into","constants","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","errors","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","proof_system","to_owned","transcript","try_from","try_into","type_id","vzip","plonk_verifier","transcript","BatchProofVar","BatchableCircuit","VerifyingKeyVar","__clone_box","__clone_box","aggregate_verify_keys","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","partial_verify_circuit","to_owned","to_owned","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RescueTranscriptVar","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","vzip","KECCAK256_STATE_SIZE","CircuitError","DivisionError","DomainCreationError","IndexError","IndexTooLarge","InvalidParameters","IoError","IteratorOutOfRange","NonNativeFieldOverflow","PCSError","ParameterError","PlonkError","PublicInputsDoNotMatch","RescueError","SerializationError","SnarkError","SnarkError","SnarkLookupUnsupported","WrongProof","WrongQuotientPolyDegree","as_any","as_any","as_any_mut","as_any_mut","as_error_source","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Error","PlonkKzgSnark","Proof","ProvingKey","UniversalSNARK","UniversalSRS","VerifyingKey","as_any","as_any_mut","batch_arg","batch_prove","batch_verify","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","new","preprocess","preprocess","prove","prove","structs","try_from","try_into","type_id","universal_setup","verify","verify","verify_batch_proof","vzip","BatchArgument","Instance","__clone_box","aggregate_verify_keys","as_any","as_any","as_any_mut","as_any_mut","batch_prove","borrow","borrow","borrow_mut","borrow_mut","build_batch_proof_and_vks_for_test","circuit_mut_ref","clone","clone_into","decide","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","partial_verify","setup_instance","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_key_ref","vzip","vzip","BatchProof","CommitKey","OpenKey","PlookupEvaluations","PlookupProof","PlookupProvingKey","PlookupVerifyingKey","Proof","ProofEvaluations","ProvingKey","UniversalSrs","VerifyingKey","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","beta_h","beta_h","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","convert_te_coordinates_to_scalars","create_variables","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","domain_size","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy","dummy","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","g","h","h","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","is_merged","k","len","num_inputs","open_key","opening_proof","perm_next_eval","plookup_proof","plookup_vk","poly_evals","powers_of_g","powers_of_g","powers_of_g","powers_of_h","powers_of_h","prod_perm_poly_comm","selector_comms","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","shifted_opening_proof","sigma_comms","split_quot_poly_comms","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wire_sigma_evals","wires_evals","wires_poly_comms","PlonkTranscript","RescueTranscript","SolidityTranscript","StandardTranscript","append_challenge","append_challenge","append_commitment","append_commitment","append_commitments","append_message","append_message","append_message","append_message","append_plookup_evaluations","append_plookup_evaluations","append_proof_evaluations","append_proof_evaluations","append_vk_and_pub_input","append_vk_and_pub_input","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_and_append_challenge","get_and_append_challenge","get_and_append_challenge","get_and_append_challenge","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"jf_plonk"],[36,"jf_plonk::circuit"],[38,"jf_plonk::circuit::plonk_verifier"],[97,"jf_plonk::circuit::transcript"],[115,"jf_plonk::constants"],[116,"jf_plonk::errors"],[183,"jf_plonk::proof_system"],[220,"jf_plonk::proof_system::batch_arg"],[267,"jf_plonk::proof_system::structs"],[618,"jf_plonk::transcript"],[696,"dyn_clone::sealed"],[697,"core::any"],[698,"core::fmt"],[699,"core::fmt"],[700,"core::hash"],[701,"alloc::boxed"],[702,"alloc::sync"],[703,"alloc::rc"],[704,"core::any"],[705,"jf_relation"],[706,"ark_ec::pairing"],[707,"core::clone"],[708,"ark_ff::fields::prime"],[709,"core::cmp"],[710,"core::fmt"],[711,"jf_relation::gadgets::ecc::conversion"],[712,"ark_ec::models::short_weierstrass"],[713,"ark_ec::models::short_weierstrass::affine"],[714,"jf_relation::gadgets::ecc"],[715,"jf_relation::gadgets::ultraplonk::mod_arith"],[716,"jf_relation::constraint_system"],[717,"ark_ec::models::twisted_edwards"],[718,"core::error"],[719,"ark_serialize::error"],[720,"std::io::error"],[721,"jf_pcs::errors"],[722,"jf_rescue"],[723,"rand_core"],[724,"rand_core"],[725,"jf_relation::constraint_system"],[726,"core::marker"],[727,"ark_ff::fields"],[728,"serde::de"],[729,"ark_serialize"],[730,"ark_serialize"],[731,"core::hash"],[732,"std::io"],[733,"jf_pcs::structs"]],"d":["","Enum for each type of Plonk scheme.","TurboPlonk","TurboPlonk that supports Plookup","","","","","","Customized circuit","","","Crate wide constants.","","","","","","","","Error module.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Interfaces for Plonk-based proof systems","","This module implements three different types of …","","","","","Circuits implementation Circuits for Plonk verifiers.","Implementing <em>native</em> circuit for rescue transcript","Represent variables of an aggregated SNARK proof that …","Plonk Circuit that support batch verification","Represent variable of a Plonk verifying key.","","","Aggregate verification keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a variable for a Plonk verifying key.","Circuit for partially verifying a batched proof without …","","","Convert to a list of variables.","","","","","","","","","Struct of variables representing a Rescue transcript type, …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Keccak-256 have a 32 byte state size.","An error in the Plonk circuit: {0}","Divided by zero field element","Failed to create domain","Failed to get array value by index","The index is too large for the universal public parameters","Invalid parameters","An error during IO: {0}","Iterator out of range","Non-native field overflow","An error in the underlying polynomial commitment: {0}","Invalid parameters: {0}","A <code>enum</code> specifying the possible failure modes of the Plonk.","Public inputs for partial verification circuit do not match","Rescue Error","An error during (de)serialization","A <code>enum</code> specifying the possible failure modes of the …","An error in the Plonk SNARK logic: {0}","The SNARK does not support lookup","Plonk proof verification failed due to wrong proof","Suspect: circuit is not satisfied. The quotient polynomial …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","SNARK related error","A Plonk instantiated with KZG PCS","The SNARK proof computed by the prover.","The parameters required by the prover to compute a proof …","An interface for SNARKs with universal setup.","Universal Structured Reference String from <code>universal_setup</code>…","The parameters required by the verifier to validate a …","","","An argument system that proves/verifies multiple instances …","Generate an aggregated Plonk proof for multiple instances.","Batch verify multiple SNARK proofs (w.r.t. different …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","A new Plonk KZG SNARK","Circuit-specific preprocessing to compute the …","Input a circuit and the SRS, precompute the proving key …","Compute a SNARK proof of a circuit <code>circuit</code>, using the …","Compute a Plonk proof. Refer to Sec 8.4 of …","Data structures used in Plonk proof systems","","","","Generate the universal SRS for the argument system. This …","Verify a SNARK proof <code>proof</code> of the circuit <code>circuit</code>, with …","","Verify a single aggregated Plonk proof.","","A batching argument.","A circuit instance that consists of the corresponding …","","Aggregate verification keys","","","","","Prove satisfiability of multiple instances in a batch.","","","","","Create <code>num_instances</code> type A/B instance verifying keys and …","Get mutable circuit by reference.","","","Perform the final pairing to verify the proof.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Partially verify a batched proof without performing the …","Setup the circuit and the proving key for a (mergeable) …","","","","","","","","Get verification key by reference.","","","An aggregated SNARK proof that batchly proving multiple …","Commitment key","Key for verifying PCS opening proof.","A struct that stores the polynomial evaluations in a …","A Plookup argument proof.","Preprocessed prover parameters used to compute Plookup …","Preprocessed verifier parameters used to verify Plookup …","A Plonk SNARK proof.","A struct that stores the polynomial evaluations in a Plonk …","Preprocessed prover parameters used to compute Plonk …","Universal StructuredReferenceString","Preprocessed verifier parameters used to verify Plonk …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\beta times the above generator of G2.","\\\\beta times the above generator of G2.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the group elements to a list of scalars that …","Create a <code>BatchProofVar</code> variable from a <code>BatchProof</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of the evaluation domain. Should be a power of …","","","","","","","","","","Create a dummy batch proof over <code>n</code> TurboPlonk instances.","Create a dummy TurboPlonk verification key for a circuit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","TODO: remove g, h and beta_h The generator of G1.","TODO: remove h and beta_h The generator of G2.","The generator of G2.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check whether a BatchProof proves nothing.","A flag indicating whether the key is a merged key.","The constants K0, …, K_num_wire_types that ensure wire …","The number of instances being proved in a batch proof.","The number of public inputs.","KZG PCS opening key.","(Aggregated) proof of evaluations at challenge point <code>zeta</code>.","Permutation product polynomial evaluation at point <code>zeta * g</code>…","The partial proof for Plookup argument","Plookup verifying key, None if not support lookup.","Polynomial evaluations.","Group elements of the form <code>{ \\\\beta^i G }</code>, where <code>i</code> ranges …","Config","powers of \\\\beta time the generator g of G1: only used for …","powers of \\\\beta time the generator h of G2","powers of \\\\beta time the generator h of G2: only used for …","The polynomial commitment for the wire permutation …","The selector polynomial commitments. The commitments are …","","","","","","","","","","","","","","","","","","","","","(Aggregated) proof of evaluation at challenge point …","The permutation polynomial commitments. The commitments …","Split quotient polynomial commitments.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The verifying key. It is used by prover to initialize …","","","","","","","","","","Extended permutation (sigma) polynomials evaluations at …","Wire witness polynomials evaluations at point <code>zeta</code>.","Wire witness polynomials commitments.","Defines transcript APIs.","Transcript with rescue hash function.","Transcript with <code>keccak256</code> hash function.","A wrapper of <code>merlin::Transcript</code>.","Append a challenge to the transcript. <code>_label</code> is omitted for","Append a challenge to the transcript.","Append a single commitment to the transcript. <code>_label</code> is …","Append a single commitment to the transcript.","Append a slice of commitments to the transcript.","Append the message to the transcript.","Append the message to the transcript. <code>_label</code> is omitted for","Append the message to the transcript. <code>_label</code> is omitted for","","","Append the plookup evaluation to the transcript.","","Append a proof evaluation to the transcript.","","Append the verification key and the public input to the …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate the challenge for the current transcript, and …","Generate the challenge for the current transcript, and …","Generate the challenge for the current transcript, and …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create a new plonk transcript.","Create a new plonk transcript. <code>_label</code> is omitted for …","Create a new plonk transcript. <code>label</code> is omitted for …","create a new plonk transcript","","","","","","","","","","","",""],"i":[0,0,4,4,4,4,4,4,4,0,4,4,0,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,0,4,0,4,4,4,4,0,0,0,0,0,21,16,15,21,16,21,16,21,16,21,16,21,16,21,16,21,16,21,16,21,16,21,16,21,21,21,16,16,16,21,16,21,16,21,16,21,16,21,16,21,16,21,16,16,16,21,16,16,21,16,21,16,21,16,21,16,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,42,42,42,42,42,42,42,42,42,42,43,0,42,42,42,0,42,43,42,43,42,43,42,43,42,42,43,42,43,42,43,42,43,42,43,42,42,43,43,42,42,42,42,42,42,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,87,0,87,87,0,87,87,57,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,87,57,87,57,0,57,57,57,87,87,57,57,57,0,0,58,88,88,58,88,58,88,88,58,88,58,0,58,58,58,88,88,58,88,58,88,58,88,58,88,58,88,58,88,58,88,88,58,88,88,58,88,58,88,58,88,58,58,88,58,0,0,0,0,0,0,0,0,0,0,0,0,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,59,60,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,28,50,67,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,50,54,65,50,67,68,49,69,28,70,28,54,65,50,67,68,49,69,28,70,50,28,54,65,50,67,68,49,69,28,70,54,54,54,65,65,65,50,50,50,67,67,67,68,68,68,49,49,49,69,69,69,28,28,28,70,70,70,54,54,65,50,50,67,68,49,69,28,70,54,65,50,50,67,68,49,69,28,70,54,50,60,59,60,54,65,50,67,68,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,50,28,28,50,28,28,54,67,54,28,54,59,89,60,59,60,54,28,54,50,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,28,54,54,50,54,65,50,67,68,49,69,28,70,54,50,54,54,54,54,65,50,50,50,67,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,54,65,50,67,68,49,69,28,70,49,54,65,50,67,68,49,69,28,70,67,67,54,0,0,0,0,81,82,81,82,82,82,81,84,85,81,82,81,82,81,82,81,84,85,81,84,85,81,84,85,81,84,85,81,84,85,81,84,85,81,84,85,81,84,85,82,81,84,85,81,84,85,81,84,85,81,84,85,81,84,85,81,84,85,82,81,84,85,81,84,85,81,84,85,81,84,85,81,84,85],"f":"````{{cb}d{}}{cf{}}0{ce{}{}}0`{hh}{{ce}d{}{}}`{jc{}}0{jd}{{hh}l}{{ce}l{}{}}00`{{hn}{{Ab{dA`}}}}{cc{}}{{hc}dAd}{{}j}:{{{Af{c}}}{{Af{f}}}{}}{{{Ah{c}}}{{Ah{f}}}{}}{{{Aj{c}}}{{Aj{f}}}{}}`=`{c{{Ab{e}}}{}{}}0{cAl{}}?`````{{cb}d{}}0{{An{Bb{{B`{c}}}}{Bb{{B`{c}}}}}{{Ab{{Bd{{B`{c}}}}Bf}}}Bh}{cf{}}000{ce{}{}}000{{{Bj{c}}}{{Bj{c}}}{BlBn}}{{{B`{c}}}{{B`{c}}}{BlBh}}{{ce}d{}{}}0{jc{}}000{jd}0{{{Bj{c}}{Bj{c}}}l{C`Bn}}{{{B`{c}}{B`{c}}}l{C`Bh}}{{ce}l{}{}}00000{{{Bj{c}}n}Cb{CdBn}}{{{B`{c}}n}Cb{CdBh}}{cc{}}0{{}j}0<<{{{Af{c}}}{{Af{f}}}{}}0{{{Ah{c}}}{{Ah{f}}}{}}0{{{Aj{c}}}{{Aj{f}}}{}}0{{{Cf{c}}{Ch{g}}}{{Ab{{B`{g}}Bf}}}{BnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}Bh}}{{{Cf{c}}{Dd{c}}{Dd{c}}{Bb{{B`{g}}}}{Bb{{Df{c}}}}{Bj{c}}Dh}{{Ab{{Dl{DjDj}}Bf}}}{DnCj}{{Cn{}{{Cl{c}}}}E`}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}Bh}}{ce{}{}}0{{{B`{c}}}{{Bd{Dh}}}Bh}{c{{Ab{e}}}{}{}}000{cAl{}}033`{cf{}}044{jc{}}0{jd}=<6;:94436`````````````````````2222{cEb{}}7777222211{{Edn}Cb}0{{Efn}Cb}0{BfEd}{EhEd}{EjEd}{ElEd}{EnEd}{cc{}}{EfEd}1{{}j}0{ce{}{}}0{{{Af{c}}}{{Af{f}}}{}}0{{{Ah{c}}}{{Ah{f}}}{}}0{{{Aj{c}}}{{Aj{f}}}{}}0{cF`{}}0{c{{Ab{e}}}{}{}}000{cAl{}}066```````{cf{}}0`{{c{Bb{e}}{Bb{{Fb{k}}}}}{{Ab{{Fd{k}}Ed}}}{FfFh}Fj{DnCj}{{Cn{}{{Cl{g}}}}}{{Bh{}{{Cl{g}}{D`{{Db{i}}}}}}}}{{{Bb{{Ch{g}}}}{Bb{Bb}}{Bb{{Fl{g}}}}{Bb{{G`{{Bd{Fn}}}}}}}{{Ab{dEd}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}99{jc{}}0{jd}><;:98{{}{{Gb{g}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{{ce}{{Ab{{Dl{gi}}k}}}{}Fj{}{}{}}0{{ceg{G`{{Bd{Fn}}}}}{{Ab{ik}}}{FfFh}Fj{}{}{}}0`998{{jc}{{Ab{eg}}}{FhFf}{}{}}{{cBbe{G`{{Bd{Fn}}}}}{{Ab{dg}}}{}{}{}}0{{{Bb{{Ch{g}}}}{Bb{Bb}}{Fd{g}}}{{Ab{dEd}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{ce{}{}}``{{cb}d{}}{{{Bb{{Ch{c}}}}{Bb{{Ch{c}}}}}{{Ab{{Bd{{Ch{c}}}}Ed}}}Bh}===={{c{Bb{{Gd{i}}}}{Bb{{Gd{i}}}}}{{Ab{{Fd{i}}Ed}}}{FfFh}{DnCj}{{Cn{}{{Cl{e}}}}}{{Bh{}{{Cl{e}}{D`{{Db{g}}}}}}}}3333{{c{Gf{i}}j}{{Ab{{Dl{{Fd{i}}{Bd{{Ch{i}}}}{Bd{{Ch{i}}}}}}Ed}}}{FfFh}{DnCj}{{Cn{}{{Cl{e}}}}}{{Bh{}{{Cl{e}}{D`{{Db{g}}}}}}}}{{{Gd{c}}}CfBh}{{{Gd{c}}}{{Gd{c}}}{BlBh}}{{ce}d{}{}}{{{Gh{c}}}{{Ab{lEd}}}Bh}{jc{}}000{jd}0{cc{}}0{{}j}0<<{{{Af{c}}}{{Af{f}}}{}}0{{{Ah{c}}}{{Ah{f}}}{}}{{{Aj{c}}}{{Aj{f}}}{}}0{{{Bb{{Ch{g}}}}Bb{Fd{g}}}{{Ab{DlEd}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{{{Gf{g}}CfGj}{{Ab{{Gd{g}}Ed}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{ce{}{}}{c{{Ab{e}}}{}{}}000{cAl{}}0{{{Gd{c}}}{{Ch{c}}}Bh}33````````````{{cb}d{}}00000000{cf{}}00000000000000000{e{{Ab{dEh}}}Bh{{Gn{}{{Gl{{Fl{c}}}}}}H`}}{e{{Ab{dEh}}}Bh{{Gn{}{{Gl{{Hb{c}}}}}}H`}}{e{{Ab{dEh}}}Bh{{Gn{}{{Gl{{Fd{c}}}}}}H`}}{e{{Ab{dEh}}}Hd{{Gn{}{{Gl{{Hf{c}}}}}}H`}}{e{{Ab{dEh}}}Hd{{Gn{}{{Gl{{Hh{c}}}}}}H`}}{e{{Ab{dEh}}}Bh{{Gn{}{{Gl{{Fb{c}}}}}}H`}}{e{{Ab{dEh}}}Bh{{Gn{}{{Gl{{Hj{c}}}}}}H`}}{e{{Ab{dEh}}}Bh{{Gn{}{{Gl{{Ch{c}}}}}}H`}}{e{{Ab{dEh}}}Bh{{Gn{}{{Gl{{Hl{c}}}}}}H`}}``>>>>>>>>>>>>>>>>>>{{{Fl{c}}}{{Ab{dEh}}}Bh}{{{Hb{c}}}{{Ab{dEh}}}Bh}{{{Fd{c}}}{{Ab{dEh}}}Bh}{{{Hf{c}}}{{Ab{dEh}}}Hd}{{{Hh{c}}}{{Ab{dEh}}}Hd}{{{Fb{c}}}{{Ab{dEh}}}Bh}{{{Hj{c}}}{{Ab{dEh}}}Bh}{{{Ch{c}}}{{Ab{dEh}}}Bh}{{{Hl{c}}}{{Ab{dEh}}}Bh}{{{Fl{c}}}{{Fl{c}}}{BlBh}}{{{Hb{c}}}{{Hb{c}}}{BlBh}}{{{Fd{c}}}{{Fd{c}}}{BlBh}}{{{Hf{c}}}{{Hf{c}}}{BlHd}}{{{Hh{c}}}{{Hh{c}}}{BlHd}}{{{Fb{c}}}{{Fb{c}}}{BlBh}}{{{Hj{c}}}{{Hj{c}}}{BlBh}}{{{Ch{c}}}{{Ch{c}}}{BlBh}}{{{Hl{c}}}{{Hl{c}}}{BlBh}}{{ce}d{}{}}00000000{{{Ch{g}}}{{Bd{c}}}Cj{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{{{Fd{g}}{Cf{c}}j{G`{c}}}{{Ab{{Bj{c}}Ed}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}Bh}}{{}{{Hf{c}}}Hd}{jc{}}00000000000000000{c{{Ab{{Fl{e}}}}}HnBh}{c{{Ab{{Fd{e}}}}}HnBh}{{cI`Ib}{{Ab{{Fl{e}}Eh}}}IdBh}{{cI`Ib}{{Ab{{Hb{e}}Eh}}}IdBh}{{cI`Ib}{{Ab{{Fd{e}}Eh}}}IdBh}{{cI`Ib}{{Ab{{Hf{e}}Eh}}}IdHd}{{cI`Ib}{{Ab{{Hh{e}}Eh}}}IdHd}{{cI`Ib}{{Ab{{Fb{e}}Eh}}}IdBh}{{cI`Ib}{{Ab{{Hj{e}}Eh}}}IdBh}{{cI`Ib}{{Ab{{Ch{e}}Eh}}}IdBh}{{cI`Ib}{{Ab{{Hl{e}}Eh}}}IdBh}`{jd}00000000{j{{Fd{c}}}Bh}{{jj}{{Ch{c}}}Bh}{{{Fl{c}}{Fl{c}}}l{C`Bh}}{{{Hb{c}}{Hb{c}}}l{C`Bh}}{{{Fd{c}}{Fd{c}}}l{C`Bh}}{{{Hf{c}}{Hf{c}}}l{C`Hd}}{{{Hh{c}}{Hh{c}}}l{C`Hd}}{{{Fb{c}}{Fb{c}}}l{C`Bh}}{{{Hj{c}}{Hj{c}}}l{C`Bh}}{{{Ch{c}}{Ch{c}}}l{C`Bh}}{{{Hl{c}}{Hl{c}}}l{C`Bh}}{{ce}l{}{}}00000000000000000000000000{{{Fl{c}}n}Cb{CdBh}}{{{Fl{c}}n}CbBh}{{{Hb{c}}n}Cb{CdBh}}{{{Fd{c}}n}CbBh}{{{Fd{c}}n}Cb{CdBh}}{{{Hf{c}}n}Cb{CdHd}}{{{Hh{c}}n}Cb{CdHd}}{{{Fb{c}}n}Cb{CdBh}}{{{Hj{c}}n}Cb{CdBh}}{{{Ch{c}}n}Cb{CdBh}}{{{Hl{c}}n}Cb{CdBh}}{cc{}}00{{{Fl{c}}}{{Fd{c}}}Bh}111111{If{{Ab{{Fl{c}}e}}}Bh{}}{If{{Ab{{Fd{c}}e}}}Bh{}}```{{{Fl{c}}e}dBhAd}{{{Hb{c}}e}dBhAd}{{{Fd{c}}e}dBhAd}{{{Hf{c}}e}d{IhHd}Ad}{{{Hh{c}}e}d{IhHd}Ad}{{}j}00000000{ce{}{}}00000000{{{Af{c}}}{{Af{f}}}{}}00000000{{{Ah{c}}}{{Ah{f}}}{}}00000000{{{Aj{c}}}{{Aj{f}}}{}}00000000{{{Fd{c}}}lBh}``{{{Fd{c}}}jBh}``````````````{{{Fl{c}}e}AbBhIj}{{{Fd{c}}e}AbBhIj}{{{Fl{c}}eI`}{{Ab{dEh}}}BhIl}{{{Hb{c}}eI`}{{Ab{dEh}}}BhIl}{{{Fd{c}}eI`}{{Ab{dEh}}}BhIl}{{{Hf{c}}eI`}{{Ab{dEh}}}HdIl}{{{Hh{c}}eI`}{{Ab{dEh}}}HdIl}{{{Fb{c}}eI`}{{Ab{dEh}}}BhIl}{{{Hj{c}}eI`}{{Ab{dEh}}}BhIl}{{{Ch{c}}eI`}{{Ab{dEh}}}BhIl}{{{Hl{c}}eI`}{{Ab{dEh}}}BhIl}{{{Fl{c}}I`}jBh}{{{Hb{c}}I`}jBh}{{{Fd{c}}I`}jBh}{{{Hf{c}}I`}jHd}{{{Hh{c}}I`}jHd}{{{Fb{c}}I`}jBh}{{{Hj{c}}I`}jBh}{{{Ch{c}}I`}jBh}{{{Hl{c}}I`}jBh}```{{}F`}0{ce{}{}}00000000{cF`{}}0{In{{Ab{{Fl{c}}e}}}Bh{}}{c{{Ab{e}}}{}{}}{Bd{{Ab{{Fl{e}}g}}}{{Cn{}{{Cl{}}{J`{}}}}}{{Bh{}{{D`{{Db{c}}}}}}}{}}21{In{{Ab{{Fd{c}}e}}}Bh{}}02{{{Bd{c}}}{{Ab{{Hf{c}}e}}}Hd{}}333333333333333{cAl{}}00000000`777777777```````{{{Jb{c}}{Bb{Fn}}}{{Ab{dEd}}}{DnCj}}{{Jd{Bb{Fn}}}{{Ab{dEd}}}}{{{Jb{c}}{Bb{Fn}}{Jf{g}}}{{Ab{dEd}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{{Jd{Bb{Fn}}{Jf{g}}}{{Ab{dEd}}}{}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{{Jd{Bb{Fn}}{Bb{{Jf{g}}}}}{{Ab{dEd}}}{}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{{Jd{Bb{Fn}}{Bb{Fn}}}{{Ab{dEd}}}}{{{Jb{c}}{Bb{Fn}}{Bb{Fn}}}{{Ab{dEd}}}{DnCj}}{{Jh{Bb{Fn}}{Bb{Fn}}}{{Ab{dEd}}}}{{Jj{Bb{Fn}}{Bb{Fn}}}{{Ab{dEd}}}}{{{Jb{c}}Hh}{{Ab{dEd}}}{DnCj}}{{JdHh}{{Ab{dEd}}}}{{{Jb{c}}Hf}{{Ab{dEd}}}{DnCj}}{{JdHf}{{Ab{dEd}}}}{{{Jb{c}}{Ch{g}}Bb}{{Ab{dEd}}}{DnCj}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{{Jd{Ch{g}}Bb}{{Ab{dEd}}}{}{{Cn{}{{Cl{c}}}}}{{Bh{}{{Cl{c}}{D`{{Db{e}}}}}}}}{cf{}}00000{ce{}{}}00000{jc{}}00000{jd}00{cc{}}00{{Jd{Bb{Fn}}}{{Ab{Ed}}}}{{{Jb{c}}{Bb{Fn}}}{{Ab{Ed}}}{DnCj}}{{Jh{Bb{Fn}}}{{Ab{Ed}}}}{{Jj{Bb{Fn}}}{{Ab{Ed}}}}{{}j}00888{{{Af{c}}}{{Af{f}}}{}}00{{{Ah{c}}}{{Ah{f}}}{}}00{{{Aj{c}}}{{Aj{f}}}{}}00{{{Bb{Fn}}}Jd}{{{Bb{Fn}}}{{Jb{c}}}{DnCj}}{{{Bb{Fn}}}Jh}{{{Bb{Fn}}}Jj}{c{{Ab{e}}}{}{}}00000{cAl{}}00{ce{}{}}00","c":[],"p":[[5,"Private",696],[1,"unit"],[10,"Any",697],[6,"PlonkType",0],[1,"usize"],[1,"bool"],[5,"Formatter",698],[5,"Error",698],[6,"Result",699],[10,"Hasher",700],[5,"Box",701],[5,"Arc",702],[5,"Rc",703],[5,"TypeId",697],[10,"BatchableCircuit",38],[5,"VerifyingKeyVar",38],[1,"slice"],[5,"Vec",704],[6,"CircuitError",705],[10,"Pairing",706],[5,"BatchProofVar",38],[10,"Clone",707],[10,"PrimeField",708],[10,"PartialEq",709],[8,"Result",698],[10,"Debug",698],[5,"PlonkCircuit",710],[5,"VerifyingKey",267],[10,"SWToTEConParam",711],[17,"BaseField"],[10,"SWCurveConfig",712],[17,"G1Affine"],[5,"Affine",713],[5,"TEPoint",714],[5,"FpElemVar",715],[8,"Variable",710],[5,"PointVariable",714],[1,"tuple"],[10,"RescueParameter",716],[10,"TECurveConfig",717],[10,"Error",718],[6,"PlonkError",116],[6,"SnarkError",116],[6,"SerializationError",719],[5,"Error",720],[6,"PCSError",721],[6,"RescueError",716],[5,"String",722],[5,"ProvingKey",267],[5,"BatchProof",267],[10,"CryptoRng",723],[10,"RngCore",723],[10,"Arithmetization",710],[5,"Proof",267],[1,"u8"],[6,"Option",724],[5,"PlonkKzgSnark",183],[5,"Instance",220],[8,"UniversalSrs",267],[8,"OpenKey",267],[6,"MergeableCircuitType",710],[17,"Item"],[10,"Iterator",725],[10,"Send",726],[5,"PlookupProof",267],[10,"Field",727],[5,"ProofEvaluations",267],[5,"PlookupEvaluations",267],[5,"PlookupProvingKey",267],[5,"PlookupVerifyingKey",267],[10,"Deserializer",728],[6,"Compress",729],[6,"Validate",729],[10,"Read",730],[1,"str"],[10,"Hash",700],[10,"Serializer",731],[10,"Write",730],[5,"TaggedBase64",732],[17,"ScalarField"],[5,"RescueTranscript",618],[10,"PlonkTranscript",618],[5,"Commitment",733],[5,"SolidityTranscript",618],[5,"StandardTranscript",618],[5,"RescueTranscriptVar",97],[10,"UniversalSNARK",183],[5,"BatchArgument",220],[8,"CommitKey",267]],"b":[[151,"impl-Debug-for-PlonkError"],[152,"impl-Display-for-PlonkError"],[153,"impl-Display-for-SnarkError"],[154,"impl-Debug-for-SnarkError"],[155,"impl-From%3CCircuitError%3E-for-PlonkError"],[156,"impl-From%3CSerializationError%3E-for-PlonkError"],[157,"impl-From%3CError%3E-for-PlonkError"],[158,"impl-From%3CPCSError%3E-for-PlonkError"],[159,"impl-From%3CRescueError%3E-for-PlonkError"],[161,"impl-From%3CSnarkError%3E-for-PlonkError"],[442,"impl-Debug-for-Proof%3CE%3E"],[443,"impl-Display-for-Proof%3CE%3E"],[445,"impl-Display-for-BatchProof%3CE%3E"],[446,"impl-Debug-for-BatchProof%3CE%3E"],[572,"impl-TryFrom%3CTaggedBase64%3E-for-Proof%3CE%3E"],[574,"impl-TryFrom%3CVec%3C%3CE+as+Pairing%3E::BaseField%3E%3E-for-Proof%3CE%3E"],[575,"impl-TryFrom%3C%26TaggedBase64%3E-for-Proof%3CE%3E"],[577,"impl-TryFrom%3C%26TaggedBase64%3E-for-BatchProof%3CE%3E"],[578,"impl-TryFrom%3CTaggedBase64%3E-for-BatchProof%3CE%3E"]]}],\
["jf_prf",{"doc":"Trait definition for Pseudorandom function (PRF).","t":"RRRKRMN","n":["Error","Input","Output","PRF","Seed","evaluate","evaluate_with_rand_seed"],"q":[[0,"jf_prf"],[7,"core::result"],[8,"core::borrow"],[9,"rand_core"],[10,"rand_core"]],"d":["Error type","Input to the PRF","Output of the PRF","Trait for Pseudo-random Functions","The random seed/key that index a specific function from …","Compute PRF output with a user-provided randomly generated …","same as <code>Self::evaluate</code> except that we generate a fresh …"],"i":[6,6,6,0,6,6,6],"f":"`````{{ei}{{b{km}}}{}{{d{c}}}{}{{d{g}}}{}{}}{{cg}{{b{{f{ik}}m}}}{hj}{}{{d{e}}}{}{}{}}","c":[],"p":[[6,"Result",7],[10,"Borrow",8],[1,"tuple"],[10,"RngCore",9],[10,"CryptoRng",9],[10,"PRF",0]],"b":[]}],\
["jf_relation",{"doc":"Interfaces for Plonk-based constraint systems","t":"GPPPPPPPPPPPPPPNNNNNCCNNNNNNCCNNNNNNNNNNSSSHKFKIGFGPPPPIINNNNMNNNMNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMNNNNNNNNNMNMNNNNNMNNNMNNNNNNNNMNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMNNNNMNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNMNNNNNNNNNMNMNNMNMNMNMNNNNMNNNNMNMNMNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNTFKTKTNNNNNNNNNNCNNHNNNNNNMCHNNNNCNTKTFTKFNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFKFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CircuitError","DomainCreationError","FieldAlgebraError","GateCheckFailure","IndexError","InternalError","LookupUnsupported","ModifyFinalizedCircuit","NotSupported","ParameterError","PubInputLenMismatch","UnfinalizedCircuit","UnsupportedCurve","VarIndexOutOfBound","WrongPlonkType","as_any","as_any_mut","as_error_source","borrow","borrow_mut","constants","constraint_system","deref","deref_mut","drop","fmt","fmt","from","gadgets","gates","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","GATE_WIDTH","N_MUL_SELECTORS","N_TURBO_PLONK_SELECTORS","compute_coset_representatives","Arithmetization","BoolVar","Circuit","GateId","MergeableCircuitType","PlonkCircuit","PlonkType","TurboPlonk","TypeA","TypeB","UltraPlonk","Variable","WireId","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add_constant","add_constant_gate","add_gate","add_gate","add_range_check_variable","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","binary_emulated_sw_point_vars_select","binary_emulated_te_point_vars_select","binary_point_vars_select","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_circuit_satisfiability","check_circuit_satisfiability","check_var_bound","check_vars_bound","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_extended_permutation_polynomials","compute_extended_permutation_polynomials","compute_key_table_polynomial","compute_key_table_polynomial","compute_lookup_prod_polynomial","compute_lookup_prod_polynomial","compute_lookup_sorted_vec_polynomials","compute_lookup_sorted_vec_polynomials","compute_merged_lookup_table","compute_merged_lookup_table","compute_prod_permutation_polynomial","compute_prod_permutation_polynomial","compute_pub_input_polynomial","compute_pub_input_polynomial","compute_q_dom_sep_polynomial","compute_q_dom_sep_polynomial","compute_range_table_polynomial","compute_range_table_polynomial","compute_selector_polynomials","compute_selector_polynomials","compute_table_dom_sep_polynomial","compute_table_dom_sep_polynomial","compute_wire_polynomials","compute_wire_polynomials","conditional_select","conditional_select_emulated","create_boolean_variable","create_constant_emulated_sw_point_variable","create_constant_emulated_te_point_variable","create_constant_emulated_variable","create_constant_point_variable","create_constant_variable","create_constant_variable","create_emulated_sw_point_variable","create_emulated_te_point_variable","create_emulated_variable","create_point_variable","create_public_boolean_variable","create_public_emulated_sw_point_variable","create_public_emulated_te_point_variable","create_public_emulated_variable","create_public_point_variable","create_public_variable","create_public_variable","create_table_and_lookup_variables","create_variable","create_variable","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","ecc_add","emulated_add","emulated_add_constant","emulated_add_constant_gate","emulated_add_gate","emulated_mul","emulated_mul_constant","emulated_mul_constant_gate","emulated_mul_gate","emulated_sub","emulated_sub_constant","emulated_sw_ecc_add","emulated_sw_ecc_add_gate","emulated_sw_point_witness","emulated_te_ecc_add","emulated_te_ecc_add_gate","emulated_te_point_witness","emulated_witness","enforce_bool","enforce_bool","enforce_constant","enforce_constant","enforce_emulated_sw_point_equal","enforce_emulated_te_point_equal","enforce_emulated_var_equal","enforce_equal","enforce_equal","enforce_false","enforce_geq","enforce_geq_constant","enforce_gt","enforce_gt_constant","enforce_in_range","enforce_leq","enforce_leq_constant","enforce_lt","enforce_lt_constant","enforce_on_curve","enforce_point_equal","enforce_true","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval_domain_size","eval_domain_size","false_var","finalize_for_arithmetization","finalize_for_mergeable_circuit","fixed_base_scalar_mul","fmt","fmt","fmt","fmt","from","from","from","from","from","gen_quad_poly","glv_mul","hash","hash","init","init","init","init","insert_gate","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","inverse_point","is_emulated_sw_point_equal","is_emulated_te_point_equal","is_emulated_var_equal","is_emulated_var_zero","is_equal","is_geq","is_geq_constant","is_gt","is_gt_constant","is_in_range","is_leq","is_leq_constant","is_lt","is_lt_constant","is_neutral_point","is_point_equal","is_zero","lc","lc_gate","logic_and","logic_and_all","logic_neg","logic_or","logic_or_gate","merge","mod_add","mod_add_constant","mod_add_vec","mod_mul","mod_mul_constant","mod_negate","msm","msm_with_var_scalar_length","mul","mul","mul_add","mul_add_gate","mul_constant","mul_constant_gate","mul_gate","mul_gate","neutral_point_variable","new_turbo_plonk","new_ultra_plonk","non_native_linear_gen","non_native_power_11_gate","non_native_power_11_gen","non_native_power_5_gen","non_zero_gate","num_gates","num_gates","num_inputs","num_inputs","num_range_blocks","num_vars","num_vars","num_wire_types","num_wire_types","one","one","pad_gates","pad_gates","point_witness","power_11_gate","power_11_gen","public_input","public_input","quad_poly_gate","range_bit_len","range_size","set_variable_public","set_variable_public","srs_size","srs_size","sub","sub","sub_gate","sub_gate","sum","support_lookup","support_lookup","to_owned","to_owned","to_owned","to_owned","true_var","truncate","truncate_gate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unpack","variable_base_binary_scalar_mul","variable_base_scalar_mul","vzip","vzip","vzip","vzip","witness","witness","witness_mut","zero","zero","B","EmulatedVariable","EmulationConfig","NUM_LIMBS","SerializableEmulatedStruct","T","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","ecc","fmt","from","from_emulated_field","init","into","into_any","into_any_arc","into_any_rc","native_vars","serialize_to_native_elements","test_utils","to_emulated_field","to_owned","try_from","try_into","type_id","ultraplonk","vzip","BETA","MultiScalarMultiplicationCircuit","NEG_ALPHA","PointVariable","S","SWToTEConParam","TEPoint","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","emulated","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","get_x","get_x","get_y","get_y","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","inverse","msm","msm_with_var_scalar_length","serialize_to_native_elements","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","EmulatedSWPointVariable","EmulatedTEPointVariable","SWPoint","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","drop","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","serialize_to_native_elements","serialize_with_mode","serialized_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","test_variable_independence_for_circuit","mod_arith","FpElem","FpElemVar","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","components","convert_to_var","default","default","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","field_elem","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","new_from_field_element","new_from_fp_elem","new_unchecked","one","param_m","param_m","to_owned","to_owned","try_from","try_from","try_into","try_into","two_power_m","two_power_m","type_id","type_id","vzip","vzip","witness","witness_fp_elem","zero","AdditionGate","BoolGate","CondSelectGate","ConstantAdditionGate","ConstantGate","ConstantMultiplicationGate","CurvePointXAdditionGate","CurvePointYAdditionGate","EdwardsCurveEquationGate","EqualityGate","FifthRootGate","Gate","IoGate","LinCombGate","LogicOrGate","LogicOrOutputGate","LookupGate","MulAddGate","MultiplicationGate","PaddingGate","QuadPolyGate","QuaternaryPointSelectXGate","QuaternaryPointSelectYGate","SubtractionGate","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast_mut","downcast_rc","downcast_ref","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","q_c","q_c","q_c","q_c","q_c","q_c","q_c","q_dom_sep","q_dom_sep","q_ecc","q_ecc","q_ecc","q_ecc","q_hash","q_hash","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lc","q_lookup","q_lookup","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_mul","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","q_o","table_dom_sep","table_dom_sep","table_key","table_key","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"jf_relation"],[40,"jf_relation::constants"],[44,"jf_relation::constraint_system"],[359,"jf_relation::gadgets"],[394,"jf_relation::gadgets::ecc"],[466,"jf_relation::gadgets::ecc::emulated"],[547,"jf_relation::gadgets::test_utils"],[548,"jf_relation::gadgets::ultraplonk"],[549,"jf_relation::gadgets::ultraplonk::mod_arith"],[622,"jf_relation::gates"],[1238,"core::any"],[1239,"core::error"],[1240,"core::fmt"],[1241,"core::fmt"],[1242,"alloc::sync"],[1243,"alloc::rc"],[1244,"alloc::string"],[1245,"core::result"],[1246,"core::any"],[1247,"alloc::vec"],[1248,"ark_ff::fields::prime"],[1249,"dyn_clone::sealed"],[1250,"ark_ff::fields::fft_friendly"],[1251,"ark_ff::fields"],[1252,"core::clone"],[1253,"ark_poly::polynomial::univariate::dense"],[1254,"ark_ec::models::twisted_edwards::affine"],[1255,"ark_ec::models::twisted_edwards"],[1256,"core::fmt"],[1257,"core::cmp"],[1258,"ark_ec::models::twisted_edwards::group"],[1259,"ark_ec::models::short_weierstrass::affine"],[1260,"ark_ec::models::short_weierstrass"],[1261,"ark_serialize::error"],[1262,"core::iter::traits::iterator"],[1263,"core::marker"],[1264,"ark_serialize"],[1265,"ark_serialize"],[1266,"std::io"]],"d":["A <code>enum</code> specifying the possible failure modes of the …","Failed to create domain","Algebra over field failed: {0}","The {0}-th gate failed: {1}","Failed to get array value by index","‼ ️Internal error! Please report to Crypto Team …","The circuit does not support lookup","Attempt to modify the finalized circuit","Feature not supported: {0}","Invalid parameters: {0}","Public input length {0} doesn’t match num_inputs = {1}.","The circuit is not finalized before doing arithmetization","Unexpected field for elliptic curve operation, currently …","Variable index {0} is larger than the bound {1}.","The circuit has wrong Plonk type","","","","","","Crate wide constants.","Definitions and constructions of plonk constraint system","","","","","","Returns the argument unchanged.","Gates and gadgets implementations","Module for various circuit gates.","","Calls <code>U::from(self)</code>.","","","","","","","","","The number of input wires.","The number of multiplication selectors.","The number of TurboPlonk selectors.","Compute constants K0, K1, …, K_{<code>num_wire_types</code>-1} so …","An interface that transforms Plonk circuits to polynomial …","An index to a witness value of boolean type.","An interface for Plonk constraint systems.","An index to a gate in circuit.","Enum for each type of mergeable circuit. We can only merge …","A specific Plonk circuit instantiation.","Enum for each type of Plonk scheme.","TurboPlonk","First type","Second type","TurboPlonk that supports Plookup","An index to one of the witness values.","An index to the type of gate wires. There are 4 different …","","","","","Obtain a variable representing an addition. Return the …","","Obtains a variable representing an addition with a …","Constrain variable <code>y</code> to the addition of <code>a</code> and <code>c</code>, where <code>c</code> …","Constrain variable <code>c</code> to the addition of <code>a</code> and <code>b</code>. Return …","","Add a range_check gate that checks whether a variable is …","","","","","","","","","Obtain an emulated point variable of the conditional …","Obtain an emulated point variable of the conditional …","Obtain a point variable of the conditional selection from …","","","","","","","","","Check circuit satisfiability against a public input.","","Checks if a variable is strictly less than the number of …","Check if a list of variables are strictly less than the …","","","","","","","","","Compute and return extended permutation polynomials. …","","Compute and return the polynomial that interpolates the …","","Compute and return the product polynomial for Plookup …","","Compute the sorted concatenation of the (merged) lookup …","","Compute and return the combined lookup table vector given …","","Compute and return the product polynomial for permutation …","","Compute and return the public input polynomial. Return an …","","Compute and return the polynomial that interpolates the …","","Plookup-related methods Return default errors if the …","","Compute and return selector polynomials. Return an error …","","Compute and return the polynomial that interpolates the …","","Compute and return the list of wiring witness polynomials. …","","Obtain a variable that equals <code>x_0</code> if <code>b</code> is zero, or <code>x_1</code> if <code>b</code>…","Obtain an emulated variable of the conditional selection …","Add a bool variable to the circuit; return the index of …","Add a new constant emulated EC point","Add a new constant emulated EC point","Add a constant emulated variable","Add a new EC point (as a constant) to the circuit","Add a constant variable to the circuit; return the index …","","Add a new emulated EC point (as witness)","Add a new emulated EC point (as witness)","Add an emulated variable","Add a new EC point (as witness) to the circuit","Add a public bool variable to the circuit; return the …","Add a new public emulated EC point","Add a new public emulated EC point","Add a public emulated variable","Add a new EC point (as public input) to the circuit","Add a public input variable; return the index of the …","","Create a table with keys/values [0, …, n - 1] and […","Add a variable to the circuit; return the index of the …","","","","","","","","","","","","","","","Obtain a variable to the point addition result of <code>point_a</code> …","Return an <code>EmulatedVariable</code> which equals to a+b.","Return an <code>EmulatedVariable</code> which equals to a + b where b …","Constrain that a+b=c in the emulated field. This function …","Constrain that a+b=c in the emulated field. Checking …","Return an <code>EmulatedVariable</code> which equals to a*b.","Return an <code>EmulatedVariable</code> which equals to a*b.","Constrain that a*b=c in the emulated field for a constant …","Constrain that a*b=c in the emulated field. Checking that …","Return an <code>EmulatedVariable</code> which equals to a-b.","Return an <code>EmulatedVariable</code> which equals to a - b where b …","Obtain a variable to the point addition result of <code>p0</code> + <code>p1</code>","Constrain variable <code>p2</code> to be the point addition of <code>p0</code> and <code>p1</code>…","Return the witness point","Obtain a variable to the point addition result of <code>a</code> + <code>b</code>","Constrain variable <code>p2</code> to be the point addition of <code>p0</code> and <code>p1</code>…","Return the witness point","Return the witness point for the circuit","Constrain a variable to a bool. Return error if the input …","","Common gates that should be implemented in any constraint …","","Constrain two emulated point variables to be the same. …","Constrain two emulated point variables to be the same. …","Constrain two emulated variables to be the same. Return …","Constrain two variables to have the same value. Return …","","Assuming values represented by <code>a</code> is boolean. Constrain <code>a</code> …","Constrain that <code>a</code> &gt;= <code>b</code>.","Enforce the variable <code>a</code> to be greater than or equal a given …","Constrain that <code>a</code> &gt; <code>b</code>.","Enforce the variable <code>a</code> to be greater than a given constant …","Constrain a variable to be within the [0, 2^<code>bit_len</code>) range …","Constrain that <code>a</code> &lt;= <code>b</code>","Enforce the variable <code>a</code> to be less than or equal to a given …","Constrain that <code>a</code> &lt; <code>b</code>.","Enforce the variable <code>a</code> to be less than a given constant <code>val</code>…","Constrain a point to be on certain curve, namely its …","Constrain two point variables to be the same. Return error …","Assuming values represented by <code>a</code> is boolean. Constrain <code>a</code> …","","","","","","","","","Get the size of the evaluation domain for arithmetization …","","Return a default variable with value <code>false</code> (namely zero).","Finalize the setup of the circuit before arithmetization.","Finalize the setup of a mergeable circuit. Two circuits …","Obtain the fixed-based scalar multiplication result of …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Arithmetic gates","Perform GLV multiplication in circuit (which costs a few …","","","","","","","Insert a general (algebraic) gate","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Inverse a point variable","Obtain a bool variable representing whether two input …","Obtain a bool variable representing whether two input …","Obtain a bool variable representing whether two input …","Obtain a bool variable representing whether the input …","Obtain a bool variable representing whether two input …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &gt;= <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &gt; <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Return a boolean variable indicating whether variable <code>a</code> is …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &lt;= <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Returns a <code>BoolVar</code> indicating whether <code>a</code> &lt; <code>b</code>.","Returns a <code>BoolVar</code> indicating whether the variable <code>a</code> is …","Obtain a boolean variable indicating whether a point is …","Obtain a bool variable representing whether two point …","Obtain a bool variable representing whether input variable …","Obtain a variable representing a linear combination. …","Constrain a linear combination gate: q1 * a + q2 * b + q3 …","Obtain a variable representing the result of a logic AND …","Given a list of boolean variables, obtain a variable …","Obtain a variable representing the result of a logic …","Obtain a variable representing the result of a logic OR …","Constrain that <code>a</code> is true or <code>b</code> is true. Return error if …","Merge a type A circuit with a type B circuit. Both …","Modular addition gate: Given Fp elements x, y and modulus …","Modular addition gate: Given input x: Fp element variable, …","Modular addition gate: Given Fp elements &amp;[x] and modulus …","Modular multiplication gate: Given Fp elements x, y and …","Modular multiplication gate: Given input x: Fp element …","Negate an FpElemVar mod p where p is a public variable …","","","Obtain a variable representing a multiplication. Return …","","Obtain a variable representing <code>q12 * a * b + q34 * c * d</code>, …","Constrain a mul-addition gate: q_muls[0] * wires[0] *  …","Obtains a variable representing a multiplication with a …","Constrain variable <code>y</code> to the product of <code>a</code> and <code>c</code>, where <code>c</code> is …","Constrain variable <code>c</code> to the multiplication of <code>a</code> and <code>b</code>. …","","Return the point variable for the infinity point in the TE …","Construct a new TurboPlonk circuit.","Construct a new UltraPlonk circuit.","Input vector x and y, and a constant c, generate a …","generate a non-native circuit for the statement x^11 = y","generate a non-native circuit for the statement x^11 = y","generate a non-native circuit for the statement x^5 = y","Constrain a variable to be non-zero. Return error if the …","The number of constraints.","","The number of public input variables.","","The number of range blocks, i.e., the minimal integer such …","The number of variables.","","The number of wire types of the circuit. E.g., UltraPlonk …","","Return a default variable with value one.","Default one variable","Pad the circuit with n dummy gates","","Return the witness point for the circuit","Constraint a variable to be the 11th power of another …","Return a variable to be the 11th power of the input …","The list of public input values.","","Arithmetic gates","The bit length of UltraPlonk range gates.","The range size of UltraPlonk range gates.","Set a variable to a public variable","","The required SRS size for the circuit.","","Obtain a variable representing a subtraction. Return the …","","Constrain variable <code>c</code> to the subtraction of <code>a</code> and <code>b</code>. Return …","","Obtain a variable representing the sum of a list of …","Plookup-related methods. Return true if the circuit …","","","","","","Return a default variable with value <code>true</code> (namely one).","Obtain the truncation of the input. Constrain that the …","Truncation gate. Constrain that b == a modulo 2^bit_length.","","","","","","","","","","","","","Obtain the <code>bit_len</code>-long binary representation of variable <code>a</code>","Obtain a variable of the result of a variable base scalar …","Obtain a variable of the result of a variable base scalar …","","","","","Return the witness value of variable <code>idx</code>. Return error if …","","Change the value of a variable. Only used for testing.","Return a default variable with value zero.","Default zero variable","Bit length of each limbs.","The variable represents an element in the emulated field.","Parameters needed for emulating field operations over …","<code>B * NUM_LIMBS</code> should equals to <code>T</code>.","A struct that can be serialized into <code>Vec</code> of field elements.","Log2 of the other CRT modulus is 2^T.","","","","","","","","","","","Elliptic curve related gates and gadgets. Including both …","","Returns the argument unchanged.","Convert an element in the emulated field to a list of …","","Calls <code>U::from(self)</code>.","","","","Return the list of variables that simulate the field …","Serialize into a <code>Vec</code> of field elements.","Utils for test","Inverse conversion of the <code>from_emulated_field</code>","","","","","Implements ultra-plonk related circuits.","","Parameter beta.","Compute the multi-scalar-multiplications in circuit.","Parameter 1/alpha.","Represent variable of an EC point.","Parameter S.","This trait holds constants that are used for curve …","An elliptic curve point in twisted Edwards affine form (x, …","","","","","","","","","","","","","","","","","","","","","","Elliptic curve related gates and gadgets for non-native …","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Get the x coordinate of the point.","Get the variable representing the x coordinate of the …","Get the y coordinate of the point.","Get the variable representing the y coordinate of the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The inverse point for the edward form.","Compute the multi-scalar-multiplications. Use pippenger …","Compute the multi-scalar-multiplications where each scalar …","","","","","","","","","","","","The variable represents an SW point in the emulated field.","The variable represents an TE point in the emulated field.","An elliptic curve point in short Weierstrass affine form …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","two circuit with the same statement should have the same …","Modular arithmetic gates","A field element represented by: p = p.0 + 2^m * p.1. The …","Represent variable of an Fp element: elem = witness[vars.0]…","","","","","","","","","","","","","","","Expose the field element components","Expose the field element variables components","Convert into a single variable with value …","","","","","","","","","Enforce self == other.","","","","","","","","","Convert into a single field element.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a FpElem struct from field element <code>p</code> and split …","Create an FpElemVar from field element and split parameter …","Create an FpElemVar from FpElem form field element . This …","Create an FpElemVar from Fp element variable <code>var</code> and split …","An FpElemVar that represents a 1","Expose the m parameter","Expose the m parameter","","","","","","","Expose 2^m parameter","Expose 2^m parameter","","","","","Get the witness from the variables","Get the witness in FpElem form from the variables","An FpElemVar that represents a 0","An addition gate","A boolean gate, selectors identical to <code>MultiplicationGate</code>, …","A gate for conditional selection","Adding a variable by a constant.","A constant gate","A mul constant gate. Multiply the first variable with the …","A gate for point addition on x-coordinate between two …","A gate for point addition on y-coordinate between two …","A gate for checking a point conforming the twisted Edwards …","An equality gate, selectors identical to <code>SubtractionGate</code>, …","Gate for checking a value is the fifth root of another","Describes a gate with getter for all selectors …","An I/O gate for public inputs","A linear combination gate","A gate for logic OR","A gate for computing the logic OR value of 2 variables","An UltraPlonk lookup gate","A multiplication-then-addition gate","A multiplication gate","A empty gate for circuit padding","A deg-2 polynomial gate","A point selection gate on x-coordinate for conditional …","A point selection gate on y-coordinate for conditional …","A subtraction gateeturns a boxed object from a boxed trait object if the …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type …","Get the name of a gate.","","","","","","","","","","","","","","","","","","","","","","","","Constant selector.","","","","","","","UltraPlonk lookup domain separation selector.","","The selector for elliptic curve operation.","","","","Selectors for Rescue hashes.","","Selectors for linear combination.","","","","","","","","","","","","","UltraPlonk lookup selector.","","Selectors for multiplication.","","","","","","","","","","","","","Output wire selector.","","","","","","","","","","","","","","","","","","","","UltraPlonk table domain separation ids","","UltraPlonk table keys.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,29,30,30,29,0,0,22,29,30,20,18,20,20,20,18,20,20,22,29,30,20,22,29,30,20,20,20,20,22,29,30,20,22,29,30,20,18,20,20,20,22,29,30,20,22,29,30,20,32,20,32,20,32,20,32,20,32,20,32,20,32,20,32,20,32,20,32,20,32,20,32,20,20,20,18,20,20,20,20,18,20,20,20,20,20,18,20,20,20,20,18,20,20,18,20,20,22,29,30,20,22,29,30,20,22,29,30,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,18,20,18,20,20,20,20,18,20,20,20,20,20,20,20,20,20,20,20,20,20,20,29,30,29,29,29,30,30,30,32,20,18,20,20,20,22,29,30,20,19,22,29,30,20,20,20,29,30,22,29,30,20,20,22,29,30,20,22,29,30,20,22,29,30,22,29,30,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,18,20,20,20,20,20,18,20,20,20,20,20,20,20,20,20,18,20,18,20,20,18,20,18,20,18,20,18,20,20,20,20,18,20,20,20,20,18,20,32,20,18,20,18,20,20,18,20,22,29,30,20,18,20,20,22,29,30,20,22,29,30,20,22,29,30,20,20,20,20,22,29,30,20,18,20,20,18,20,24,0,0,24,0,24,35,35,35,35,35,35,35,35,35,35,0,35,35,0,35,35,35,35,35,35,48,0,0,35,35,35,35,0,35,52,0,52,0,52,0,0,38,26,38,26,38,26,38,26,38,26,38,26,38,26,38,38,26,38,26,38,26,0,38,26,38,38,38,26,26,26,38,26,38,38,38,38,26,38,26,38,26,38,26,38,26,38,26,38,26,38,26,38,54,54,38,38,26,38,26,38,26,38,26,38,26,0,0,0,37,23,25,37,23,25,37,23,25,37,37,23,25,37,23,25,37,37,23,25,37,23,25,37,37,23,25,37,23,25,37,37,23,25,37,37,37,37,37,23,25,37,37,23,25,37,23,25,37,23,25,37,23,25,37,23,25,37,23,25,37,37,37,37,23,25,37,23,25,37,23,25,37,23,25,37,23,25,0,0,0,0,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,47,46,46,47,46,47,47,47,46,46,46,47,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,46,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,45,45,45,45,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,45,64,65,66,67,68,69,70,71,72,73,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,45,45,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,45,64,66,74,78,82,83,45,85,45,78,79,80,45,73,45,65,66,67,69,71,74,75,77,81,82,83,84,45,85,45,68,70,74,76,77,78,79,80,81,82,83,84,45,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,45,85,45,85,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"f":"```````````````{cb{}}0{cd{}}{ce{}{}}0``{fc{}}0{fh}{{jl}n}0{cc{}}``{{}f}5{{{A`{c}}}{{A`{b}}}{}}{{{Ab{c}}}{{Ab{b}}}{}}{{{Ad{c}}}{{Ad{b}}}{}}{cAf{}}{c{{Ah{e}}}{}{}}0{cAj{}};```{{f{Al{f}}}{{An{c}}}B`}`````````````{{cBb}h{}}000{{BdBfBf}{{Ah{Bfj}}}}{{{Bh{c}}BfBf}{{Ah{Bfj}}}Bj}{{{Bh{c}}Bfc}{{Ah{Bfj}}}B`}{{{Bh{c}}BfcBf}{{Ah{hj}}}B`}{{BdBfBfBf}{{Ah{hj}}}}{{{Bh{c}}BfBfBf}{{Ah{hj}}}Bj}{{{Bh{c}}Bf}{{Ah{hj}}}Bj}{cb{}}0000000{{{Bh{c}}Bl{Bn{e}}{Bn{e}}}{{Ah{{Bn{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}Bl{Cb{e}}{Cb{e}}}{{Ah{{Cb{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}BlCdCd}{{Ah{Cdj}}}B`}{ce{}{}}0000000{{Bd{Cf{c}}}{{Ah{hj}}}Ch}{{{Bh{c}}{Cf{c}}}{{Ah{hj}}}Bj}7{{{Bh{c}}{Cf{Bf}}}{{Ah{hj}}}Bj}{BlBl}{CjCj}{ClCl}{{{Bh{c}}}{{Bh{c}}}{BjCn}}{{ce}h{}{}}000{D`{{Ah{{An{{Db{c}}}}j}}}Bj}{{{Bh{c}}}{{Ah{{An{{Db{c}}}}j}}}B`}{D`{{Ah{{Db{c}}j}}}Bj}{{{Bh{c}}}{{Ah{{Db{c}}j}}}B`}{{D`ccc{Cf{c}}{Cf{c}}}{{Ah{{Db{c}}j}}}Bj}{{{Bh{c}}ccc{Cf{c}}{Cf{c}}}{{Ah{{Db{c}}j}}}B`}{{D`c{Cf{c}}}{{Ah{{Dd{{An{c}}{Db{c}}{Db{c}}}}j}}}Bj}{{{Bh{c}}c{Cf{c}}}{{Ah{{Dd{{An{c}}{Db{c}}{Db{c}}}}j}}}B`}{{D`c}{{Ah{{An{c}}j}}}Bj}{{{Bh{c}}c}{{Ah{{An{c}}j}}}B`}{{D`cc}{{Ah{{Db{c}}j}}}Bj}{{{Bh{c}}cc}{{Ah{{Db{c}}j}}}B`}989898;:98;:{{{Bh{c}}BlBfBf}{{Ah{Bfj}}}B`}{{{Bh{c}}Bl{Df{e}}{Df{e}}}{{Ah{{Df{e}}j}}}B`{{C`{c}}}}{{BdDh}{{Ah{Blj}}}}{{{Bh{c}}{Dj{e}}}{{Ah{{Bn{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Dl{e}}}{{Ah{{Cb{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}e}{{Ah{{Df{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Dl{c}}}{{Ah{Cdj}}}B`}{{Bdc}{{Ah{Bfj}}}Ch}{{{Bh{c}}c}{{Ah{Bfj}}}Bj}54326543210{{{Bh{c}}{Cf{{Dd{BfBfBf}}}}{Cf{{Dd{BfBf}}}}}{{Ah{hj}}}B`}21{{}{{Bh{c}}}Bj}{fc{}}0000000{fh}000{{{Bh{c}}CdCd}{{Ah{Cdj}}}B`}{{{Bh{c}}{Df{e}}{Df{e}}}{{Ah{{Df{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Df{e}}e}{{Ah{{Df{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Df{e}}e{Df{e}}}{{Ah{hj}}}B`{{C`{c}}}}{{{Bh{c}}{Df{e}}{Df{e}}{Df{e}}}{{Ah{hj}}}B`{{C`{c}}}}321032{{{Bh{c}}{Bn{e}}{Bn{e}}e}{{Ah{{Bn{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Bn{e}}{Bn{e}}{Bn{e}}e}{{Ah{hj}}}B`{{C`{c}}}}{{{Bh{c}}{Bn{e}}}{{Ah{{Dj{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Cb{e}}{Cb{e}}e}{{Ah{{Cb{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Cb{e}}{Cb{e}}{Cb{e}}e}{{Ah{hj}}}B`{{C`{c}}}}{{{Bh{c}}{Cb{e}}}{{Ah{{Dl{e}}j}}}B`{{C`{c}}}}{{{Bh{c}}{Df{e}}}{{Ah{ej}}}B`{{C`{c}}}}{{BdBf}{{Ah{hj}}}}{{{Bh{c}}Bf}{{Ah{hj}}}Bj}{{BdBfc}{{Ah{hj}}}Ch}{{{Bh{c}}Bfc}{{Ah{hj}}}Bj}{{{Bh{c}}{Bn{e}}{Bn{e}}}{{Ah{hj}}}B`{{C`{c}}}}{{{Bh{c}}{Cb{e}}{Cb{e}}}{{Ah{hj}}}B`{{C`{c}}}}{{{Bh{c}}{Df{e}}{Df{e}}}{{Ah{hj}}}B`{{C`{c}}}}{{BdBfBf}{{Ah{hj}}}}{{{Bh{c}}BfBf}{{Ah{hj}}}Bj}{{{Bh{c}}Bf}{{Ah{hj}}}B`}{{{Bh{c}}BfBf}{{Ah{hj}}}{B`B`}}{{{Bh{c}}Bfc}{{Ah{hj}}}{B`B`}}10{{{Bh{c}}Bff}{{Ah{hj}}}B`}2121{{{Bh{c}}Cd}{{Ah{hj}}}B`}{{{Bh{c}}CdCd}{{Ah{hj}}}B`}5{{CjCj}Dh}{{ClCl}Dh}{{ce}Dh{}{}}00000{D`{{Ah{fj}}}}{{{Bh{c}}}{{Ah{fj}}}B`}{BdBl}{{{Bh{c}}}{{Ah{hj}}}B`}{{{Bh{c}}Cl}{{Ah{hj}}}B`}{{{Bh{c}}Bf{Dn{e}}}{{Ah{Cdj}}}B`{{Eb{}{{E`{c}}}}}}{{Bll}n}{{Cjl}n}{{Cll}n}{{{Bh{c}}l}n{BjEd}}{BlBf}{cc{}}000{{{Bh{c}}{Ef{Bf}}{Ef{c}}{Ef{c}}c}{{Ah{Bfj}}}B`}{{{Bh{c}}BfCd}{{Ah{Cdj}}}B`}{{Cjc}hEh}{{Clc}hEh}{{}f}000{{{Bh{c}}{Ef{Bf}}{A`{Ej}}}{{Ah{hj}}}Bj}{ce{}{}}000{{{A`{c}}}{{A`{b}}}{}}000{{{Ab{c}}}{{Ab{b}}}{}}00{{{Ad{c}}}{{Ad{b}}}{}}000{{{Bh{c}}Cd}{{Ah{Cdj}}}B`}{{{Bh{c}}{Bn{e}}{Bn{e}}}{{Ah{Blj}}}B`{{C`{c}}}}{{{Bh{c}}{Cb{e}}{Cb{e}}}{{Ah{Blj}}}B`{{C`{c}}}}{{{Bh{c}}{Df{e}}{Df{e}}}{{Ah{Blj}}}B`{{C`{c}}}}{{{Bh{c}}{Df{e}}}{{Ah{Blj}}}B`{{C`{c}}}}{{{Bh{c}}BfBf}{{Ah{Blj}}}B`}{{{Bh{c}}BfBf}{{Ah{Blj}}}{B`B`}}{{{Bh{c}}Bfc}{{Ah{Blj}}}{B`B`}}10{{{Bh{c}}Bff}{{Ah{Blj}}}B`}2121{{{Bh{c}}Cd}{{Ah{Blj}}}B`}{{{Bh{c}}CdCd}{{Ah{Blj}}}B`}{{{Bh{c}}Bf}{{Ah{Blj}}}B`}{{{Bh{c}}{Ef{Bf}}{Ef{c}}}{{Ah{Bfj}}}B`}{{{Bh{c}}{Ef{Bf}}{Ef{c}}}{{Ah{hj}}}B`}{{{Bh{c}}BlBl}{{Ah{Blj}}}B`}{{{Bh{c}}{Cf{Bl}}}{{Ah{Blj}}}B`}{{{Bh{c}}Bl}{{Ah{Blj}}}B`}2{{{Bh{c}}BlBl}{{Ah{hj}}}B`}{{{Bh{c}}{Bh{c}}}{{Ah{{Bh{c}}j}}}B`}{{{Bh{c}}{El{c}}{El{c}}{En{c}}}{{Ah{{El{c}}j}}}B`}{{{Bh{c}}{El{c}}{En{c}}{En{c}}}{{Ah{{El{c}}j}}}B`}{{{Bh{c}}{Cf{{El{c}}}}{En{c}}}{{Ah{{El{c}}j}}}B`}21{{{Bh{c}}{El{c}}c}{{Ah{{El{c}}j}}}B`}{{{Bh{c}}{Cf{Cd}}{Cf{Bf}}}{{Ah{Cdj}}}B`}{{{Bh{c}}{Cf{Cd}}{Cf{Bf}}f}{{Ah{Cdj}}}B`}{{BdBfBf}{{Ah{Bfj}}}}{{{Bh{c}}BfBf}{{Ah{Bfj}}}Bj}>={{{Bh{c}}Bfc}{{Ah{Bfj}}}B`}{{{Bh{c}}BfcBf}{{Ah{hj}}}B`}{{BdBfBfBf}{{Ah{hj}}}}{{{Bh{c}}BfBfBf}{{Ah{hj}}}Bj}{{{Bh{c}}}CdB`}{{}{{Bh{c}}}Bj}{f{{Bh{c}}}Bj}{{{Bh{c}}{Cf{{El{c}}}}{Cf{{En{c}}}}{En{c}}}{{Ah{{El{c}}j}}}B`}{{{Bh{c}}{El{c}}{El{c}}}{{Ah{hj}}}B`}{{{Bh{c}}{El{c}}}{{Ah{{El{c}}j}}}B`}0{{{Bh{c}}Bf}{{Ah{hj}}}B`}{Bdf}{{{Bh{c}}}fBj}10{{{Bh{c}}}{{Ah{fj}}}B`}2121{BdBf}{{{Bh{c}}}BfBj}{{Bdf}h}{{{Bh{c}}f}hBj}{{{Bh{c}}Cd}{{Ah{{Dl{c}}j}}}B`}{{{Bh{c}}BfBf}{{Ah{hj}}}B`}{{{Bh{c}}Bf}{{Ah{Bfj}}}B`}{Bd{{Ah{{An{c}}j}}}Ch}{{{Bh{c}}}{{Ah{{An{c}}j}}}Bj}{{{Bh{c}}{Ef{Bf}}{Ef{c}}{Ef{c}}cc}{{Ah{hj}}}B`}{{{Bh{c}}}{{Ah{fj}}}Bj}0{{BdBf}{{Ah{hj}}}}{{{Bh{c}}Bf}{{Ah{hj}}}Bj}{D`{{Ah{fj}}}}>{{BdBfBf}{{Ah{Bfj}}}}{{{Bh{c}}BfBf}{{Ah{Bfj}}}Bj}{{BdBfBfBf}{{Ah{hj}}}}{{{Bh{c}}BfBfBf}{{Ah{hj}}}Bj}{{{Bh{c}}{Cf{Bf}}}{{Ah{Bfj}}}B`}{BdDh}{{{Bh{c}}}DhBj}{ce{}{}}000{BdBl}{{{Bh{c}}Bff}{{Ah{Bfj}}}B`}{{{Bh{c}}BfBff}{{Ah{hj}}}B`}{c{{Ah{e}}}{}{}}0000000{cAj{}}000{{{Bh{c}}Bff}{{Ah{{An{Bl}}j}}}B`}{{{Bh{c}}{Cf{Bl}}Cd}{{Ah{Cdj}}}B`}{{{Bh{c}}BfCd}{{Ah{Cdj}}}B`}8888{{BdBf}{{Ah{cj}}}Ch}{{{Bh{c}}Bf}{{Ah{cj}}}Bj}{{{Bh{c}}Bf}cBj}{BdBf}{{{Bh{c}}}BfBj}``````{{cBb}h{}}{cb{}}0??{{{Df{c}}}{{Df{c}}}{CnB`}}{{ce}h{}{}}{fc{}}0{fh}`{{{Df{c}}l}n{EdB`}}{cc{}}{e{{An{c}}}B`{{C`{c}}}}{{}f}{ce{}{}}{{{A`{c}}}{{A`{b}}}{}}{{{Ab{c}}}{{Ab{b}}}{}}{{{Ad{c}}}{{Ad{b}}}{}}{{{Df{c}}}{{An{Bf}}}B`}{F`{{An{c}}}B`}`{{{Cf{c}}}{{Ah{ej}}}B`{{C`{c}}}}6{c{{Ah{e}}}{}{}}0{cAj{}}`8```````{{cBb}h{}}0{cb{}}000::::{{{Dl{c}}}{{Dl{c}}}{CnB`}}{CdCd}{{ce}h{}{}}0{{}{{Dl{c}}}B`}{fc{}}000{fh}0`{{{Dl{c}}{Dl{c}}}Dh{FbB`}}{{CdCd}Dh}{{ce}Dh{}{}}00000{{{Dl{c}}l}n{EdB`}}{{Cdl}n}{cc{}}{{{Fd{e}}}{{Dl{c}}}B`{{Eb{}{{E`{c}}}}}}{{{Dn{e}}}{{Dl{c}}}B`{{Eb{}{{E`{c}}}}}}{{{Ff{e}}}{{Dl{c}}}{B`Fh}{{Fj{}{{E`{c}}}}}}3{{{Dl{c}}}cB`}{CdBf}10{{}f}0{ce{}{}}0{{{A`{c}}}{{A`{b}}}{}}0{{{Ab{c}}}{{Ab{b}}}{}}0{{{Ad{c}}}{{Ad{b}}}{}}0{{{Dl{c}}}{{Dl{c}}}B`}{{Fl{Cf{Cd}}{Cf{Bf}}}{{Ah{Cdj}}}}{{Fl{Cf{Cd}}{Cf{Bf}}f}{{Ah{Cdj}}}}{{{Dl{e}}}{{An{c}}}B`{{C`{c}}}}77{c{{Ah{e}}}{}{}}000{cAj{}}099```{{cBb}h{}}00{cb{}}00000{e{{Ah{hFn}}}B`{{Gb{}{{G`{{Dj{c}}}}}}Gd}}<<<<<<{{{Dj{c}}}{{Ah{hFn}}}B`}{{{Dj{c}}}{{Dj{c}}}{CnB`}}{{{Bn{c}}}{{Bn{c}}}{CnB`}}{{{Cb{c}}}{{Cb{c}}}{CnB`}}{{ce}h{}{}}00{{}{{Dj{c}}}B`}{fc{}}00000{{cGfGh}{{Ah{{Dj{e}}Fn}}}GjB`}{fh}00{{{Dj{c}}{Dj{c}}}Dh{FbB`}}{{ce}Dh{}{}}00{{{Dj{c}}l}n{EdB`}}{{{Bn{c}}l}n{EdB`}}{{{Cb{c}}l}n{EdB`}}{cc{}}{{{Ff{e}}}{{Dj{c}}}B`{{Fj{}{{E`{c}}}}}}11{{}f}00{ce{}{}}00{{{A`{c}}}{{A`{b}}}{}}00{{{Ab{c}}}{{Ab{b}}}{}}00{{{Ad{c}}}{{Ad{b}}}{}}00{{{Dj{e}}}{{An{c}}}B`{{C`{c}}}}{{{Dj{c}}eGf}{{Ah{hFn}}}B`Gl}{{{Dj{c}}Gf}fB`}666{c{{Ah{e}}}{}{}}00000{cAj{}}00888{{{Bh{c}}{Bh{c}}}{{Ah{hj}}}B`}```{{cBb}h{}}0{cb{}}000;;;;{{{En{c}}}{{En{c}}}{CnB`}}{{{El{c}}}{{El{c}}}{CnB`}}{{ce}h{}{}}0{{{En{c}}}{{Dd{cc}}}B`}{{{El{c}}}{{Dd{BfBf}}}B`}{{{El{c}}{Bh{c}}}{{Ah{Bfj}}}B`}{{}{{En{c}}}{GnB`}}{{}{{El{c}}}{GnB`}}{fc{}}000{fh}0{{{El{c}}{Bh{c}}{El{c}}}{{Ah{hj}}}B`}{{{En{c}}{En{c}}}Dh{FbB`}}{{{El{c}}{El{c}}}Dh{FbB`}}{{ce}Dh{}{}}00000{{{En{c}}}cB`}{{{En{c}}l}n{EdB`}}{{{El{c}}l}n{EdB`}}{cc{}}0{{}f}0{ce{}{}}0{{{A`{c}}}{{A`{b}}}{}}0{{{Ab{c}}}{{Ab{b}}}{}}0{{{Ad{c}}}{{Ad{b}}}{}}0{{cf{Al{c}}}{{Ah{{En{c}}j}}}B`}{{{Bh{c}}cf{Al{c}}}{{Ah{{El{c}}j}}}B`}{{{Bh{c}}{En{c}}f{Al{c}}}{{Ah{{El{c}}j}}}B`}{{{Bh{c}}Bff{Al{c}}}{{Ah{{El{c}}j}}}B`}{{{Bh{c}}f{Al{c}}}{{El{c}}}B`}{{{En{c}}}fB`}{{{El{c}}}fB`}::{c{{Ah{e}}}{}{}}000{{{En{c}}}cB`}{{{El{c}}}cB`}{cAj{}}0>>{{{El{c}}{Bh{c}}}{{Ah{cj}}}B`}{{{El{c}}{Bh{c}}}{{Ah{{En{c}}j}}}B`}8````````````````````````{{cBb}h{}}0000000000000000000000{cb{}}000000000000000000000000000000000000000000000{ce{}{}}000000000000000000000000000000000000000000000{{{H`{c}}}{{H`{c}}}{CnCh}}{HbHb}{{{Hd{c}}}{{Hd{c}}}{CnCh}}{HfHf}{HhHh}{{{Hj{c}}}{{Hj{c}}}Cn}{HlHl}{HnHn}{I`I`}{IbIb}{{{Id{c}}}{{Id{c}}}{CnCh}}{{{If{c}}}{{If{c}}}{CnCh}}{{{Ih{c}}}{{Ih{c}}}{CnCh}}{IjIj}{{{Il{c}}}{{Il{c}}}Eb}{{{In{c}}}{{In{c}}}Eb}{{{J`{c}}}{{J`{c}}}Eb}{{{Jb{c}}}{{Jb{c}}}{CnB`}}{{{Jd{c}}}{{Jd{c}}}{CnB`}}{JfJf}{JhJh}{{{Jj{c}}}{{Jj{c}}}{CnCh}}{JlJl}{{ce}h{}{}}0000000000000000000000{fc{}}000000000000000000000000000000000000000000000{{{A`{Ej}}}{{Ah{{A`{e}}{A`{Ej}}}}}{bCh}{{Ej{c}}}}{Ej{{Al{e}}}{bCh}{{Ej{c}}}}{{{Ad{Ej}}}{{Ah{{Ad{e}}{Ad{Ej}}}}}{bCh}{{Ej{c}}}}1{fh}0000000000000000000000{{Ejl}n}{{{H`{c}}l}n{EdCh}}{{Hbl}n}{{{Hd{c}}l}n{EdCh}}{{Hfl}n}{{Hhl}n}{{{Hj{c}}l}nEd}{{Hll}n}{{Hnl}n}{{I`l}n}{{Ibl}n}{{{Jj{c}}l}n{EdCh}}{{Jll}n}{cc{}}0000000000000000000000{{}f}0000000000000000000000{ce{}{}}0000000000000000000000{{{A`{c}}}{{A`{b}}}{}}0000000000000000000000{{{Ab{c}}}{{Ab{b}}}{}}0000000000000000000000{{{Ad{c}}}{{Ad{b}}}{}}0000000000000000000000{EjDh}{EjJn}{{{H`{c}}}JnCh}{HbJn}{{{Hd{c}}}JnCh}{HfJn}{HhJn}{{{Hj{c}}}JnCh}{HlJn}{HnJn}{I`Jn}{IbJn}{{{Id{c}}}JnCh}{{{If{c}}}JnCh}{{{Ih{c}}}JnCh}{IjJn}{{{Il{e}}}JnB`{{Eb{}{{E`{c}}}}}}{{{In{e}}}JnB`{{Eb{}{{E`{c}}}}}}{{{J`{e}}}JnB`{{Eb{}{{E`{c}}}}}}{{{Jb{c}}}JnB`}{{{Jd{c}}}JnB`}{JfJn}{JhJn}{{{Jj{c}}}JnCh}{JlJn}{EjcCh}{{{H`{c}}}cCh}{{{Hd{c}}}cCh}{{{Id{c}}}cCh}{{{Il{e}}}cB`{{Eb{}{{E`{c}}}}}}{{{Jd{c}}}cB`}{JfcCh}6{{{Jj{c}}}cCh}73{{{In{e}}}cB`{{Eb{}{{E`{c}}}}}}{{{J`{e}}}cB`{{Eb{}{{E`{c}}}}}}{Ej{{Ef{c}}}Ch}{Ib{{Ef{c}}}Ch}1{Hb{{Ef{c}}}Ch}{{{Hd{c}}}{{Ef{c}}}Ch}{Hf{{Ef{c}}}Ch}{{{Hj{c}}}{{Ef{c}}}Ch}{Hn{{Ef{c}}}Ch}{{{Id{c}}}{{Ef{c}}}Ch}{{{If{c}}}{{Ef{c}}}Ch}{Ij{{Ef{c}}}Ch}{{{Jb{c}}}{{Ef{c}}}B`}{{{Jd{c}}}{{Ef{c}}}B`}{Jf{{Ef{c}}}Ch}{Jh{{Ef{c}}}Ch}{EjcCh}{{{Jj{c}}}cCh}?{Hh{{Ef{c}}}Ch}{Hl{{Ef{c}}}Ch}:{{{Ih{c}}}{{Ef{c}}}Ch}9{{{Il{e}}}{{Ef{c}}}B`{{Eb{}{{E`{c}}}}}}{{{In{e}}}{{Ef{c}}}B`{{Eb{}{{E`{c}}}}}}{{{J`{e}}}{{Ef{c}}}B`{{Eb{}{{E`{c}}}}}};:987{{{H`{c}}}cCh}{HbcCh}{{{Hd{c}}}cCh}{HfcCh}{HhcCh}{{{Hj{c}}}cCh}{HlcCh}{HncCh}{I`cCh}{IbcCh}{{{Id{c}}}cCh}{{{If{c}}}cCh}{{{Ih{c}}}cCh}{IjcCh}{{{In{e}}}cB`{{Eb{}{{E`{c}}}}}}{{{J`{e}}}cB`{{Eb{}{{E`{c}}}}}}{{{Jb{c}}}cB`}{{{Jd{c}}}cB`}{JhcCh}{EjcCh}{{{Jj{c}}}cCh}10{ce{}{}}0000000000000000000000{c{{Ah{e}}}{}{}}000000000000000000000000000000000000000000000{cAj{}}000000000000000000000022222222222222222222222","c":[],"p":[[10,"Any",1238],[10,"Error",1239],[1,"usize"],[1,"unit"],[6,"CircuitError",0],[5,"Formatter",1240],[8,"Result",1240],[5,"Box",1241],[5,"Arc",1242],[5,"Rc",1243],[5,"String",1244],[6,"Result",1245],[5,"TypeId",1238],[6,"Option",1246],[5,"Vec",1247],[10,"PrimeField",1248],[5,"Private",1249],[10,"Circuit",44],[8,"Variable",44],[5,"PlonkCircuit",44],[10,"FftField",1250],[5,"BoolVar",44],[5,"EmulatedSWPointVariable",466],[10,"EmulationConfig",359],[5,"EmulatedTEPointVariable",466],[5,"PointVariable",394],[1,"slice"],[10,"Field",1251],[6,"PlonkType",44],[6,"MergeableCircuitType",44],[10,"Clone",1252],[10,"Arithmetization",44],[5,"DensePolynomial",1253],[1,"tuple"],[5,"EmulatedVariable",359],[1,"bool"],[5,"SWPoint",466],[5,"TEPoint",394],[5,"Affine",1254],[17,"BaseField"],[10,"TECurveConfig",1255],[10,"Debug",1240],[1,"array"],[10,"Hasher",1256],[10,"Gate",622],[5,"FpElemVar",549],[5,"FpElem",549],[10,"SerializableEmulatedStruct",359],[10,"PartialEq",1257],[5,"Projective",1258],[5,"Affine",1259],[10,"SWToTEConParam",394],[10,"SWCurveConfig",1260],[10,"MultiScalarMultiplicationCircuit",394],[6,"SerializationError",1261],[17,"Item"],[10,"Iterator",1262],[10,"Send",1263],[6,"Compress",1264],[6,"Validate",1264],[10,"Read",1265],[10,"Write",1265],[10,"Default",1266],[5,"ConstantGate",622],[5,"AdditionGate",622],[5,"ConstantAdditionGate",622],[5,"SubtractionGate",622],[5,"MultiplicationGate",622],[5,"ConstantMultiplicationGate",622],[5,"BoolGate",622],[5,"EqualityGate",622],[5,"IoGate",622],[5,"FifthRootGate",622],[5,"QuadPolyGate",622],[5,"LinCombGate",622],[5,"MulAddGate",622],[5,"CondSelectGate",622],[5,"EdwardsCurveEquationGate",622],[5,"CurvePointXAdditionGate",622],[5,"CurvePointYAdditionGate",622],[5,"QuaternaryPointSelectXGate",622],[5,"QuaternaryPointSelectYGate",622],[5,"LogicOrGate",622],[5,"LogicOrOutputGate",622],[5,"LookupGate",622],[5,"PaddingGate",622],[1,"str"]],"b":[[25,"impl-Display-for-CircuitError"],[26,"impl-Debug-for-CircuitError"],[434,"impl-From%3CProjective%3CP%3E%3E-for-TEPoint%3CF%3E"],[435,"impl-From%3CAffine%3CP%3E%3E-for-TEPoint%3CF%3E"],[436,"impl-From%3CAffine%3CP%3E%3E-for-TEPoint%3CF%3E"]]}],\
["jf_rescue",{"doc":"This module implements Rescue hash function over the …","t":"TTSTTTTFPFSGFKFSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRKIIFFKRNNNNNNNNNNNNNNNNCMNNNNNNNNNNNNNNNNNNNNNMCMMMMMMMNNNNNNNNNNKMKMFNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["A","A_INV","CRHF_RATE","INIT_VEC_LE","KEY_INJECTION_LE","MDS_LE","PERMUTATION_ROUND_KEYS","PRP","ParameterError","Permutation","ROUNDS","RescueError","RescueMatrix","RescueParameter","RescueVector","STATE_SIZE","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commitment","crhf","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","elems","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","gadgets","init","init","init","init","init","init_vec_ref","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_empty","key_injection_vec_ref","key_schedule","len","linear","mds_matrix_ref","mds_matrix_ref","non_linear","prf","prp","prp_with_round_keys","round_keys_ref","sponge","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vec","vzip","vzip","vzip","vzip","vzip","zero","FixedLengthRescueCommitment","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","commit","default","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","verify","vzip","FixedLengthRescueCRHF","RescueCRHF","VariableLengthRescueCRHF","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","evaluate","evaluate","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","sponge_no_padding","sponge_with_bit_padding","sponge_with_zero_padding","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Native","NonNative","RescueGadget","RescueNativeGadget","RescueNonNativeGadget","RescueNonNativeStateVar","RescueStateVar","SpongeStateVar","Var","__clone_box","__clone_box","array","array_mut","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commitment","create_rescue_state_variable","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","key_schedule","prf","prp","prp_with_round_keys","rescue_full_state_keyed_sponge_no_padding","rescue_full_state_keyed_sponge_with_zero_padding","rescue_permutation","rescue_sponge_no_padding","rescue_sponge_with_padding","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CommitmentGadget","commit","PRFGadget","eval_prf","RescuePRF","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","evaluate","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","vzip","RescueSponge","__clone_box","absorb","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","fork","from","from_state","init","into","into_any","into_any_arc","into_any_rc","into_state","new","squeeze_bits","squeeze_bytes","squeeze_field_elements","squeeze_field_elements_with_sizes","squeeze_native_field_elements","squeeze_native_field_elements_with_sizes","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"jf_rescue"],[161,"jf_rescue::commitment"],[191,"jf_rescue::crhf"],[265,"jf_rescue::gadgets"],[332,"jf_rescue::gadgets::commitment"],[334,"jf_rescue::gadgets::prf"],[336,"jf_rescue::prf"],[360,"jf_rescue::sponge"],[395,"dyn_clone::sealed"],[396,"core::any"],[397,"core::error"],[398,"core::clone"],[399,"core::default"],[400,"alloc::vec"],[401,"ark_ff::fields::prime"],[402,"core::cmp"],[403,"core::fmt"],[404,"core::fmt"],[405,"alloc::boxed"],[406,"alloc::sync"],[407,"alloc::rc"],[408,"alloc::string"],[409,"core::result"],[410,"core::any"],[411,"core::borrow"],[412,"jf_relation::constraint_system"],[413,"jf_relation"],[414,"ark_crypto_primitives::sponge::absorb"],[415,"ark_crypto_primitives::sponge"]],"d":["parameter A, a.k.a., alpha","parameter A^-1","The rate of the sponge used in RescueCRHF.","Initial vector.","Injected keys for each round.","MDS matrix","Permutation keys.","Rescue pseudo-random permutation (PRP) instance","Bad parameter in function call, {0}","Instance of a unkeyed cryptographic permutation to be used …","The # of rounds of rescue hash.","Rescue error type","A matrix that consists of <code>STATE_SIZE</code> number of rescue …","This trait defines constants that are used for rescue hash …","Data type for rescue prp inputs, keys and internal data","The state size of rescue hash.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implements a rescue hash based commitment scheme.","A rescue CRHF implementation","","","","","","","","","","","","","","","","","","","Return vector of the field elements WARNING: may expose …","","","","","","","","","Compute the permutation on RescueVector <code>input</code>","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Rescue hash related gates and gadgets. Including both …","","","","","","Return a pointer to the initial vectors. Does not expose …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Check if the matrix is empty.","Return a pointer to the key injection vectors. Function …","Key scheduling for rescue based PRP for Bls12_381 scalars …","Return the number of columns of the matrix.","Perform a linear transform of the vector. Function needs …","Return a pointer to the mds matrix. Does not expose secret …","Return a pointer to the mds matrix. Does not expose secret …","Helper function to compute f(M,x,c) = Mx^a + c. Function …","A rescue PRF implementation","Rescue pseudorandom permutation for Bls12381 scalars …","Rescue pseudorandom permutation for Bls12381 scalars …","Return a pointer to the round key. Does not expose secret …","This file contains the APIs wrappers for ark-sponge","","","","","","","","","","","","","","","","","","","","","Accessing the i-th vector of the matrix. Function needs to …","","","","","","zero vector","Rescue-based Commitment instance for fixed-length input","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","A rescue-sponge-based CRHF with fixed-input size (if not …","CRHF","A rescue-sponge-based CRHF with variable-input and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Padding","Padding","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Sponge hashing based on rescue permutation for RATE 3 and …","Sponge hashing based on rescue permutation for RATE 3. It …","Similar to <code>RescueCRHF::sponge_with_bit_padding</code> except we …","","","","","","","","","","","","","","","","The native field.","Non-native field.","Trait for rescue circuit over native field.","Type wrapper for the RescueGadget over the native field.","Type wrapper for the RescueGadget over the non-native …","Array of variables representing a Rescue state (4 field …","Array of variables representing a Rescue state (4 field …","Variable to represent the state of the sponge.","How variable is represented in this …","","","Expose the state array.","Expose the mutable state array.","","","","","","","","","","","","","Circuit implementation of the rescue-based commitment …","Create a variable representing a rescue state","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Return the round keys variables for the Rescue block cipher","Circuit implementation of a rescue PRF.","Rescue based Pseudo Random Permutation (PRP)","Return the variable corresponding to the output of the of …","Full-State-Keyed-Sponge with a single output","Similar to <code>Self::rescue_full_state_keyed_sponge_no_padding</code> …","Given an input state st_0 and an output state st_1, ensure …","Sponge-based hashes from Rescue permutations","Sponge-based hashes from Rescue permutations","","","","","","","","","","","Commitment gadget","Commitment function.","Circuit implementation of a PRF.","PRF many to one","A rescue-based PRF that leverages on Full State Keyed …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","A rescue hash function consists of a permutation function …","","Absorb an input into the sponge. This function will absorb …","","","","","","","","","","","","Creates a new sponge with applied domain separation.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Initialize a new instance of the sponge.","WARNING! This trait method is unimplemented and should not …","WARNING! This trait method is unimplemented and should not …","WARNING! This trait method is unimplemented and should not …","WARNING! This trait method is unimplemented and should not …","Squeeze <code>num_elements</code> field elements from the sponge.","WARNING! This trait method is unimplemented and should not …","","","","",""],"i":[11,11,0,11,11,11,11,0,15,0,0,0,0,0,0,0,5,7,8,9,15,5,7,8,9,15,5,7,8,9,15,15,5,7,8,9,15,5,7,8,9,5,7,8,9,5,7,8,9,0,0,5,8,9,15,5,7,8,9,15,5,7,8,9,15,5,7,8,9,5,15,5,15,15,15,5,5,5,9,15,15,5,7,8,9,15,5,5,5,7,7,8,9,9,0,15,5,7,8,9,8,15,5,7,8,9,15,5,7,8,9,15,5,7,8,9,15,5,7,8,9,7,8,8,7,5,8,9,5,0,8,8,9,0,5,7,8,9,15,15,5,7,8,9,15,5,7,8,9,15,5,7,8,9,7,15,5,7,8,9,5,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,33,33,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,41,41,0,0,0,0,0,0,41,36,38,36,36,36,38,36,38,36,38,36,38,36,38,36,38,0,39,36,38,36,38,36,38,36,38,36,36,38,36,38,36,38,36,38,36,38,36,38,39,0,39,39,39,39,39,39,39,36,38,36,38,36,38,36,38,36,38,0,42,0,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45],"f":"````````````````{{cb}d{}}000{cf{}}000000000{ch{}}{ce{}{}}000000000{{{j{c}}}{{j{c}}}l}{{{n{c}}}{{n{c}}}l}{{{A`{c}}}{{A`{c}}}l}{{{Ab{c}}}{{Ab{c}}}l}{{ce}d{}{}}000``{{}{{j{c}}}Ad}{{}{{A`{c}}}Af}{{}{{Ab{c}}}Af}{Ahc{}}000000000{Ahd}0000{{{j{c}}}{{Aj{c}}}Al}{{AnAn}B`}{{{j{c}}{j{c}}}B`Bb}{{ce}B`{}{}}00000{{{Ab{c}}{j{c}}}{{j{c}}}Af}{{AnBd}Bf}0{{{j{c}}Bd}BfBh}{{{n{c}}Bd}BfBh}{{{A`{c}}Bd}BfBh}{{{Ab{c}}Bd}BfBh}{cc{}}0{{{Bj{c}}}{{j{c}}}Bl}{{{Bn{c}}}{{j{c}}}Bl}{{{Bn{{j{c}}}}}{{n{c}}}Al}333{{{A`{c}}}{{Ab{c}}}Af}`{{}Ah}0000{{{A`{c}}}{{j{c}}}Af}{ce{}{}}0000{{{C`{c}}}{{C`{f}}}{}}0000{{{Cb{c}}}{{Cb{f}}}{}}0000{{{Cd{c}}}{{Cd{f}}}{}}0000{{{n{c}}}B`Al}{{{A`{c}}}{{Bj{{j{c}}}}}Af}{{{A`{c}}{j{c}}}{{Aj{{j{c}}}}}Af}{{{n{c}}}AhAl}{{{j{c}}{n{c}}{j{c}}}dAl}{{{A`{c}}}{{n{c}}}Af}{{{Ab{c}}}{{n{c}}}Af}{{{j{c}}{n{c}}{j{c}}}dAf}`{{{A`{c}}{j{c}}{j{c}}}{{j{c}}}Af}{{{A`{c}}{Bj{{j{c}}}}{j{c}}}{{j{c}}}Af}{{{Ab{c}}}{{Bj{{j{c}}}}}Af}`>>>>{cCf{}}{c{{Ch{e}}}{}{}}000000000{cCj{}}0000{{{n{c}}Ah}{{j{c}}}Al}{ce{}{}}0000{{}{{j{c}}}Al}`{{cb}d{}}{cf{}}033{{{Cl{c}}}{{Cl{c}}}{lAf}}{{ce}d{}{}}{{e{Cn{g}}}{{Ch{ik}}}{}{{D`{c}}}{}{}{}}{{}{{Cl{c}}}{AdAf}}{Ahc{}}0{Ahd}{{{Cl{c}}{Cl{c}}}B`{BbAf}}{{ce}B`{}{}}00{{{Cl{c}}Bd}Bf{BhAf}}{cc{}}{{}Ah}>{{{C`{c}}}{{C`{f}}}{}}{{{Cb{c}}}{{Cb{f}}}{}}{{{Cd{c}}}{{Cd{f}}}{}}{ce{}{}}{c{{Ch{e}}}{}{}}0{cCj{}}{{e{Cn{g}}i}{{Ch{{Ch{dd}}k}}}{}{{D`{c}}}{}{}{}}3```{{cb}d{}}00{cf{}}00000555555{{{Db{c}}}{{Db{c}}}{lAf}}{{{Dd{c}}}{{Dd{c}}}{lAf}}{{{Df{c}}}{{Df{c}}}{lAf}}{{ce}d{}{}}00{Ahc{}}00000{Ahd}00{e{{Ch{gi}}}{}{{D`{c}}}{}{}}0{{{Db{c}}Bd}Bf{BhAf}}{{{Dd{c}}Bd}Bf{BhAf}}{{{Df{c}}Bd}Bf{BhAf}}{cc{}}00{{}Ah}00{ce{}{}}00{{{C`{c}}}{{C`{f}}}{}}00{{{Cb{c}}}{{Cb{f}}}{}}00{{{Cd{c}}}{{Cd{f}}}{}}00{{{Bj{c}}Ah}{{Ch{{Aj{c}}An}}}Af}{{{Bj{c}}Ah}{{Aj{c}}}Af}0555{c{{Ch{e}}}{}{}}00000{cCj{}}00777`````````{{cb}d{}}0{Dh{{Bn{Dj}}}}0{cf{}}000::::{DhDh}{{{Dl{c}}}{{Dl{c}}}{lAl}}{{ce}d{}{}}0`{{Dnj}{{Ch{gE`}}}{}{}{{Eb{ce}}}}{Ahc{}}000{Ahd}0{{DhBd}Bf}{{{Dl{c}}Bd}Bf{BhAl}}{{{Bn{Dj}}}Dh}{cc{}}0{{}Ah}0{ce{}{}}0{{{C`{c}}}{{C`{f}}}{}}0{{{Cb{c}}}{{Cb{f}}}{}}0{{{Cd{c}}}{{Cd{f}}}{}}0{{DnngA`}{{Ch{{Aj{g}}E`}}}{}{}{{Eb{ce}}}}`{{Dngg}{{Ch{gE`}}}{}{}{{Eb{ce}}}}{{Dngn{Bj{g}}}{{Ch{gE`}}}{}{}{{Eb{ce}}}}{{DnBj}{{Ch{E`}}}}0{{Dng}{{Ch{gE`}}}{}{}{{Eb{ce}}}}{{DnBjAh}{{Ch{AjE`}}}}099{c{{Ch{e}}}{}{}}000{cCj{}}0;;`{{Ed{Bj{Dj}}Dj}{{Ch{DjE`}}}}`{{EfDj{Bj{Dj}}}{{Ch{DjE`}}}}`{{cb}d{}}{cf{}}0??{{{Eh{c}}}{{Eh{c}}}{lAf}}{{ce}d{}{}}{Ahc{}}0{Ahd}{{ei}{{Ch{km}}}{}{{D`{c}}}{}{{D`{g}}}{}{}}{{{Eh{c}}Bd}Bf{BhAf}}{cc{}}{{}Ah}{ce{}{}}{{{C`{c}}}{{C`{f}}}{}}{{{Cb{c}}}{{Cb{f}}}{}}{{{Cd{c}}}{{Cd{f}}}{}}3{c{{Ch{e}}}{}{}}0{cCj{}}5`?{{{Ej{c}}e}d{AfAl}El}??66{{{Ej{c}}}{{Ej{c}}}{lAf}}>{{}{{Ej{c}}}{AdAf}}>>={{{Ej{c}}Bd}Bf{BhAf}}{{{Ej{c}}{Bj{En}}}{{Ej{c}}}{AfAl}}<{{ce}{{Ej{g}}}{}{}Af}<;:98{{{Ej{c}}}eAf{}}{c{{Ej{e}}}{}{AfAl}}{{{Ej{c}}Ah}{{Aj{B`}}}{AfAl}}{{{Ej{c}}Ah}{{Aj{En}}}{AfAl}}{{{Ej{c}}Ah}{{Aj{e}}}{AfAl}Al}{{{Ej{c}}{Bj{F`}}}{{Aj{e}}}{AfAl}Al}{{{Ej{c}}Ah}{{Aj{c}}}Af}{{{Ej{c}}{Bj{F`}}}{{Aj{c}}}Af}{ce{}{}}{c{{Ch{e}}}{}{}}0{cCj{}}2","c":[],"p":[[5,"Private",395],[1,"unit"],[10,"Any",396],[10,"Error",397],[5,"RescueVector",0],[10,"Clone",398],[5,"RescueMatrix",0],[5,"PRP",0],[5,"Permutation",0],[10,"Default",399],[10,"RescueParameter",0],[1,"usize"],[5,"Vec",400],[10,"PrimeField",401],[6,"RescueError",0],[1,"bool"],[10,"PartialEq",402],[5,"Formatter",403],[8,"Result",403],[10,"Debug",403],[1,"slice"],[10,"Copy",404],[1,"array"],[5,"Box",405],[5,"Arc",406],[5,"Rc",407],[5,"String",408],[6,"Result",409],[5,"TypeId",396],[5,"FixedLengthRescueCommitment",161],[6,"Option",410],[10,"Borrow",411],[5,"RescueCRHF",191],[5,"FixedLengthRescueCRHF",191],[5,"VariableLengthRescueCRHF",191],[5,"RescueStateVar",265],[8,"Variable",412],[5,"RescueNonNativeStateVar",265],[10,"RescueGadget",265],[6,"CircuitError",413],[10,"SpongeStateVar",265],[10,"CommitmentGadget",332],[10,"PRFGadget",334],[5,"RescuePRF",336],[5,"RescueSponge",360],[10,"Absorb",414],[1,"u8"],[6,"FieldElementSize",415]],"b":[[79,"impl-Display-for-RescueError"],[80,"impl-Debug-for-RescueError"],[87,"impl-From%3C%26%5BF%5D%3E-for-RescueVector%3CF%3E"],[88,"impl-From%3C%26%5BF;+STATE_SIZE%5D%3E-for-RescueVector%3CF%3E"]]}],\
["jf_signature",{"doc":"Module for signature primitives.","t":"KTRPRRGKRPRMMNCCNNCNNNNNNNNNNNNMMMMNNNNMNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSCSSSSSSS","n":["AggregateableSignatureSchemes","CS_ID","MessageUnit","ParameterError","PublicParameter","Signature","SignatureError","SignatureScheme","SigningKey","VerificationError","VerificationKey","aggregate","aggregate_verify","as_error_source","bls_over_bls12381","bls_over_bn254","borrow","borrow_mut","constants","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","from","init","into","key_gen","multi_sig_verify","param_gen","sign","to_string","try_from","try_into","type_id","verify","vzip","BLSSignKey","BLSSignature","BLSSignatureScheme","BLSVerKey","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","from_str","from_str","init","init","init","init","into","into","into","into","key_gen","key_gen_v5","param_gen","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","sign","tag","tag","tag","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uncompressed_size","verify","vzip","vzip","vzip","vzip","zeroize","BLSOverBN254CurveSignatureScheme","KeyPair","SignKey","Signature","VerKey","aggregate","aggregate_verify","batch_check","batch_check","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","from_str","from_str","generate","generate","generate_with_sign_key","hash","hash","hash","hash_to_curve","init","init","init","init","init","internal","into","into","into","into","into","key_gen","multi_sig_verify","param_gen","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","sigma","sign","sign","sign_key_internal","sign_key_ref","tag","tag","tag","to_affine","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ver_key","ver_key_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","zeroize","BLS_SIG_COMPRESSED_PK_SIZE","BLS_SIG_COMPRESSED_SIGNATURE_SIZE","BLS_SIG_PK_SIZE","BLS_SIG_SIGNATURE_SIZE","BLS_SIG_SK_SIZE","CS_ID_BLS_BN254","CS_ID_BLS_MIN_SIG","CS_ID_SCHNORR","tag","BLS_SIG","BLS_SIGNING_KEY","BLS_VER_KEY","SCHNORR_KEY_PAIR","SCHNORR_SIG","SCHNORR_SIGNING_KEY","SCHNORR_VER_KEY"],"q":[[0,"jf_signature"],[41,"jf_signature::bls_over_bls12381"],[165,"jf_signature::bls_over_bn254"],[338,"jf_signature::constants"],[347,"jf_signature::constants::tag"],[354,"core::result"],[355,"core::convert"],[356,"core::error"],[357,"core::fmt"],[358,"core::fmt"],[359,"rand_core"],[360,"rand_core"],[361,"alloc::string"],[362,"core::any"],[363,"ark_serialize::error"],[364,"serde::de"],[365,"ark_serialize"],[366,"ark_serialize"],[367,"serde::ser"],[368,"std::io"],[369,"core::iter::traits::iterator"],[370,"core::marker"],[371,"core::cmp"],[372,"ark_bn254::fields::fr"],[373,"core::hash"],[374,"ark_bn254::curves"],[375,"ark_bn254::curves"]],"d":["Trait for aggregatable signatures. TODO: generic over hash …","Ciphersuite Identifier","A message is &amp;[MessageUnit]","Bad parameter in function call, {0}","Public Parameter","Signature","Signature error type","Trait definition for a signature scheme.","Signing key.","Verification failed, {0}","Verification key","Aggregate multiple signatures into a single signature The …","Verify an aggregate signature w.r.t. a list of messages …","","BLS Signature Scheme","This module implements the BLS signature over the BN254 …","","","Tags to be used for <code>tagged-base64</code>","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Sample a pair of keys.","Verify a multisignature w.r.t. a single message and a list …","generate public parameters from RNG. If the RNG is not …","Sign a message with the signing key","","","","","Verify a signature.","","A BLS Secret Key (Signing Key).","A BLS Signature.","BLS signature scheme. Wrapping around structs from the <code>blst</code>…","A BLS Public Key (Verification Key).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate a BLS key pair. Make sure the <code>prng</code> passed in are …","Alternative deterministic key_gen compatible with IRTF …","generate public parameters from RNG. If the RNG is not …","","","","Secret key can only be serialized in compressed mode.","","","","","","Sign a message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature.","","","","","","BLS signature scheme.","Signature secret key pair used to sign messages","Signing key for BLS signature.","The signature of BLS signature scheme","Signature public verification key","Aggregate multiple signatures into a single signature …","Verify an aggregate signature w.r.t. a list of messages …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Signature Key generation function","Key-pair generation algorithm","Key pair generation using a particular sign key secret <code>sk</code>","","","","Non constant time hash to curve algorithm (a.k.a “…","","","","","","Get the internal of verifying key, namely a curve Point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sample a pair of keys.","Verify a multisignature w.r.t. a single message and a list …","Generate public parameters from RNG.","","","","","","","","","","","","","","","The signature is a G1 group element.","Sign a message with the signing key","Signature function","Get the internal of the signing key, namely a …","Get the signing key reference","","","","Convert the verification key into the affine form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the verification key","Get reference to verification key","Verify a signature.","Signature verification function","","","","","","","","","Size in bytes of a compressed verification key in our BLS …","Size in bytes of a compressed signature in our BLS …","Size in bytes of a verification key in our BLS signature …","Size in bytes of a signature in our BLS signature scheme.","Size in bytes of a secret key in our BLS signature scheme.","ciphersuite identifier for BLS signature over BN254 Note …","ciphersuite identifier for BLS signature over BLS12_381, …","ciphersuite identifier for schnorr signature","Tags","Tag for BLS signature","Tag for BLS signing key","Tag for BLS verification key","Tag for Schnorr key pair","Tag for Schnorr signature","Tag for Schnorr signing key","Tag for Schnorr verification key"],"i":[0,46,46,2,46,46,0,0,46,2,46,47,47,2,0,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,46,47,46,46,2,2,2,2,46,2,0,0,0,0,18,20,21,22,18,20,21,22,18,20,21,18,20,21,22,18,20,21,22,20,18,18,20,20,21,21,22,18,20,21,22,18,20,21,18,20,21,18,20,21,22,18,20,21,18,18,20,20,21,21,18,18,20,20,21,21,22,18,20,21,22,18,20,21,18,20,21,22,18,20,21,22,22,22,22,18,20,21,18,20,21,18,20,21,22,18,20,21,18,20,21,22,18,20,21,18,18,18,20,20,20,21,21,21,22,18,20,21,22,18,20,21,22,20,22,18,20,21,22,18,0,0,0,0,0,39,39,33,36,37,38,39,33,36,37,38,39,33,36,37,38,33,36,37,38,39,33,36,37,38,39,33,36,37,38,33,36,33,39,33,36,37,38,39,33,36,37,38,39,33,36,38,33,36,37,38,39,33,36,37,38,39,33,36,38,33,33,36,36,38,38,39,33,33,36,36,38,38,39,33,36,36,37,37,38,33,36,38,33,37,37,33,36,38,0,39,33,36,37,38,36,39,33,36,37,38,39,39,39,33,36,39,33,36,38,33,36,37,38,33,36,37,38,38,39,37,37,37,33,36,38,36,39,33,36,37,38,33,36,38,39,33,33,33,36,36,36,37,38,38,38,39,33,36,37,38,39,33,36,37,38,37,37,39,36,39,33,36,37,38,33,36,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"```````````{{c{b{e}}{b{g}}}{{f{gd}}}{}{}{}}{{c{b{e}}{b{i}}k}{{f{hd}}}{}{}{}{{j{{b{g}}}}}{}}{cl{}}``{ce{}{}}0`{nc{}}0{nh}{{dd}A`}{{ce}A`{}{}}0{{dAb}Ad}0{Afd}{cc{}}{{}n}8{{ce}{{f{{Ah{gi}}d}}}{}{AjAl}{}{}}{{c{b{e}}{b{g}}i}{{f{hd}}}{}{}{}{}}{{{An{c}}}{{f{ed}}}{AjAl}{}}{{ceik}{{f{md}}}{}{}{}{{j{{b{g}}}}}{AjAl}{}}{cB`{}}{c{{f{e}}}{}{}}0{cBb{}}{{ceik}{{f{hd}}}{}{}{}{{j{{b{g}}}}}{}}{ce{}{}}````00000000{Bd{{f{hBf}}}}{Bh{{f{hBf}}}}{Bj{{f{hBf}}}}{BdBd}{BhBh}{BjBj}{BlBl}{{ce}h{}{}}000{{}Bh}{Bdc{}}{nc{}}{Bhc{}}11{Bjc{}}22222{c{{f{Bd}}}Bn}{c{{f{Bh}}}Bn}{c{{f{Bj}}}Bn}{{cC`Cb}{{f{BdBf}}}Cd}{{cC`Cb}{{f{BhBf}}}Cd}{{cC`Cb}{{f{BjBf}}}Cd}{nh}000{{BdBd}A`}{{BhBh}A`}{{BjBj}A`}{{ce}A`{}{}}00000{{BdAb}Ad}0{{BhAb}Ad}0{{BjAb}Ad}0{{BlAb}Ad}{cc{}}000{Cf{{f{Bdc}}}{}}{Cf{{f{Bhc}}}{}}{Cf{{f{Bjc}}}{}}{{}n}000{ce{}{}}000{{ce}{{f{{Ah{gi}}d}}}{}{AjAl}{}{}}{{{b{Ch}}{b{Ch}}{b{Ch}}}{{f{{Ah{ce}}d}}}{}{}}{{{An{c}}}{{f{ed}}}{AjAl}{}}{{Bdc}fCj}{{Bhc}fCj}{{Bjc}fCj}{{BdcC`}{{f{hBf}}}Cl}{{BhcC`}{{f{hBf}}}Cl}{{BjcC`}{{f{hBf}}}Cl}{{BdC`}n}{{BhC`}n}{{BjC`}n}{{ceik}{{f{md}}}{}{}{}{{j{{b{g}}}}}{AjAl}{}}{{}B`}00>>>>{cB`{}}00{Cn{{f{Bdc}}}{}}0{c{{f{e}}}{}{}}0{Cn{{f{Bhc}}}{}}0{Cn{{f{Bjc}}}{}}2022222{cBb{}}000{Bhn}{{ceik}{{f{hd}}}{}{}{}{{j{{b{g}}}}}{}}{ce{}{}}000{Bdh}`````{{c{b{e}}{b{g}}}{{f{gd}}}{}{}{}}{{c{b{e}}{b{i}}k}{{f{hd}}}{}{}{}{{j{{b{g}}}}}{}}{c{{f{hBf}}}{{Dd{}{{D`{Db}}}}Df}}{c{{f{hBf}}}{{Dd{}{{D`{Dh}}}}Df}}{c{{f{hBf}}}{{Dd{}{{D`{Dj}}}}Df}}{c{{f{hBf}}}{{Dd{}{{D`{Dl}}}}Df}}7777777777{Db{{f{hBf}}}}{Dh{{f{hBf}}}}{Dj{{f{hBf}}}}{Dl{{f{hBf}}}}{DnDn}{DbDb}{DhDh}{DjDj}{DlDl}{{ce}h{}{}}0000{{DbDb}E`}{{DhDh}E`}{{}Db}{nc{}}000000000{c{{f{Dn}}}Bn}{c{{f{Db}}}Bn}{c{{f{Dh}}}Bn}{c{{f{Dl}}}Bn}{{cC`Cb}{{f{DbBf}}}Cd}{{cC`Cb}{{f{DhBf}}}Cd}{{cC`Cb}{{f{DjBf}}}Cd}{{cC`Cb}{{f{DlBf}}}Cd}{nh}0000{{DnDn}A`}{{DbDb}A`}{{DhDh}A`}{{DlDl}A`}{{ce}A`{}{}}00000{{DnAb}Ad}{{DbAb}Ad}0{{DhAb}Ad}0{{DlAb}Ad}0{cc{}}00{DbDh}{DbDj}22{Cf{{f{Dbc}}}{}}{Cf{{f{Dhc}}}{}}{Cf{{f{Dlc}}}{}}{cDb{AjAl}}{cDj{AjAl}}{EbDj}{{Dbc}hEd}{{Dhc}hEd}{{Dlc}hEd}{{{b{Ch}}}Ef}{{}n}0000{DhEh}{ce{}{}}0000{{ce}{{f{{Ah{gi}}d}}}{}{AjAl}{}{}}{{c{b{e}}{b{g}}i}{{f{hd}}}{}{}{}{}}{{{An{c}}}{{f{ed}}}{AjAl}{}}{{DbDb}{{An{E`}}}}{{DhDh}{{An{E`}}}}{{Dnc}fCj}{{Dbc}fCj}{{Dhc}fCj}{{Dlc}fCj}{{DbcC`}{{f{hBf}}}Cl}{{DhcC`}{{f{hBf}}}Cl}{{DjcC`}{{f{hBf}}}Cl}{{DlcC`}{{f{hBf}}}Cl}{{DbC`}n}{{DhC`}n}{{DjC`}n}{{DlC`}n}`{{ceik}{{f{md}}}{}{}{}{{j{{b{g}}}}}{AjAl}{}}{{Dj{b{Ch}}c}Dl{{j{{b{Ch}}}}}}{DjEb}{DjDb}{{}B`}00{DhEj}{ce{}{}}0000{cB`{}}00{c{{f{e}}}{}{}}{Cn{{f{Dbc}}}{}}101{Cn{{f{Dhc}}}{}}022{Cn{{f{Dlc}}}{}}033333{cBb{}}0000{DjDh}0{{ceik}{{f{hd}}}{}{}{}{{j{{b{g}}}}}{}}{{Dh{b{Ch}}Dlc}{{f{hd}}}{{j{{b{Ch}}}}}}99999{Dbh}{Dhh}{Djh}````````````````","c":[],"p":[[1,"slice"],[6,"SignatureError",0],[6,"Result",354],[1,"unit"],[10,"AsRef",355],[10,"Error",356],[1,"usize"],[1,"bool"],[5,"Formatter",357],[8,"Result",357],[6,"BLST_ERROR",358],[1,"tuple"],[10,"CryptoRng",359],[10,"RngCore",359],[6,"Option",360],[5,"String",361],[5,"TypeId",362],[5,"BLSSignKey",41],[6,"SerializationError",363],[5,"BLSVerKey",41],[5,"BLSSignature",41],[5,"BLSSignatureScheme",41],[10,"Deserializer",364],[6,"Compress",365],[6,"Validate",365],[10,"Read",366],[1,"str"],[1,"u8"],[10,"Serializer",367],[10,"Write",366],[5,"TaggedBase64",368],[17,"Item"],[5,"SignKey",165],[10,"Iterator",369],[10,"Send",370],[5,"VerKey",165],[5,"KeyPair",165],[5,"Signature",165],[5,"BLSOverBN254CurveSignatureScheme",165],[6,"Ordering",371],[8,"Fr",372],[10,"Hasher",373],[8,"G1Projective",374],[8,"G2Projective",374],[8,"G2Affine",374],[10,"SignatureScheme",0],[10,"AggregateableSignatureSchemes",0]],"b":[[25,"impl-Display-for-SignatureError"],[26,"impl-Debug-for-SignatureError"],[95,"impl-Display-for-BLSSignKey"],[96,"impl-Debug-for-BLSSignKey"],[97,"impl-Debug-for-BLSVerKey"],[98,"impl-Display-for-BLSVerKey"],[99,"impl-Display-for-BLSSignature"],[100,"impl-Debug-for-BLSSignature"],[140,"impl-TryFrom%3C%26TaggedBase64%3E-for-BLSSignKey"],[141,"impl-TryFrom%3CTaggedBase64%3E-for-BLSSignKey"],[144,"impl-TryFrom%3C%26TaggedBase64%3E-for-BLSVerKey"],[145,"impl-TryFrom%3CTaggedBase64%3E-for-BLSVerKey"],[146,"impl-TryFrom%3C%26TaggedBase64%3E-for-BLSSignature"],[148,"impl-TryFrom%3CTaggedBase64%3E-for-BLSSignature"],[237,"impl-Debug-for-SignKey"],[238,"impl-Display-for-SignKey"],[239,"impl-Debug-for-VerKey"],[240,"impl-Display-for-VerKey"],[241,"impl-Debug-for-Signature"],[242,"impl-Display-for-Signature"],[306,"impl-TryFrom%3CTaggedBase64%3E-for-SignKey"],[308,"impl-TryFrom%3C%26TaggedBase64%3E-for-SignKey"],[310,"impl-TryFrom%3C%26TaggedBase64%3E-for-VerKey"],[311,"impl-TryFrom%3CTaggedBase64%3E-for-VerKey"],[314,"impl-TryFrom%3CTaggedBase64%3E-for-Signature"],[315,"impl-TryFrom%3C%26TaggedBase64%3E-for-Signature"]]}],\
["jf_utils",{"doc":"Jellyfish utilities library.","t":"FNNHHCHHNNNQQNHHHHHHNNHHNNHHCCNHQQQQNNNNHHHHFNNNNNNNNNNNHHHNNNNN","n":["CanonicalBytes","borrow","borrow_mut","bytes_from_field_elements","bytes_to_field_elements","canonical","challenge_bit_len","compute_len_to_next_multiple","deref","deref_mut","deserialize","deserialize_canonical_bytes","deserialize_canonical_bytes","drop","field_bit_len","field_byte_len","field_switching","fq_to_fr","fq_to_fr_with_mask","fr_to_fq","from","from","hadamard_product","hash_to_field","init","into","multi_pairing","pad_with_zeros","par_utils","reed_solomon_code","serialize","test_rng","test_serde_default","test_serde_default","to_bytes","to_bytes","try_from","try_into","type_id","vzip","deserialize","serialize","parallelizable_chunks","parallelizable_slice_iter","RSCodeError","as_error_source","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","reed_solomon_erasure_decode","reed_solomon_erasure_decode_rou","reed_solomon_erasure_encode","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"jf_utils"],[40,"jf_utils::canonical"],[42,"jf_utils::par_utils"],[44,"jf_utils::reed_solomon_code"],[64,"alloc::vec"],[65,"ark_ff::fields"],[66,"core::borrow"],[67,"core::result"],[68,"serde::de"],[69,"ark_ff::fields::prime"],[70,"ark_serialize"],[71,"alloc::string"],[72,"core::convert"],[73,"ark_ec::pairing"],[74,"ark_ec::pairing"],[75,"rand::rngs::std"],[76,"core::any"],[77,"ark_serialize"],[78,"core::marker"],[79,"rayon::slice"],[80,"core::error"],[81,"core::fmt"],[82,"core::fmt"],[83,"ark_poly::domain::radix2"],[84,"ark_ff::fields::fft_friendly"],[85,"core::iter::traits::iterator"]],"d":["A helper for converting ark_serialize::CanonicalSerialize …","","","Deterministic, infallible inverse of …","Deterministic, infallible, invertible conversion from …","Serializers for elements that are Ark-Works serializable …","","","","","","","","","","","","Convert a base field element to a scalar field element. …","Convert a field element in F(rom) to a field element in …","Convert a scalar field element to a base field element. …","Returns the argument unchanged.","","Compute the hadamard product of two vectors (of equal …","Hash a sequence of bytes to into a field element, whose …","","Calls <code>U::from(self)</code>.","A simple wrapper of multi-pairing function.","","Utilities for parallel code.","Module for erasure code","","","","","Takes as input a struct, and converts them to a series of …","Takes as input a struct, and converts them to a series of …","","","","","","","","this function helps with slice iterator creation that …","Erasure code error","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Decode into <code>data_size</code> data elements via polynomial …","Like <code>reed_solomon_erasure_decode</code> except input points are …","Erasure-encode <code>data</code> into <code>data.len() + parity_size</code> shares.","","","","",""],"i":[0,7,7,0,0,0,0,0,7,7,7,0,0,7,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,7,0,0,0,0,0,7,7,7,7,0,0,0,0,0,25,25,25,25,25,25,25,25,25,25,25,0,0,0,25,25,25,25,25],"f":"`{ce{}{}}0{e{{d{b}}}f{{j{{h{c}}}}}}{c{{d{e}}}{{j{{h{b}}}}}f}`{{}l}{{ll}l}{lc{}}0{c{{A`{n}}}Ab}``{lAd}44{ceAfAf}{c{}Af}1{{}cAf}{cc{}}{cnAh}{{ei}{{A`{{d{g}}Aj}}}{}{{Al{{h{c}}}}}{}{{Al{{h{g}}}}}}{ce{{Al{{h{b}}}}}Af};>{{hh}{{An{c}}}B`}{{{d{c}}l}Adf}``{{nc}A`Bb}{{}Bd}````{c{{A`{e}}}{}{}}0{cBf{}}{ce{}{}}{c{{A`{e}}}AbBh}{{ce}A`AhBb}{{{h{c}}l}{{Bj{c}}}Bl}{{{h{c}}}{{Bn{c}}}Bl}`{cC`{}}55{lc{}}0{lAd}{{CbCd}Cf}0{cc{}}{{}l}:{{cl}{{A`{{d{e}}Cb}}}Chf}{{cl{Cj{e}}}{{A`{{d{e}}Cb}}}ChCl}{{cl}{{`{{D`{}{{Cn{e}}}}}}}Chf}{cAj{}}{c{{A`{e}}}{}{}}0{cBf{}}{ce{}{}}","c":[],"p":[[1,"u8"],[5,"Vec",64],[10,"Field",65],[1,"slice"],[10,"Borrow",66],[1,"usize"],[5,"CanonicalBytes",0],[6,"Result",67],[10,"Deserializer",68],[1,"unit"],[10,"PrimeField",69],[10,"CanonicalSerialize",70],[5,"String",71],[10,"AsRef",72],[5,"PairingOutput",73],[10,"Pairing",73],[10,"Serializer",74],[5,"StdRng",75],[5,"TypeId",76],[10,"CanonicalDeserialize",70],[5,"Chunks",77],[10,"Sync",78],[5,"Iter",79],[10,"Error",80],[5,"RSCodeError",44],[5,"Formatter",81],[8,"Result",81],[10,"IntoIterator",82],[5,"Radix2EvaluationDomain",83],[10,"FftField",84],[17,"Item"],[10,"Iterator",85]],"b":[[51,"impl-Display-for-RSCodeError"],[52,"impl-Debug-for-RSCodeError"]]}],\
["jf_vdf",{"doc":"Trait and implementation for a Verifiable Delay Function …","t":"RRRRKFNNNNNNNNMNNNNNCMNNNNMNTFFKFNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Input","Output","Proof","PublicParameter","VDF","VDFError","borrow","borrow_mut","deref","deref_mut","drop","eq","equivalent","equivalent","eval","fmt","fmt","from","init","into","minroot","setup","to_string","try_from","try_into","type_id","verify","vzip","EXP_COEF","MinRoot","MinRootElement","MinRootField","MinRootPP","batch_check","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","difficulty","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","from","from","from","from","init","init","init","into","into","into","partial_cmp","partial_cmp","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","setup","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip"],"q":[[0,"jf_vdf"],[28,"jf_vdf::minroot"],[104,"core::result"],[105,"core::fmt"],[106,"core::fmt"],[107,"rand_core"],[108,"rand_core"],[109,"core::any"],[110,"ark_serialize::error"],[111,"core::iter::traits::iterator"],[112,"core::marker"],[113,"core::clone"],[114,"core::cmp"],[115,"core::cmp"],[116,"ark_serialize"],[117,"ark_serialize"],[118,"core::cmp"],[119,"core::cmp"]],"d":["VDF input.","VDF output.","VDF proof.","Public parameters","A trait for VDF proof, evaluation and verification.","VDF error type","","","","","","","","","Computes the VDF output and proof.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Instantiation of the MinRoot Delay function …","Generates a public parameter from RNG with given …","","","","","Verifies a VDF output given the proof.","","The MinRoot iteration is calculating the cubic root (or …","Dummy struct for MinRoot delay function.","A minroot element consists of a pair of field elements.","MinRoot compatible field","Public parameter for MinRoot DF,","","","","","","","","","","","","","","","","","","","","","","","","","","","Indicates the number of iterations","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[35,35,35,35,0,0,3,3,3,3,3,3,3,3,35,3,3,3,3,3,0,35,3,3,3,3,35,3,20,0,0,0,0,17,21,36,17,21,36,17,21,17,21,17,21,17,21,17,21,17,21,36,17,21,36,17,21,17,21,17,36,17,21,17,21,17,17,21,21,36,17,21,36,17,21,21,36,17,21,36,17,21,17,21,17,21,17,21,36,17,21,36,17,21,36,17,21,36,17,21,36,36,17,21],"f":"``````{ce{}{}}0{bc{}}0{bd}{{ff}h}{{ce}h{}{}}0{{ce}{{l{{j{gi}}f}}}{}{}{}{}}{{fn}A`}0{cc{}}{{}b}8`{{Ab{Ad{c}}}{{l{ef}}}{AfAh}{}}{cAj{}}{c{{l{e}}}{}{}}0{cAl{}}{{cegi}{{l{{l{dd}}f}}}{}{}{}{}}=`````{c{{l{dAn}}}{{Bd{}{{B`{Bb}}}}Bf}}{e{{l{dAn}}}Bh{{Bd{}{{B`{{Bj{c}}}}}}Bf}}??????{Bb{{l{dAn}}}}{{{Bj{c}}}{{l{dAn}}}Bh}{BbBb}{{{Bj{c}}}{{Bj{c}}}{BlBh}}{{ce}d{}{}}0{{BbBb}Bn}{{{Bj{c}}{Bj{c}}}Bn{C`Bh}}{{}Bb}{{}{{Bj{c}}}{CbBh}}{bc{}}00000{{cCdCf}{{l{BbAn}}}Ch}{{cCdCf}{{l{{Bj{e}}An}}}ChBh}`{bd}00{{BbBb}h}{{{Bj{c}}{Bj{c}}}h{CjBh}}{{ce}h{}{}}000{{ce}{{l{{j{gi}}f}}}{}{}{}{}}{{Bbn}A`}{{{Bj{c}}n}A`{ClBh}}{cc{}}00{e{{Bj{c}}}Bh{{D`{}{{Cn{c}}}}}}{{}b}00{ce{}{}}00{{BbBb}{{Ad{Bn}}}}{{{Bj{c}}{Bj{c}}}{{Ad{Bn}}}{DbBh}}{{BbcCd}{{l{dAn}}}Dd}{{{Bj{c}}eCd}{{l{dAn}}}BhDd}{{BbCd}b}{{{Bj{c}}Cd}bBh}{{Ab{Ad{c}}}{{l{ef}}}{AfAh}{}}77{c{{l{e}}}{}{}}00000{cAl{}}00{{cegi}{{l{{l{dd}}f}}}{}{}{}{}}:::","c":[],"p":[[1,"usize"],[1,"unit"],[5,"VDFError",0],[1,"bool"],[1,"tuple"],[6,"Result",104],[5,"Formatter",105],[8,"Result",105],[1,"u64"],[6,"Option",106],[10,"CryptoRng",107],[10,"RngCore",107],[5,"String",108],[5,"TypeId",109],[6,"SerializationError",110],[17,"Item"],[5,"MinRootPP",28],[10,"Iterator",111],[10,"Send",112],[10,"MinRootField",28],[5,"MinRootElement",28],[10,"Clone",113],[6,"Ordering",114],[10,"Ord",114],[10,"Default",115],[6,"Compress",116],[6,"Validate",116],[10,"Read",117],[10,"PartialEq",114],[10,"Debug",105],[17,"BaseField"],[10,"AffineRepr",118],[10,"PartialOrd",114],[10,"Write",117],[10,"VDF",0],[5,"MinRoot",28]],"b":[[15,"impl-Display-for-VDFError"],[16,"impl-Debug-for-VDFError"]]}],\
["jf_vid",{"doc":"Trait and implementation for a Verifiable Information …","t":"PRRPPPRFGIKNCNNNNNNNNNNNOMONNNNNMNNNNNNNNNNNMMMNNNNNNNNNNNMCCMNONNNNNNNNMNNIFFKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNCNNCNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKFNNNNNNNOONNNNNNNNNMOMONNNNNKRMM","n":["Argument","Commit","Common","Err","Internal","Ok","Share","VidDisperse","VidError","VidResult","VidScheme","__clone_box","advz","as_any","as_any","as_any_mut","as_any_mut","as_error_source","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","commit","commit_only","common","deref","deref","deref_mut","deref_mut","deserialize","disperse","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_multiplicity","get_num_storage_nodes","get_payload_byte_len","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_consistent","payload_prover","precomputable","recover_payload","serialize","shares","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify_share","vzip","vzip","Advz","AdvzInternal","Common","MaybeGPU","Share","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","commit_only","commit_only_precompute","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_with_mode","disperse","disperse_precompute","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","get_multiplicity","get_num_storage_nodes","get_payload_byte_len","hash","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_consistent","kzg_batch_commit","kzg_batch_commit","new","new","payload_proof","payload_proof","payload_prover","payload_verify","payload_verify","precomputable","recover_payload","serialize","serialize","serialize_with_mode","serialized_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_share","vzip","vzip","vzip","with_multiplicity","with_multiplicity","LargeRangeProof","SmallRangeProof","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PrecomputeData","__clone_box","as_any","as_any_mut","batch_check","borrow","borrow_mut","check","clone","clone_into","deref","deref_mut","deserialize","deserialize_with_mode","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","serialize","serialize_with_mode","serialized_size","to_owned","try_from","try_into","type_id","vzip","PayloadProver","Statement","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","commit","common","deref","deref_mut","drop","from","init","into","into_any","into_any_arc","into_any_rc","payload_proof","payload_subslice","payload_verify","range","to_owned","try_from","try_into","type_id","vzip","Precomputable","PrecomputeData","commit_only_precompute","disperse_precompute"],"q":[[0,"jf_vid"],[75,"jf_vid::advz"],[191,"jf_vid::advz::payload_prover"],[249,"jf_vid::advz::precomputable"],[284,"jf_vid::payload_prover"],[313,"jf_vid::precomputable"],[317,"dyn_clone::sealed"],[318,"core::any"],[319,"core::error"],[320,"core::marker"],[321,"core::clone"],[322,"core::fmt"],[323,"core::fmt"],[324,"core::cmp"],[325,"core::cmp"],[326,"serde::ser"],[327,"core::marker"],[328,"core::convert"],[329,"core::convert"],[330,"serde::de"],[331,"alloc::sync"],[332,"alloc::rc"],[333,"alloc::vec"],[334,"serde::ser"],[335,"core::any"],[336,"ark_ec::pairing"],[337,"jf_merkle_tree::hasher"],[338,"core::iter::traits::iterator"],[339,"core::marker"],[340,"ark_serialize"],[341,"ark_poly::polynomial::univariate::dense"],[342,"core::borrow"],[343,"core::ops::range"],[344,"std::io"]],"d":["invalid args: {0}","Payload commitment.","Common data sent to all storage nodes.","Contains the error value","internal error: {0}","Contains the success value","Share-specific data sent to a storage node.","Convenience struct to aggregate disperse data.","The error type for <code>VidScheme</code> methods.","Convenience <code>Result</code> wrapper for <code>VidError</code>.","VID: Verifiable Information Dispersal","","Implementation of Verifiable Information Dispersal (VID) …","","","","","","","","","","","","VID payload commitment.","Compute a payload commitment","VID common data to send to all storage nodes.","","","","","","Compute shares to send to the storage nodes","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Extract the number of poly evals per share …","Extract the number of storage nodes from a …","Extract the payload byte length data from a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Check that a <code>VidScheme::Common</code> is consistent with a …","Trait for additional functionality in Verifiable …","Trait for additional functionality in Verifiable …","Recover payload from shares. Do not verify shares or check …","","VID disperse shares to send to the storage nodes.","","","","","","","","","Verify a share. Used by both storage node and retrieval …","","","Normal Advz VID that’s only using CPU","The ADVZ VID scheme, a concrete impl for <code>VidScheme</code>. …","The <code>VidScheme::Common</code> type for <code>Advz</code>.","A helper trait that cover API that maybe instantiated …","The <code>VidScheme::Share</code> type for <code>Advz</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","kzg batch commit TODO: (alex) it’s unfortnate that we …","","Return a new instance of <code>Self</code> from (mostly) …","Return a new instance of <code>Self</code> from (mostly) …","","","Implementations of <code>PayloadProver</code> for <code>Advz</code>.","","","Implementations of <code>Precomputable</code> for <code>Advz</code>.","","","","","","","","","","","","","","","","","","","","","","Like <code>Advz::new</code> except with a <code>multiplicity</code> arg.","Like <code>Advz::new</code> except with a <code>multiplicity</code> arg.","A proof intended for use on large payload subslices.","A proof intended for use on small payload subslices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Data that can be precomputed as used in dispersal","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Payload proof functionality for <code>VidScheme</code>.","A convenience struct to reduce the list of arguments to …","","","","","","","","VID commitment against which the proof will be checked.","VID data against which the proof will be checked.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Compute a proof for a subslice of payload data.","The subslice <code>payload[range.start..range.end]</code> from a call to","Verify a proof made by <code>PayloadProver::payload_proof</code>.","The range used to make <code>Self::payload_subslice</code>.","","","","","","Allow for precomputation of certain data for <code>VidScheme</code>.","Precomputed data that can be (re-)used during disperse …","Similar to <code>VidScheme::commit_only</code> but returns additional …","Similar to <code>VidScheme::disperse</code> but takes as input …"],"i":[33,6,6,11,33,11,6,0,0,0,0,5,0,5,33,5,33,33,5,33,5,33,5,5,5,6,5,5,33,5,33,5,6,5,33,5,5,5,5,5,33,33,5,33,6,6,6,5,5,33,5,33,5,33,5,33,5,33,6,0,0,6,5,5,5,33,5,33,5,33,5,33,6,5,33,0,0,0,0,0,50,51,47,50,51,47,50,51,47,47,50,51,47,50,51,47,47,50,51,47,50,51,47,50,50,50,51,47,50,51,47,51,47,47,50,50,50,51,47,50,51,47,50,50,50,51,51,51,47,47,47,50,51,47,50,51,47,50,50,50,51,47,50,51,47,50,51,47,50,51,47,50,51,47,50,51,47,50,56,58,58,50,50,50,0,50,50,0,50,51,47,47,47,50,51,47,50,51,47,50,51,47,50,51,47,50,50,51,47,58,50,0,0,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,62,62,61,61,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,68,63,68,63,63,63,63,63,63,0,70,70,70],"f":"```````````{{cb}d{}}`{cf{}}000{ch{}}{ce{}{}}000{{{j{c}}}{{j{c}}}{ln}}{{ce}d{}{}}`{{{l{}{{A`{c}}{Ab{e}}{Ad{g}}}}i}{{Af{c}}}{AhAjAlAnB`BbBdBfBh{Bl{Bj}}{Bn{Bj}}}{AhAjAnB`BbBdBfBh}{AhAjAnB`BbBdBfBh}{{Cd{{Cb{C`}}}}}}`{Cfc{}}000{c{{Ch{{j{e}}}}}Cj{ln}}{{{l{}{{A`{c}}{Ab{e}}{Ad{g}}}}i}{{Af{{j{{l{}{{A`{c}}{Ab{e}}{Ad{g}}}}}}}}}{AhAjAlAnB`BbBdBfBh{Bl{Bj}}{Bn{Bj}}}{AhAjAnB`BbBdBfBh}{AhAjAnB`BbBdBfBh}{{Cd{{Cb{C`}}}}}}{Cfd}0{{{j{c}}{j{c}}}Cl{ln}}{{ce}Cl{}{}}00{{{j{c}}Cn}D`{ln}}{{DbCn}D`}0{cc{}}0{cDd{}}00{{{j{c}}e}d{ln}Df}{{}Cf}0??{{{Dh{c}}}{{Dh{f}}}{}}0{{{Dj{c}}}{{Dj{f}}}{}}0{{{Dl{c}}}{{Dl{f}}}{}}0{{ce}{{Af{d}}}{}{}}``{{{l{}{{A`{c}}{Ab{e}}{Ad{g}}}}{Cb{e}}g}{{Af{{Dn{C`}}}}}{AhAjAlAnB`BbBdBfBh{Bl{Bj}}{Bn{Bj}}}{AhAjAnB`BbBdBfBh}{AhAjAnB`BbBdBfBh}}{{{j{c}}e}Ch{ln}E`}`{ce{}{}}{cEb{}}{c{{Ch{e}}}{}{}}000{cEd{}}0{{{l{}{{A`{c}}{Ab{e}}{Ad{g}}}}egc}{{Af{{Ch{dd}}}}}{AhAjAlAnB`BbBdBfBh{Bl{Bj}}{Bn{Bj}}}{AhAjAnB`BbBdBfBh}{AhAjAnB`BbBdBfBh}}44`````{{cb}d{}}00{cf{}}00000{g{{Ch{dEf}}}EhEj{{F`{}{{El{{En{ce}}}}}}Fb}}777777{{{En{ce}}}{{Ch{dEf}}}EhEj}{{{Fd{ceg}}}{{Fd{ceg}}}{EhAh}AhAh}{{{Ff{ce}}}{{Ff{ce}}}EhEj}{{{En{ce}}}{{En{ce}}}EhEj}{{ce}d{}{}}00{{{Fd{ceg}}i}{{Af{k}}}EhEj{}{{Cd{{Cb{C`}}}}}{}}{{{Fd{ceg}}i}{{Af{{Fh{km}}}}}EhEj{}{{Cd{{Cb{C`}}}}}{}{}}{Cfc{}}00000{c{{Ch{{Ff{eg}}}}}CjEhEj}{c{{Ch{{En{eg}}}}}CjEhEj}{{cFjFl}{{Ch{{En{eg}}Ef}}}FnEhEj}{{{Fd{ceg}}i}{{Af{{j{{Fd{ceg}}}}}}}EhEj{}{{Cd{{Cb{C`}}}}}}{{{Fd{ceg}}ik}{{Af{{j{{Fd{ceg}}}}}}}EhEj{}{{Cd{{Cb{C`}}}}}{}}{Cfd}00{{{Fd{ceg}}{Fd{ceg}}}Cl{EhBb}BbBb}{{{Ff{ce}}{Ff{ce}}}ClEhEj}{{{En{ce}}{En{ce}}}ClEhEj}{{ce}Cl{}{}}00000000{{{Fd{ceg}}Cn}D`{EhAj}AjAj}{{{Ff{ce}}Cn}D`EhEj}{{{En{ce}}Cn}D`EhEj}{cc{}}00{cDd{}}00{{{Ff{ce}}g}dEhEjDf}{{{En{ce}}g}dEhEjDf}{{}Cf}00{ce{}{}}00{{{Dh{c}}}{{Dh{f}}}{}}00{{{Dj{c}}}{{Dj{f}}}{}}00{{{Dl{c}}}{{Dl{f}}}{}}00{{ce}{{Af{d}}}{}{}}{{G`{Cb{Gb}}}{{Af{Dn}}}}{{{Gd{ce}}{Cb{Gb}}}{{Af{Dn}}}Eh{}}{{DdDdc}{{Af{{Gd{eg}}}}}GfEh{}}{{DdDdc}{{Af{{Fd{egd}}}}}GfEh{}}{{{Fd{ceg}}i{Gh{Cf}}}{{Af{Gj}}}EhEj{}{{Cd{{Cb{C`}}}}}}{{{Fd{ceg}}i{Gh{Cf}}}{{Af{Gl}}}EhEj{}{{Cd{{Cb{C`}}}}}}`{{{Fd{ceg}}{Gn{{Fd{ceg}}}}Gj}{{Af{{Ch{dd}}}}}EhEj{}}{{{Fd{ceg}}{Gn{{Fd{ceg}}}}Gl}{{Af{{Ch{dd}}}}}EhEj{}}`{{{Fd{ceg}}{Cb{i}}k}{{Af{{Dn{C`}}}}}EhEj{}{}{}}{{{Ff{ce}}g}ChEhEjE`}{{{En{ce}}g}ChEhEjE`}{{{En{ce}}gFj}{{Ch{dEf}}}EhEjH`}{{{En{ce}}Fj}CfEhEj}{ce{}{}}00{c{{Ch{e}}}{}{}}00000{cEd{}}00{{{Fd{ceg}}ikm}{{Af{{Ch{dd}}}}}EhEj{}{}{}{}}333{{DdDdDdc}{{Af{{Gd{eg}}}}}GfEh{}}{{DdDdDdc}{{Af{{Fd{egd}}}}}GfEh{}}``{{cb}d{}}0{cf{}}0007777{{{Gl{c}}}{{Gl{c}}}Ah}{{{Gj{c}}}{{Gj{c}}}Ah}{{ce}d{}{}}0{Cfc{}}000{c{{Ch{{Gl{e}}}}}Cj{HbHd}}{c{{Ch{{Gj{e}}}}}Cj{HbHd}}{Cfd}0{{{Gl{c}}{Gl{c}}}ClBb}{{{Gj{c}}{Gj{c}}}ClBb}{{ce}Cl{}{}}00000{{{Gl{c}}Cn}D`Aj}{{{Gj{c}}Cn}D`Aj}{cc{}}0{{}Cf}0{ce{}{}}0{{{Dh{c}}}{{Dh{f}}}{}}0{{{Dj{c}}}{{Dj{f}}}{}}0{{{Dl{c}}}{{Dl{f}}}{}}0{{{Gl{c}}e}Ch{HbHd}E`}{{{Gj{c}}e}Ch{HbHd}E`}55{c{{Ch{e}}}{}{}}000{cEd{}}077`{{cb}d{}}{cf{}}0{e{{Ch{dEf}}}Eh{{F`{}{{El{{Hf{c}}}}}}Fb}}::{{{Hf{c}}}{{Ch{dEf}}}Eh}{{{Hf{c}}}{{Hf{c}}}{EhAh}}{{ce}d{}{}}{Cfc{}}0{c{{Ch{{Hf{e}}}}}CjEh}{{cFjFl}{{Ch{{Hf{e}}Ef}}}FnEh}{Cfd}{{{Hf{c}}{Hf{c}}}Cl{EhBb}}{{ce}Cl{}{}}00{{{Hf{c}}Cn}D`{EhAj}}{cc{}}{{{Hf{c}}e}dEhDf}{{}Cf}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{{{Hf{c}}e}ChEhE`}{{{Hf{c}}eFj}{{Ch{dEf}}}EhH`}{{{Hf{c}}Fj}CfEh}6{c{{Ch{e}}}{}{}}0{cEd{}}8``{{cb}d{}}{cf{}}0::{{{Gn{c}}}{{Gn{c}}}l}{{ce}d{}{}}``{Cfc{}}0{Cfd}{cc{}}{{}Cf}{ce{}{}}{{{Dh{c}}}{{Dh{f}}}{}}{{{Dj{c}}}{{Dj{f}}}{}}{{{Dl{c}}}{{Dl{f}}}{}}{{Hhc{Gh{Cf}}}{{Af{e}}}{{Cd{{Cb{C`}}}}}{AhAjB`BbBfAn}}`{{Hh{Gn{Hh}}c}{{Af{{Ch{dd}}}}}{AhAjB`BbBfAn}}`5??>5``{{{Hl{}{{Hj{c}}}}e}{{Af{{Fh{gc}}}}}{AhAjB`BbBdBhBfAn}{{Cd{{Cb{C`}}}}}{}}{{{Hl{}{{Hj{c}}}}ec}{{Af{{j{{Hl{}{{Hj{c}}}}}}}}}{AhAjB`BbBdBhBfAn}{{Cd{{Cb{C`}}}}}}","c":[],"p":[[5,"Private",317],[1,"unit"],[10,"Any",318],[10,"Error",319],[5,"VidDisperse",0],[10,"VidScheme",0],[10,"Sized",320],[17,"Commit"],[17,"Share"],[17,"Common"],[8,"VidResult",0],[10,"Clone",321],[10,"Debug",322],[10,"Display",322],[10,"DeserializeOwned",323],[10,"Eq",324],[10,"PartialEq",324],[10,"Hash",325],[10,"Serialize",326],[10,"Sync",320],[5,"TaggedBase64",327],[10,"TryFrom",328],[10,"Into",328],[1,"u8"],[1,"slice"],[10,"AsRef",328],[1,"usize"],[6,"Result",329],[10,"Deserializer",323],[1,"bool"],[5,"Formatter",322],[8,"Result",322],[6,"VidError",0],[1,"u32"],[10,"Hasher",325],[5,"Box",330],[5,"Arc",331],[5,"Rc",332],[5,"Vec",333],[10,"Serializer",326],[5,"String",334],[5,"TypeId",318],[6,"SerializationError",335],[10,"Pairing",336],[10,"HasherDigest",337],[17,"Item"],[5,"Common",75],[10,"Iterator",338],[10,"Send",320],[5,"AdvzInternal",75],[5,"Share",75],[1,"tuple"],[6,"Compress",339],[6,"Validate",339],[10,"Read",340],[10,"MaybeGPU",75],[5,"DensePolynomial",341],[8,"Advz",75],[10,"Borrow",342],[5,"Range",343],[5,"LargeRangeProof",191],[5,"SmallRangeProof",191],[5,"Statement",284],[10,"Write",340],[10,"CanonicalSerialize",339],[10,"CanonicalDeserialize",339],[5,"PrecomputeData",249],[10,"PayloadProver",284],[17,"PrecomputeData"],[10,"Precomputable",313]],"b":[[40,"impl-Display-for-VidError"],[41,"impl-Debug-for-VidError"],[162,"impl-PayloadProver%3CLargeRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Evaluation%3E%3E-for-AdvzInternal%3CE,+H,+T%3E"],[163,"impl-PayloadProver%3CSmallRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Proof%3E%3E-for-AdvzInternal%3CE,+H,+T%3E"],[165,"impl-PayloadProver%3CLargeRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Evaluation%3E%3E-for-AdvzInternal%3CE,+H,+T%3E"],[166,"impl-PayloadProver%3CSmallRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Proof%3E%3E-for-AdvzInternal%3CE,+H,+T%3E"]]}],\
["jf_vrf",{"doc":"Verifiable random functions (VRF).","t":"RRRRRRRKCNMMMMMGFFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Error","Input","Output","Proof","PublicKey","PublicParameter","SecretKey","Vrf","blsvrf","evaluate","key_gen","param_gen","proof_to_hash","prove","verify","BLSVRFCipherSuite","BLSVRFError","BLSVRFScheme","VRF_BLS_12_381_SHA256","VRF_BLS_12_381_SHA512","as_error_source","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key_gen","new","param_gen","proof_to_hash","prove","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip"],"q":[[0,"jf_vrf"],[15,"jf_vrf::blsvrf"],[67,"core::result"],[68,"core::fmt"],[69,"core::clone"],[70,"core::marker"],[71,"core::marker"],[72,"serde::ser"],[73,"core::cmp"],[74,"core::cmp"],[75,"core::error"],[76,"rand_core"],[77,"rand_core"],[78,"core::fmt"],[79,"core::any"]],"d":["Error type","The input of VRF proof.","The output of VRF evaluation.","VRF signature.","VRF public key.","Public parameters","VRF secret key.","A trait for VRF proof, evaluation and verification.","BLS signature based VRF","Computes the VRF output given a public input and a VRF …","Creates a pair of VRF public and private keys.","generate public parameters from RNG. If the RNG is not …","Computes the VRF output associated with a VRF proof.","Creates the VRF proof associated with a VRF secret key.","Verifies a VRF proof.","Supported Cipher Suites for BLS VRF.","VRF Error: {0}","BLS VRF scheme. Optimized for signature size, i.e.: PK in …","using blst library and VRF output from SHA256 hashing","using blst library and VRF output from SHA512 hashing","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a pair of VRF public and private keys.","Creates a new BLS VRF instance with the given ciphersuite.","generate public parameters from RNG.","Computes the VRF output associated with a VRF proof.","Creates the VRF proof associated with a VRF secret key.","","","","","","","","","","","Verifies a VRF proof.","","",""],"i":[8,8,8,8,8,8,8,0,0,8,8,8,8,8,8,0,0,0,27,27,30,31,27,30,31,27,30,31,27,30,31,27,30,31,27,30,27,30,30,31,27,30,31,27,30,31,27,30,31,31,31,31,31,30,31,27,30,31,27,30,31,27,30,31,31,27,30],"f":"`````````{{{A`{}{{b{c}}{d{e}}{f{g}}{h{i}}{j{k}}{l{m}}{n{o}}}}cgkAa}{{Ab{mo}}}{}{AdAfAhAjAlAnB`Bb}{AdAfAhAjBdAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}Bf{BhBj}}{{{A`{}{{b{c}}{d{e}}{f{g}}{h{i}}{j{k}}{l{m}}{n{o}}}}cAa}{{Ab{{Bl{ge}}o}}}{}{AdAfAhAjAlAnB`Bb}{AdAfAhAjBdAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}Bf{BhBj}}{{{A`{}{{b{c}}{d{e}}{f{g}}{h{i}}{j{k}}{l{m}}{n{o}}}}{Bn{Aa}}}{{Ab{co}}}{}{AdAfAhAjAlAnB`Bb}{AdAfAhAjBdAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}Bf{BhBj}}{{{A`{}{{b{c}}{d{e}}{f{g}}{h{i}}{j{k}}{l{m}}{n{o}}}}ci}{{Ab{mo}}}{}{AdAfAhAjAlAnB`Bb}{AdAfAhAjBdAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}Bf}{{{A`{}{{b{c}}{d{e}}{f{g}}{h{i}}{j{k}}{l{m}}{n{o}}}}cgkAa}{{Ab{io}}}{}{AdAfAhAjAlAnB`Bb}{AdAfAhAjBdAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}Bf{BhBj}}{{{A`{}{{b{c}}{d{e}}{f{g}}{h{i}}{j{k}}{l{m}}{n{o}}}}ciek}{{Ab{{Bl{C`{Bn{m}}}}o}}}{}{AdAfAhAjAlAnB`Bb}{AdAfAhAjBdAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}{AdAfAhAjAlAnB`Bb}Bf}`````{cBf{}}{ce{}{}}00000{Cbc{}}00000{CbCd}00{{CfCh}Cj}{{ClCh}Cj}0{cc{}}00{{}Cb}00666{{Cnce}{{Ab{{Bl{gi}}Cl}}}{}{BhBj}{}{}}{CfCn}{{Cn{Bn{c}}}{{Ab{eCl}}}{BhBj}{}}{{Cnce}{{Ab{gCl}}}{}{}{}}{{Cncegi}{{Ab{kCl}}}{}{}{}{BhBj}{}}{cD`{}}{c{{Ab{e}}}{}{}}00000{cDb{}}00{{Cncegi}{{Ab{{Bl{C`{Bn{k}}}}Cl}}}{}{}{}{}{}}???","c":[],"p":[[17,"PublicParameter"],[17,"PublicKey"],[17,"SecretKey"],[17,"Proof"],[17,"Input"],[17,"Output"],[17,"Error"],[10,"Vrf",0],[6,"Result",67],[10,"Debug",68],[10,"Clone",69],[10,"Send",70],[10,"Sync",70],[10,"Deserialize",71],[10,"Serialize",72],[10,"PartialEq",73],[10,"Eq",73],[10,"Zeroize",74],[10,"Error",75],[10,"CryptoRng",76],[10,"RngCore",76],[1,"tuple"],[6,"Option",77],[1,"bool"],[1,"usize"],[1,"unit"],[6,"BLSVRFCipherSuite",15],[5,"Formatter",68],[8,"Result",68],[5,"BLSVRFError",15],[5,"BLSVRFScheme",15],[5,"String",78],[5,"TypeId",79]],"b":[[37,"impl-Display-for-BLSVRFError"],[38,"impl-Debug-for-BLSVRFError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
