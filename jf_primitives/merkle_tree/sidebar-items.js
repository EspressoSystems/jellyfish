window.SIDEBAR_ITEMS = {"enum":[["LookupResult","The result of querying at an index in the tree Typically, F for element type, P for membership proof type and N for non-membership proof type"]],"mod":[["append_only","Implementation of a typical append only merkle tree"],["examples","Provides sample instantiations of merkle tree. E.g. Sparse merkle tree with BigUInt index."],["light_weight","A light weight merkle tree is an append only merkle tree who only keeps its frontier â€“ the right-most path."],["macros","Useful macros"],["prelude","Prelude"],["universal_merkle_tree","Implementation of a typical Sparse Merkle Tree."]],"trait":[["AppendableMerkleTreeScheme","Merkle tree that allows insertion at back. Abstracted as a commitment for append-only vector."],["DigestAlgorithm","Merkle tree hash function"],["Element","An element of a Merkle tree."],["ForgetableMerkleTreeScheme","Merkle tree that allows forget/remember elements from the memory"],["ForgetableUniversalMerkleTreeScheme","Universal Merkle tree that allows forget/remember elements from the memory"],["Index","An index type of a leaf in a Merkle tree."],["MerkleCommitment","Trait for a succint merkle tree commitment"],["MerkleTreeScheme","Basic functionalities for a merkle tree implementation. Abstracted as an accumulator for fixed-length array. Supports generate membership proof at a given position and verify a membership proof."],["NodeValue","An internal node value type in a Merkle tree."],["ToTraversalPath","An trait for Merkle tree index type."],["UniversalMerkleTreeScheme","A universal merkle tree is abstracted as a random-access array or a key-value map. It allows manipulation at any given position, and has ability to generate/verify a non-membership proof."]]};