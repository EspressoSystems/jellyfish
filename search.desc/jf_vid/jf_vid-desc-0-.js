searchState.loadedDescShard("jf_vid", 0, "Trait and implementation for a Verifiable Information …\ninvalid args: {0}\nPayload commitment.\nCommon data sent to all storage nodes.\nContains the error value\ninternal error: {0}\nContains the success value\nShare-specific data sent to a storage node.\nConvenience struct to aggregate disperse data.\nThe error type for <code>VidScheme</code> methods.\nConvenience <code>Result</code> wrapper for <code>VidError</code>.\nVID: Verifiable Information Dispersal\nImplementation of Verifiable Information Dispersal (VID) …\nVID payload commitment.\nCompute a payload commitment\nVID common data to send to all storage nodes.\nCompute shares to send to the storage nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract the number of poly evals per share …\nExtract the number of storage nodes from a …\nExtract the payload byte length data from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck that a <code>VidScheme::Common</code> is consistent with a …\nTrait for additional functionality in Verifiable …\nTrait for additional functionality in Verifiable …\nRecover payload from shares. Do not verify shares or check …\nVID disperse shares to send to the storage nodes.\nVerify a share. Used by both storage node and retrieval …\nNormal Advz VID that’s only using CPU\nThe ADVZ VID scheme, a concrete impl for <code>VidScheme</code>. …\nThe <code>VidScheme::Common</code> type for <code>Advz</code>.\nA helper trait that cover API that maybe instantiated …\nThe <code>VidScheme::Share</code> type for <code>Advz</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkzg batch commit TODO: (alex) it’s unfortnate that we …\nReturn a new instance of <code>Self</code> from (mostly) …\nReturn a new instance of <code>Self</code> from (mostly) …\nImplementations of <code>PayloadProver</code> for <code>Advz</code>.\nImplementations of <code>Precomputable</code> for <code>Advz</code>.\nLike <code>Advz::new</code> except with a <code>multiplicity</code> arg.\nLike <code>Advz::new</code> except with a <code>multiplicity</code> arg.\nA proof intended for use on large payload subslices.\nA proof intended for use on small payload subslices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData that can be precomputed as used in dispersal\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPayload proof functionality for <code>VidScheme</code>.\nA convenience struct to reduce the list of arguments to …\nVID commitment against which the proof will be checked.\nVID data against which the proof will be checked.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCompute a proof for a subslice of payload data.\nThe subslice <code>payload[range.start..range.end]</code> from a call to\nVerify a proof made by <code>PayloadProver::payload_proof</code>.\nThe range used to make <code>Self::payload_subslice</code>.\nAllow for precomputation of certain data for <code>VidScheme</code>.\nPrecomputed data that can be (re-)used during disperse …\nSimilar to <code>VidScheme::commit_only</code> but returns additional …\nSimilar to <code>VidScheme::disperse</code> but takes as input …")