# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 327e9213cc6d67051686e61aa06e81e08098c6f607cc5a7332dfdbac6bc7e839 # shrinks to height = 1, pos = 0, elem = BigInt([0, 0, 0, 0]), proof = MerkleProof { pos: 848634752503893619, proof: [] }
cc f9097d2d3cedad3395b919660a7312babd9004e23eb64da6af058eec6e96a078 # shrinks to (mut tree, _) = (UniversalMerkleTree { root: Empty, height: 1, num_leaves: 0, _phantom: PhantomData<jf_merkle_tree::prelude::RescueHash<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_bls12_381::fields::fr::FrConfig, 4>, 4>>> }, []), pos = 0, proof = MerkleProof { pos: 1789032499212, proof: [Empty] }
cc d92afcde25f141e721e712ff94495f31268df5ef0a58a311e2eeb8c4c97257fd # shrinks to (tree, _) = (UniversalMerkleTree { root: Empty, height: 1, num_leaves: 0, _phantom: PhantomData<jf_merkle_tree::prelude::RescueHash<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_bn254::fields::fr::FrConfig, 4>, 4>>> }, []), pos = 50721868662, proof = MerkleProof { pos: 601, proof: [] }
cc 497a449a863ffdcbb3905b9e49986552b19705ee80534ac372c2192e8528226b # shrinks to height = 1, key = 13556233, value = BigInt([0, 0, 0, 0]), test_pos = 336, test_proof = MerkleProof { pos: 16287736347811046354, proof: [] }
cc 0f223b654cd4f7bf21e8a5b93c4053d82e95279facf10c8640e9786689f5b623 # shrinks to (tree, kvs) = (UniversalMerkleTree { root: Empty, height: 2, num_leaves: 0, _phantom: PhantomData<jf_merkle_tree::prelude::RescueHash<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_bn254::fields::fr::FrConfig, 4>, 4>>> }, []), corruption_type = MixNodeTypes, non_member_key = 0
cc 7282c266db62cf32bfe43be9fb0149c8b559d3545ea29e3d4c8667d68852c8be # shrinks to (tree, kvs) = (UniversalMerkleTree { root: Branch { value: BigInt([14314635367438702572, 17984728743134296835, 5819094408440020314, 3242870695092875745]), children: [Leaf { value: BigInt([17171373345939515357, 2401560976835136671, 8834895909758741234, 1708121318150715090]), pos: 0, elem: BigInt([0, 0, 0, 0]) }, Empty, Empty] }, height: 1, num_leaves: 1, _phantom: PhantomData<jf_merkle_tree::prelude::RescueHash<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_bn254::fields::fr::FrConfig, 4>, 4>>> }, [(0, BigInt([0, 0, 0, 0]))]), corruption_type = EmptyProof
cc f08c016e44e165c62f34cbe6c3c097aaa3315b512d9e414712c1e0e9f4dd833e # shrinks to (tree, kvs) = (UniversalMerkleTree { root: Branch { value: BigInt([14380624811683211703, 8923677667384572365, 13409118246934382998, 2772190172543008071]), children: [Empty, Empty, Leaf { value: BigInt([1727523315334927158, 9514237010295660190, 15202681843203336590, 114018042397843138]), pos: 272, elem: BigInt([0, 0, 0, 0]) }] }, height: 1, num_leaves: 1, _phantom: PhantomData<jf_merkle_tree::prelude::RescueHash<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_bn254::fields::fr::FrConfig, 4>, 4>>> }, [(272, BigInt([0, 0, 0, 0]))]), corruption_type = PositionIncrement, test_index = 350
cc 8249a54960f46e61eb0eb3c512c62b171afdf1c3f0fb68a80f594a7807c2af7e # shrinks to (mut tree, _) = (UniversalMerkleTree { root: Empty, height: 3, num_leaves: 0, _phantom: PhantomData<jf_merkle_tree::prelude::Sha3Digest> }, []), pos = 0, proof = MerkleProof { pos: 0, proof: [Empty, Branch { value: Sha3Node([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), children: [] }, Empty, Empty] }
cc 44b937a90481fdc1505d5c501d81eebaffdb0dd2934e51787186fd68af51e633 # shrinks to (mut tree, _) = (UniversalMerkleTree { root: Empty, height: 2, num_leaves: 0, _phantom: PhantomData<jf_merkle_tree::prelude::Sha3Digest> }, []), pos = 0, proof = MerkleProof { pos: 0, proof: [Empty, Branch { value: Sha3Node([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), children: [] }, Empty] }
cc 63388fa33b1a97e2f932560c16d58a1f743328185fa05147569f23829c4a9fda # shrinks to (mut tree, _) = (UniversalMerkleTree { root: Empty, height: 2, num_leaves: 0, _phantom: PhantomData<jf_merkle_tree::prelude::Sha3Digest> }, []), pos = 0, proof = MerkleProof { pos: 0, proof: [Empty, Branch { value: Sha3Node([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), children: [] }, Empty] }
